--- qtbase/src/gui/kernel/qshortcutmap.cpp.orig	2015-07-31 09:53:02.651813400 -0700
+++ qtbase/src/gui/kernel/qshortcutmap.cpp	2015-07-31 09:52:22.240813400 -0700
@@ -39,6 +39,7 @@
 #include "qvector.h"
 #include "qcoreapplication.h"
 #include <private/qkeymapper_p.h>
+#include <QtWidgets/QMenuBar>
 
 #include <algorithm>
 
@@ -638,10 +639,31 @@
     return d->identicals;
 }
 
+/* \part of EESOF Patch
+Makes special check for Alt Key.
+*/
+
+static int checkForAltKey(const QKeySequence &keySequence, const QList<QObject*> &list)
+{
+    if (keySequence[0] & Qt::ALT) {
+        for (int i = 0; i<list.size(); ++i) {
+            QObject* object = list.at(i);
+            int count = object->children().count();
+            if (count == 0)     // ignores QMenuBar
+                return i;
+        }
+    }
+    return -1;
+}
+
 /*! \internal
     Dispatches QShortcutEvents to widgets who grabbed the matched key sequence.
 */
-void QShortcutMap::dispatchEvent(QKeyEvent *e)
+
+typedef int(*_qt_determine_shortcut_priority)(const QKeySequence &keySequence, const QList<QObject*> &list);
+    Q_GUI_EXPORT _qt_determine_shortcut_priority qt_determine_shortcut_priority = checkForAltKey;
+
+    void QShortcutMap::dispatchEvent(QKeyEvent *e)
 {
     Q_D(QShortcutMap);
     if (!d->identicals.size())
@@ -677,6 +699,27 @@
         << next->keyseq.toString() << "\", " << next->id << ", "
         << (bool)(enabledShortcuts>1) << ") to object(" << next->owner << ')';
 #endif
+
+    if (qt_determine_shortcut_priority && d->identicals.size() > 1) {
+        QList<QObject*> list;
+        foreach(const QShortcutEntry *e, d->identicals) {
+            if (e->enabled)
+                list.append(e->owner);
+        }
+
+        const int index = qt_determine_shortcut_priority(next->keyseq, list);
+        if (index != -1) {
+            Q_ASSERT(index < list.size() && index >= 0);
+            for (int i = 0; i<d->identicals.size(); ++i) {
+                if (d->identicals.at(i)->owner == list.at(index)) {
+                    next = d->identicals.at(i);
+                    enabledShortcuts = 1;
+                    break;
+                }
+            }
+        }
+    }
+
     QShortcutEvent se(next->keyseq, next->id, enabledShortcuts>1);
     QCoreApplication::sendEvent(const_cast<QObject *>(next->owner), &se);
 }
