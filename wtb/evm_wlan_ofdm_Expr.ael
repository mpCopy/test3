/*BEGIN_DOC
FUN_NAME: evm_wlan_ofdm()
FUN_DESCRIPTION: Returns EVM (error vector magnitude) analysis results for WLAN OFDM (IEEE 802.11a) voltage signals
RETURNED_VALUE: Real
CATEGORY: Envelope, Signal Processing
EXAMPLE:
evmRMS = evm_wlan_ofdm(Vout[1]) 

where Vout is a named node in a Circuit Envelope simulation, will return the evm rms value in percent for the voltage envelope at the fundamental frequency. The voltage data Vout[1] must contain at least one complete OFDM burst. 

iqOffset = evm_wlan_ofdm( Vout[1], , , "RMS (Video)", 5, , 0.125, 200e-6, , , 5, 10, , , , "IQ_Offset_dB") 

where Vout is a named node in a Circuit Envelope simulation, will return the IQ offset in dB for the voltage envelope at the fundamental frequency. Five bursts will be analyzed and their results averaged. The guard interval used in the generation of the input signal must be 0.125. Since searchTime is set to 200 usec, the first 200 usec of Vout[1] must contain at least one complete OFDM burst. In addition, since 5 bursts need to be averaged Vout[1] must contain at least 5 complete OFDM bursts. Only the OFDM symbols 6 to 15 (measurementOffset = 5 and measurementInterval = 10) will be considered for the EVM analysis. 

SYNTAX: evm = evm_wlan_ofdm(voltage{, mirrorSpectrum, start, averageType, burstsToAverage, subcarrierModulation, guardInterval, searchTime, resultLengthType, resultLength, measurementOffset, measurementInterval, subcarrierSpacing, symbolTimingAdjust, sync, output})
ARGUMENT
  ARG_NAME: voltage
  ARG_DESCRIPTION: complex envelope WLAN OFDM (orthogonal frequency division multiplexing) voltage signal
  ARG_DEFAULT: None
  ARG_RANGE: (-inf:inf)
  ARG_TYPE: Complex
  ARG_REQUIRED: YES
ARGUMENT
  ARG_NAME: mirrorSpectrum
  ARG_DESCRIPTION: specifies whether the input signal should be mirrored or not
  ARG_DEFAULT: NO
  ARG_RANGE: See Notes
  ARG_TYPE: String
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: start 
  ARG_DESCRIPTION: specifies the start time for the EVM analysis
  ARG_DEFAULT: first point of the input data
  ARG_RANGE: [0:max(indep(voltage))]
  ARG_TYPE: Real
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: averageType 
  ARG_DESCRIPTION: specifies what type of averaging is done
  ARG_DEFAULT: OFF
  ARG_RANGE: See Notes
  ARG_TYPE: String
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: burstsToAverage 
  ARG_DESCRIPTION: number of bursts over which the results will be averaged 
  ARG_DEFAULT: 20
  ARG_RANGE: (0:inf)
  ARG_TYPE: Integer
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: subcarrierModulation 
  ARG_DESCRIPTION: data subcarrier modulation format 
  ARG_DEFAULT: "Auto Detect"
  ARG_RANGE: See Notes
  ARG_TYPE: String
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: guardInterval 
  ARG_DESCRIPTION: guard interval length for the OFDM symbols (as a fraction of the FFT time period)
  ARG_DEFAULT: 0.25
  ARG_RANGE: [0:1]
  ARG_TYPE: Real
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: searchTime 
  ARG_DESCRIPTION: search time 
  ARG_DEFAULT: 80 usec
  ARG_RANGE: [0:max(indep(voltage))]
  ARG_TYPE: Real
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: resultLengthType  
  ARG_DESCRIPTION: specifies how the result length is determined
  ARG_DEFAULT: "Auto Select"
  ARG_RANGE: See Notes
  ARG_TYPE: String
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: resultLength  
  ARG_DESCRIPTION: result length in OFDM symbols
  ARG_DEFAULT: 60
  ARG_RANGE: [1:1367]
  ARG_TYPE: Integer
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: measurementOffset  
  ARG_DESCRIPTION: measurement offset in OFDM symbols
  ARG_DEFAULT: 0
  ARG_RANGE: [0:inf)
  ARG_TYPE: Integer
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: measurementInterval  
  ARG_DESCRIPTION: measurement interval in OFDM symbols
  ARG_DEFAULT: 11
  ARG_RANGE: (0:inf)
  ARG_TYPE: Integer
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: subcarrierSpacing
  ARG_DESCRIPTION: frequency spacing between the subcarriers
  ARG_DEFAULT: 312.5 kH
  ARG_RANGE: (0:inf)
  ARG_TYPE: Real
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: symbolTimingAdjust
  ARG_DESCRIPTION: specifies (as a percent of the FFT time period) the timing adjustment done on the OFDM symbols before performing the FFT
  ARG_DEFAULT: -3.125
  ARG_RANGE: [-100*guardInterval:0]
  ARG_TYPE: Real
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: sync
  ARG_DESCRIPTION: preamble sequence that will be used for synchronization
  ARG_DEFAULT: Short Training Seq
  ARG_RANGE: See Notes
  ARG_TYPE: String
  ARG_REQUIRED: NO
ARGUMENT
  ARG_NAME: output
  ARG_DESCRIPTION: EVM analysis result to be returned
  ARG_DEFAULT: EVMrms_percent
  ARG_RANGE: See Notes
  ARG_TYPE: String
  ARG_REQUIRED: NO
DEFINED_IN: In built
SEE ALSO: evm_wlan_dsss_cck_pbcc()
NOTES: See ADS Documentation
EXTERNAL: yes
AUTHOR: Agilent Technologies
DATE: Unkown
VERSION_CREATED: ADS 2003C
END_DOC*/


defun evm_wlan_ofdm(
  Voltage,
  MirrorSpectrum,
  Start,
  AverageType,
  BurstsToAverage,
  SubcarrierModulation,
  GuardInterval,
  SearchTime,
  ResultLengthType,
  ResultLength,
  MeasurementOffset,
  MeasurementInterval,
  SubcarrierSpacing,
  SymbolTimingAdjust,
  Sync,
  Output,
  evm_wlan_ofdmInstName ) {

  if ( Voltage == NULL ) {
    print_function_error( "evm_wlan_ofdm", " first argument (voltage) is a required argument." );
    return;
  }

  if ( strcmp( indep_name( Voltage ), "time" ) ) {
    print_function_error( "evm_wlan_ofdm", " the inner independent variable must be time." );
    return;
  }

  decl dataType = type( Voltage );

  if ( strcmp( dataType, "Complex" ) ) {
    print_function_error( "evm_wlan_ofdm", " first argument (voltage) can only be of type Complex." );
    return;
  }

  decl result;
  decl sweepDim = sweep_dim( Voltage );

  switch ( sweepDim ) {
    case 0:  print_function_error( "evm_wlan_ofdm", " does not support single number data.");
             return;
             break;
    case 1:  result = evm_wlan_ofdm_1d( Voltage, MirrorSpectrum, Start, AverageType, BurstsToAverage, SubcarrierModulation, GuardInterval, SearchTime, ResultLengthType, ResultLength, MeasurementOffset, MeasurementInterval, SubcarrierSpacing, SymbolTimingAdjust, Sync, Output, , evm_wlan_ofdmInstName );
             break;
    case 2:  result = evm_wlan_ofdm_2d( Voltage, MirrorSpectrum, Start, AverageType, BurstsToAverage, SubcarrierModulation, GuardInterval, SearchTime, ResultLengthType, ResultLength, MeasurementOffset, MeasurementInterval, SubcarrierSpacing, SymbolTimingAdjust, Sync, Output, evm_wlan_ofdmInstName );
             break;
    default: print_function_error( "evm_wlan_ofdm", " does not support data with dimensions greater than two.");
             return;
             break;
  }

  return result;
}



defun evm_wlan_ofdm_2d(
  Voltage,
  MirrorSpectrum,
  Start,
  AverageType,
  BurstsToAverage,
  SubcarrierModulation,
  GuardInterval,
  SearchTime,
  ResultLengthType,
  ResultLength,
  MeasurementOffset,
  MeasurementInterval,
  SubcarrierSpacing,
  SymbolTimingAdjust,
  Sync,
  Output,
  evm_wlan_ofdmInstName ) {

// No need to do error checking here.
// The wrapper function evm_wlan_ofdm() as well as the base 
// evm_wlan_ofdm_1d() do all the error checking.

// real( Voltage[::,0] ) is used so that the result is of the correct data type
  decl result = real( Voltage[::,0] );
  decl numPts = sweep_size( result );
  decl i;

  for ( i = 0; i < numPts; i++ ) {
    result[i] = evm_wlan_ofdm_1d( Voltage[i,::], MirrorSpectrum, Start, AverageType, BurstsToAverage, SubcarrierModulation, GuardInterval, SearchTime, ResultLengthType, ResultLength, MeasurementOffset, MeasurementInterval, SubcarrierSpacing, SymbolTimingAdjust, Sync, Output, , evm_wlan_ofdmInstName );
  }

  return result;
}
