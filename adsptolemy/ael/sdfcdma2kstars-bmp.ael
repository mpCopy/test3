de_define_library_palette( "cdma2000", SCHEM_WIN, "sigproc_net",
	"cdma2000 Channel", "cdma2000 Channel", -1,
	 list( "cdma2000", "CDMA2K_Delay", NULL, "Signal delay based on channel tapped-delay line model", "BMP_CDMA2K_Delay" ),
	 list( "cdma2000", "CDMA2K_Interpolation", NULL, "Lagrange interpolator", "BMP_CDMA2K_Interpolation" )
);

de_define_library_palette( "cdma2000", SCHEM_WIN, "sigproc_net",
	"cdma2000 Channel Coding", "cdma2000 Channel Coding", -1,
	 list( "cdma2000", "CDMA2K_BlockDeIntlvr", NULL, "Block de-interleaver", "BMP_CDMA2K_BlockDeIntlvr" ),
	 list( "cdma2000", "CDMA2K_BlockIntlvr", NULL, "Block interleaver", "BMP_CDMA2K_BlockIntlvr" ),
	 list( "cdma2000", "CDMA2K_CC_WithTail", NULL, "Convolutional encoder with tail", "BMP_CDMA2K_CC_WithTail" ),
	 list( "cdma2000", "CDMA2K_CRC_Coder", NULL, "CRC generator", "BMP_CDMA2K_CRC_Coder" ),
	 list( "cdma2000", "CDMA2K_CRC_DeCoder", NULL, "CRC bit eraser with frame quality check", "BMP_CDMA2K_CRC_DeCoder" ),
	 list( "cdma2000", "CDMA2K_DCC_WithTail", NULL, "Viterbi decoder for convolutional code with tail", "BMP_CDMA2K_DCC_WithTail" ),
	 list( "cdma2000", "CDMA2K_DePuncture", NULL, "Zero inserter for de-punctured input stream", "BMP_CDMA2K_DePuncture" ),
	 list( "cdma2000", "CDMA2K_FR_RateDematch", NULL, "Flexible and variable rate de-puncture and combine repeated bits", "BMP_CDMA2K_FR_RateDematch" ),
	 list( "cdma2000", "CDMA2K_FR_RateMatch", NULL, "Flexible and variable rate repeat and puncture", "BMP_CDMA2K_FR_RateMatch" ),
	 list( "cdma2000", "CDMA2K_MAPDecoder1", NULL, "MAP decoder 1 for turbo decoder", "BMP_CDMA2K_MAPDecoder1" ),
	 list( "cdma2000", "CDMA2K_MAPDecoder2", NULL, "MAP decoder 2 for turbo decoder", "BMP_CDMA2K_MAPDecoder2" ),
	 list( "cdma2000", "CDMA2K_Puncture", NULL, "Symbol puncture for input stream", "BMP_CDMA2K_Puncture" ),
	 list( "cdma2000", "CDMA2K_SymCyclicShift", NULL, "Cyclic shifter for MC Mode interleaver", "BMP_CDMA2K_SymCyclicShift" ),
	 list( "cdma2000", "CDMA2K_TurboDeIntlvr", NULL, "De-interleaver for turbo code", "BMP_CDMA2K_TurboDeIntlvr" ),
	 list( "cdma2000", "CDMA2K_TurboDeMux", NULL, "De-puncture and de-mux for turbo decoder", "BMP_CDMA2K_TurboDeMux" ),
	 list( "cdma2000", "CDMA2K_TurboIntlvr", NULL, "Interleaver for turbo code", "BMP_CDMA2K_TurboIntlvr" ),
	 list( "cdma2000", "CDMA2K_TurboMux", NULL, "Multiplexer for turbo code", "BMP_CDMA2K_TurboMux" ),
	 list( "cdma2000", "CDMA2K_VR_CCwithTail", NULL, "Variable data rate convolutional encoder with tail", "BMP_CDMA2K_VR_CCwithTail" ),
	 list( "cdma2000", "CDMA2K_VR_Compare", NULL, "BER calculator for blind rate detection", "BMP_CDMA2K_VR_Compare" ),
	 list( "cdma2000", "CDMA2K_VR_DCCwithTail", NULL, "Variable data rate Viterbi decoder for convolutional code with tail", "BMP_CDMA2K_VR_DCCwithTail" ),
	 list( "cdma2000", "CDMA2K_VR_DeFraming", NULL, "Variable rate deframing for fundamental channel", "BMP_CDMA2K_VR_DeFraming" ),
	 list( "cdma2000", "CDMA2K_VR_Framing", NULL, "Variable rate framing for fundamental channel", "BMP_CDMA2K_VR_Framing" ),
	 list( "cdma2000", "CDMA2K_VR_RateDeMatch", NULL, "Rate dematching", "BMP_CDMA2K_VR_RateDeMatch" ),
	 list( "cdma2000", "CDMA2K_VR_RateMatch", NULL, "Rate matching for fundamental channel", "BMP_CDMA2K_VR_RateMatch" ),
	 list( "cdma2000", "CDMA2K_VR_Src", NULL, "Variable data rate source for fundamental channel", "BMP_CDMA2K_VR_Src" )
);

de_define_library_palette( "cdma2000", SCHEM_WIN, "sigproc_net",
	"cdma2000 Receivers", "cdma2000 Receivers", -1,
	 list( "cdma2000", "CDMA2K_CoefDownSample", NULL, "Down sample coefficients", "BMP_CDMA2K_CoefDownSample" ),
	 list( "cdma2000", "CDMA2K_FwdChnlEstimate", NULL, "Forward channel estimator", "BMP_CDMA2K_FwdChnlEstimate" ),
	 list( "cdma2000", "CDMA2K_FwdCohReceiver", NULL, "Forward coherent combiner", "BMP_CDMA2K_FwdCohReceiver" ),
	 list( "cdma2000", "CDMA2K_RevChnlEstimate", NULL, "Reverse link channel estimator", "BMP_CDMA2K_RevChnlEstimate" ),
	 list( "cdma2000", "CDMA2K_RevCohReceiver", NULL, "Reverse link Rake receiver", "BMP_CDMA2K_RevCohReceiver" )
);

de_define_library_palette( "cdma2000", SCHEM_WIN, "sigproc_net",
	"cdma2000 Test", "cdma2000 Test", -1,
	 list( "cdma2000", "CDMA2K_FwdMultiUserSrc", NULL, "Multiuser data source for forward link", "BMP_CDMA2K_FwdMultiUserSrc" ),
	 list( "cdma2000", "CDMA2K_FwdOCNS", NULL, "Orthogonal channel noise simulator", "BMP_CDMA2K_FwdOCNS" )
);

de_define_library_palette( "cdma2000", SCHEM_WIN, "sigproc_net",
	"cdma2000 Transmission", "cdma2000 Transmission", -1,
	 list( "cdma2000", "CDMA2K_BSTX", NULL, "Base station transmitter", "BMP_CDMA2K_BSTX" ),
	 list( "cdma2000", "CDMA2K_DataScrambling", NULL, "Data scrambler and descrambler for forward link", "BMP_CDMA2K_DataScrambling" ),
	 list( "cdma2000", "CDMA2K_DataScrambling_U", NULL, "Data scrambler and descrambler for forward link, spec", "BMP_CDMA2K_DataScrambling_U" ),
	 list( "cdma2000", "CDMA2K_FIR", NULL, "FIR baseband filter", "BMP_CDMA2K_FIR" ),
	 list( "cdma2000", "CDMA2K_FwdPCBitExtraction", NULL, "Power control bit extractor for forward link", "BMP_CDMA2K_FwdPCBitExtraction" ),
	 list( "cdma2000", "CDMA2K_FwdPCBitExtraction_U", NULL, "Power control bit extractor for forward link, spec", "BMP_CDMA2K_FwdPCBitExtraction_U" ),
	 list( "cdma2000", "CDMA2K_FwdPCBitPuncture", NULL, "Forward power control bit puncture", "BMP_CDMA2K_FwdPCBitPuncture" ),
	 list( "cdma2000", "CDMA2K_FwdPCBitPuncture_U", NULL, "Forward power control bit puncture, spec", "BMP_CDMA2K_FwdPCBitPuncture_U" ),
	 list( "cdma2000", "CDMA2K_FwdPowerAllocation", NULL, "Power allocator for base station channels", "BMP_CDMA2K_FwdPowerAllocation" ),
	 list( "cdma2000", "CDMA2K_FwdPwrAlloc", NULL, "Power allocator for base station channels", "BMP_CDMA2K_FwdPwrAlloc" ),
	 list( "cdma2000", "CDMA2K_LongCodeGenerator", NULL, "Long code generator", "BMP_CDMA2K_LongCodeGenerator" ),
	 list( "cdma2000", "CDMA2K_MSTX", NULL, "Mobile station transmitter", "BMP_CDMA2K_MSTX" ),
	 list( "cdma2000", "CDMA2K_PCBgenerator", NULL, "Power control bit generator", "BMP_CDMA2K_PCBgenerator" ),
	 list( "cdma2000", "CDMA2K_PNCode", NULL, "PN code generator", "BMP_CDMA2K_PNCode" ),
	 list( "cdma2000", "CDMA2K_PNCode_U", NULL, "PN code generator, spec", "BMP_CDMA2K_PNCode_U" ),
	 list( "cdma2000", "CDMA2K_PowerControl", NULL, "Power controller", "BMP_CDMA2K_PowerControl" ),
	 list( "cdma2000", "CDMA2K_QuasiOrthMask", NULL, "Quasi-orthogonal mask generator", "BMP_CDMA2K_QuasiOrthMask" ),
	 list( "cdma2000", "CDMA2K_QuasiOrthMask_U", NULL, "Quasi-orthogonal mask generator, spec", "BMP_CDMA2K_QuasiOrthMask_U" ),
	 list( "cdma2000", "CDMA2K_RevPCBitPuncture", NULL, "Reverse power control bit puncture", "BMP_CDMA2K_RevPCBitPuncture" ),
	 list( "cdma2000", "CDMA2K_RevPowerAdjust", NULL, "Power adjuster for mobile station channels", "BMP_CDMA2K_RevPowerAdjust" ),
	 list( "cdma2000", "CDMA2K_RevPowerAllocation", NULL, "Relative power allocator for reverse channel", "BMP_CDMA2K_RevPowerAllocation" ),
	 list( "cdma2000", "CDMA2K_RevPowerAllocation_U", NULL, "Relative power allocator for reverse channel, spec", "BMP_CDMA2K_RevPowerAllocation_U" ),
	 list( "cdma2000", "CDMA2K_SyncChSARSublayer", NULL, "Sync channel Segmentation and Reassembly (SAR) Sublayer process, add MSG_LENGTH, CRC and segment into fragments and add SOM bit", "BMP_CDMA2K_SyncChSARSublayer" ),
	 list( "cdma2000", "CDMA2K_SyncChSource", NULL, "Sync channel source generation", "BMP_CDMA2K_SyncChSource" ),
	 list( "cdma2000", "CDMA2K_SyncChUtilitySublayer", NULL, "Sync channel Utility Sublayer process, add MSG_TYPE and PDU_PADDING to meet the PDU length 8k+2", "BMP_CDMA2K_SyncChUtilitySublayer" ),
	 list( "cdma2000", "CDMA2K_VL_Walsh", NULL, "Variable length Walsh code generator", "BMP_CDMA2K_VL_Walsh" )
);

