set_design_type( sigproc_net );
create_item ("UMB_RL_TxEVM_Info","information of UMB_RL_TxEVM.dsn",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_RL_TxEVM_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_RL_TxEVM_Info",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_RL_TxEVM_Info",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","UMB_RL_TxEVM_Info");
palette_group("InformationComponent","InformationComponent","UMB_RL_TxEVM_Info");

create_item ("UMB_FL_TxEVM_Info","information of UMB_FL_TxEVM.dsn",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_TxEVM_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_TxEVM_Info",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_TxEVM_Info",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","UMB_FL_TxEVM_Info");
palette_group("InformationComponent","InformationComponent","UMB_FL_TxEVM_Info");

create_item ("UMB_FL_Fading_BER_Info","information of UMB_FL_Fading_BER_Info.dsn",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_Fading_BER_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_Fading_BER_Info",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_Fading_BER_Info",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","UMB_FL_Fading_BER_Info");
palette_group("InformationComponent","InformationComponent","UMB_FL_Fading_BER_Info");

create_item ("UMB_FL_AWGN_BER_Info","information of UMB_FL_AWGN_BER_Info.dsn",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_AWGN_BER_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_AWGN_BER_Info",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_AWGN_BER_Info",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","UMB_FL_AWGN_BER_Info");
palette_group("InformationComponent","InformationComponent","UMB_FL_AWGN_BER_Info");

create_item ("UMB_RL_Demo_Info","information of UMB_RL_Demo_Info.dsn",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_RL_Demo_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_RL_Demo_Info",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_RL_Demo_Info",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","UMB_RL_Demo_Info");
palette_group("InformationComponent","InformationComponent","UMB_RL_Demo_Info");

create_item ("UMB_FL_Demo_Info","information of UMB_FL_Demo_Info.dsn",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_Demo_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_Demo_Info",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_Demo_Info",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","UMB_FL_Demo_Info");
palette_group("InformationComponent","InformationComponent","UMB_FL_Demo_Info");

create_item ("UMB_RL_TxWaveform_Info","information of UMB_RL_TxWaveform.dsn",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_RL_TxWaveform_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_RL_TxWaveform_Info",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_RL_TxWaveform_Info",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","UMB_RL_TxWaveform_Info");
palette_group("InformationComponent","InformationComponent","UMB_RL_TxWaveform_Info");

create_item ("UMB_FL_TxWaveform_Info","information of UMB_FL_TxWaveform.dsn",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_TxWaveform_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_TxWaveform_Info",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_TxWaveform_Info",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","UMB_FL_TxWaveform_Info");
palette_group("InformationComponent","InformationComponent","UMB_FL_TxWaveform_Info");

create_constant_form ("_nUMB_x5fChannel_x5fITU_fPedestrian_x5fA", 
	"Pedestrian_A",
	0,
	"0",
	"Pedestrian_A");
create_constant_form ("_nUMB_x5fChannel_x5fITU_fPedestrian_x5fB", 
	"Pedestrian_B",
	0,
	"1",
	"Pedestrian_B");
create_constant_form ("_nUMB_x5fChannel_x5fITU_fVehicular_x5fA", 
	"Vehicular_A",
	0,
	"2",
	"Vehicular_A");
create_constant_form ("_nUMB_x5fChannel_x5fITU_fVehicular_x5fB", 
	"Vehicular_B",
	0,
	"3",
	"Vehicular_B");
create_constant_form ("_nUMB_x5fChannel_x5fITU_fUserDefined", 
	"UserDefined",
	0,
	"4",
	"UserDefined");
create_form_set("_nUMB_x5fChannel_x5fITU_fModelTypeSet",
	"_nUMB_x5fChannel_x5fITU_fPedestrian_x5fA",
	"_nUMB_x5fChannel_x5fITU_fPedestrian_x5fB",
	"_nUMB_x5fChannel_x5fITU_fVehicular_x5fA",
	"_nUMB_x5fChannel_x5fITU_fVehicular_x5fB",
	"_nUMB_x5fChannel_x5fITU_fUserDefined",
	"StdForm");
create_constant_form ("_nUMB_x5fChannel_x5fITU_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fChannel_x5fITU_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fChannel_x5fITU_fPathLossSet",
	"_nUMB_x5fChannel_x5fITU_fNO",
	"_nUMB_x5fChannel_x5fITU_fYES",
	"StdForm");
create_item ("UMB_Channel_ITU","3GPP2 UMB channel model",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_Channel_ITU",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_Channel_ITU",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_Channel_ITU",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","Input resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("ROut","Output resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("ModelType","the ITU-R M.1225 Channel number or User defined Channel",
		PARM_INT,
		"_nUMB_x5fChannel_x5fITU_fModelTypeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fChannel_x5fITU_fVehicular_x5fA","Vehicular_A")),
	create_parm ("Delay","the delay of each tap in usec, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		TIME_UNIT,
		prm("StringAndReference","{0.0 , 0.31 , 0.71 , 1.09 , 1.73 , 2.51 }")),
	create_parm ("Power","the power in each tap in dB, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0 dB, -1.0 dB, -9.0 dB, -10.0 dB, -15.0 dB, -20.0 dB}")),
	create_parm ("Ricean_factor","the Ricean K-factor in linear scale of each tap, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("Velocity","the velocity of mobile station",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","120")),
	create_parm ("PathLoss","option for inclusion of large-scale pathloss",
		PARM_INT,
		"_nUMB_x5fChannel_x5fITU_fPathLossSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fChannel_x5fITU_fNO","NO")),
	create_parm ("PropDistance","the distance of BS and UE in meter, effective only when PassLoss is set as YES",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DISTANCE_UNIT,
		prm("StdForm","1000")));
library_group("UMB, Channel Model","UMB, Channel Model","UMB_Channel_ITU");
palette_group("UMB, Channel Model","UMB, Channel Model","UMB_Channel_ITU");

create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fFull_x5fSuperframe", 
	"Full Superframe",
	0,
	"0",
	"Full Superframe");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fCompact_x5fSuperframe", 
	"Compact Superframe",
	0,
	"1",
	"Compact Superframe");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fOutputFrameFormatSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fFull_x5fSuperframe",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fCompact_x5fSuperframe",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f16", 
	"Ratio 16",
	0,
	"4",
	"Ratio 16");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f32", 
	"Ratio 32",
	0,
	"5",
	"Ratio 32");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fOversamplingOptionSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f1",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f2",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f4",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f8",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f16",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f32",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fFFTSizeSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f2048",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f1024",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f512",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f256",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNcp_x5f1", 
	"Ncp 1",
	0,
	"0",
	"Ncp 1");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNcp_x5f2", 
	"Ncp 2",
	0,
	"1",
	"Ncp 2");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNcp_x5f3", 
	"Ncp 3",
	0,
	"2",
	"Ncp 3");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNcp_x5f4", 
	"Ncp 4",
	0,
	"3",
	"Ncp 4");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fNcpSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNcp_x5f1",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNcp_x5f2",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNcp_x5f3",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNcp_x5f4",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fMode_x5f1", 
	"Mode 1",
	0,
	"0",
	"Mode 1");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fMode_x5f2", 
	"Mode 2",
	0,
	"1",
	"Mode 2");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fRsChMuxModeSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fMode_x5f1",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fMode_x5f2",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fSize_x5f64", 
	"Size 64",
	0,
	"0",
	"Size 64");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fSize_x5f128", 
	"Size 128",
	0,
	"1",
	"Size 128");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fSubzoneSizeSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fSize_x5f64",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fSize_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fSize_x5f4096", 
	"Size 4096",
	0,
	"0",
	"Size 4096");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fSize_x5f8192", 
	"Size 8192",
	0,
	"1",
	"Size 8192");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fMaxPHYSubPacketSizeSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fSize_x5f4096",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fSize_x5f8192",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fEnableBRCHSubzoneCyclingSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNO",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fEnableHalfDuplexOperationSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNO",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fSuperframeIdxIncreasedSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNO",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fGloballySynchronousSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNO",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fRandom", 
	"Random",
	0,
	"0",
	"Random");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fDeterministic", 
	"Deterministic",
	0,
	"1",
	"Deterministic");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fFCPICH_x5fHoppingModeSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fRandom",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fDeterministic",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fFormat_x5f0", 
	"Format 0",
	0,
	"0",
	"Format 0");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fFormat_x5f1", 
	"Format 1",
	0,
	"1",
	"Format 1");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fFormat_x5f2", 
	"Format 2",
	0,
	"2",
	"Format 2");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fDPICHFormatSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fFormat_x5f0",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fFormat_x5f1",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fFormat_x5f2",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fEnableFLCSSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNO",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fFLCS_x5fUseDRCHSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNO",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fFractional_x5fFreq", 
	"Fractional Freq",
	0,
	"1",
	"Fractional Freq");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fIntegeral_x5fand_x5fFractional_x5fFreq", 
	"Integeral and Fractional Freq",
	0,
	"2",
	"Integeral and Fractional Freq");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fFreqSyncSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fNone",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fFractional_x5fFreq",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fIntegeral_x5fand_x5fFractional_x5fFreq",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fHard", 
	"Hard",
	0,
	"0",
	"Hard");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fSoft", 
	"Soft",
	0,
	"1",
	"Soft");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_x5fRF_fCSI", 
	"CSI",
	0,
	"2",
	"CSI");
create_form_set("_nUMB_x5fFL_x5fReceiver_x5fRF_fDecoderTypeSet",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fHard",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fSoft",
	"_nUMB_x5fFL_x5fReceiver_x5fRF_fCSI",
	"StdForm");
create_item ("UMB_FL_Receiver_RF","3GPP2 UMB Forward Link RF Receiver",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_Receiver_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_Receiver_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_Receiver_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","Input resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("RTemp","Temperature, in degrees C",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","3407 MHz")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","Reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("GainImbalance","Gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","Phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("OutputFrameFormat","output superframe format",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fOutputFrameFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fFull_x5fSuperframe","Full_Superframe")),
	create_parm ("StartingFrame","the starting frame index in each superframe from which this model will allocate the data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumFrames","the number of frames on which this model will allocate the data starting from the StartingFrame",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("OversamplingOption","Oversampling ratio option",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fFFT_x5f512","FFT_512")),
	create_parm ("Ncp","the index for Cyclic Prefix (Tcp=Ncp*FFTSize*Tchip/16)",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fNcpSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fNcp_x5f1","Ncp_1")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")),
	create_parm ("RsChMuxMode","The mux mode for resource channels",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fRsChMuxModeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fMode_x5f2","Mode_2")),
	create_parm ("SubzoneSize","the number of hop-ports in each subzone (64 or 128)",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fSize_x5f64","Size_64")),
	create_parm ("NumDRCHSubzones","the number of DRCH subzones",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MaxPHYSubPacketSize","the maximum subpacket size (4096 bits or 8192 bits)",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fMaxPHYSubPacketSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fSize_x5f8192","Size_8192")),
	create_parm ("EnableBRCHSubzoneCycling","whether the cycling for BRCH subzones is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fEnableBRCHSubzoneCyclingSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("EnableHalfDuplexOperation","whether the half duplex operation is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fEnableHalfDuplexOperationSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("StartingSuperframe","the superframe index for the starting superframe",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SuperframeIdxIncreased","whether the superframe index is increased from superframe to superframe",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fSuperframeIdxIncreasedSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fYES","YES")),
	create_parm ("GloballySynchronous","whether the sector is synchronized with GPS time",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fGloballySynchronousSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("PilotPN","9-bit pilot PN for different sectors",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_NumPackets","number of data packets transmitted in F-DCH; At most four packets are supported",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_PFIndex","the packet format index for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_NodeID","the array of NodeID allocated to the first data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{31}")),
	create_parm ("FDCH_1_MACID","the MAC ID of the first data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_NumHARQTrans","the number of HARQ transmissions for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_HARQInterlace","the number of frames in HARQ interlace structure for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_1_StartingFrame","the starting frame index from which the first data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_1_NumFrames","the number of frames on which the first data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_1_PowerDensity","the power density for the first data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_2_PFIndex","the packet format index for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_2_NodeID","the array of NodeID allocated to the second data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{32}")),
	create_parm ("FDCH_2_MACID","the MAC ID of the second data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("FDCH_2_NumHARQTrans","the number of HARQ transmissions for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_2_HARQInterlace","the number of frames in HARQ interlace structure for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_2_StartingFrame","the starting frame index from which the second data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_2_NumFrames","the number of frames on which the second data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_2_PowerDensity","the power density for the second data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_3_PFIndex","the packet format index for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_3_NodeID","the array of NodeID allocated to the third data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{33}")),
	create_parm ("FDCH_3_MACID","the MAC ID of the third data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("FDCH_3_NumHARQTrans","the number of HARQ transmissions for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_3_HARQInterlace","the number of frames in HARQ interlace structure for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_3_StartingFrame","the starting frame index from which the third data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_3_NumFrames","the number of frames on which the third data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_3_PowerDensity","the power density for the third data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_4_PFIndex","the packet format index for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_4_NodeID","the array of NodeID allocated to the fourth data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{34}")),
	create_parm ("FDCH_4_MACID","the MAC ID of the fourth data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("FDCH_4_NumHARQTrans","the number of HARQ transmissions for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_4_HARQInterlace","the number of frames in HARQ interlace structure for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_4_StartingFrame","the starting frame index from which the fourth data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_4_NumFrames","the number of frames on which the fourth data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_4_PowerDensity","the power density for the fourth data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FCPICH_HoppingMode","the hopping mode for F-CPICH",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fFCPICH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fRandom","Random")),
	create_parm ("FCPICH_PilotSpacing","the subcarrier spacing for common pilots",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("FCPICH_PowerDensity","the power density for F-CPICH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("CodeOffset","code offset between 0 and 2 for Forward Dedicated Pilot Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DPICHFormat","the Forward Dedicated Pilot Channel format for Forward Data Channel",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fDPICHFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fFormat_x5f0","Format_0")),
	create_parm ("EnableFLCS","whether the Forward Link Control Segment is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fEnableFLCSSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("FLCS_NumBlocks","the number of blocks (tiles) allocated for FLCS, only valid when EnableFLCS is YES",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("FLCS_UseDRCH","whether FLCS is on DRCH or on BRCH, only valid when EnableFLCS is YES",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fFLCS_x5fUseDRCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("FLCS_PowerDensity","the power density for FLCS (defined as power(dBm) per modulation symbol), only valid when EnableFLCS is YES",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("FreqSync","frequency sync mode",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fFreqSyncSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fFractional_x5fFreq","Fractional_Freq")),
	create_parm ("IterationNumber","number of iterations for turbo decoder",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("DecoderType","Demapping type",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_x5fRF_fDecoderTypeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_x5fRF_fCSI","CSI")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","The maximum delay of multi-path channel",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1e-6")),
	create_parm ("Fmax","The maximum doppler frequency",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")));
library_group("UMB,	Receiver","UMB,	Receiver","UMB_FL_Receiver_RF");
palette_group("UMB,	Receiver","UMB,	Receiver","UMB_FL_Receiver_RF");

create_constant_form ("_nUMB_x5fFL_x5fReceiver_fFull_x5fSuperframe", 
	"Full Superframe",
	0,
	"0",
	"Full Superframe");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fCompact_x5fSuperframe", 
	"Compact Superframe",
	0,
	"1",
	"Compact Superframe");
create_form_set("_nUMB_x5fFL_x5fReceiver_fOutputFrameFormatSet",
	"_nUMB_x5fFL_x5fReceiver_fFull_x5fSuperframe",
	"_nUMB_x5fFL_x5fReceiver_fCompact_x5fSuperframe",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fRatio_x5f16", 
	"Ratio 16",
	0,
	"4",
	"Ratio 16");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fRatio_x5f32", 
	"Ratio 32",
	0,
	"5",
	"Ratio 32");
create_form_set("_nUMB_x5fFL_x5fReceiver_fOversamplingOptionSet",
	"_nUMB_x5fFL_x5fReceiver_fRatio_x5f1",
	"_nUMB_x5fFL_x5fReceiver_fRatio_x5f2",
	"_nUMB_x5fFL_x5fReceiver_fRatio_x5f4",
	"_nUMB_x5fFL_x5fReceiver_fRatio_x5f8",
	"_nUMB_x5fFL_x5fReceiver_fRatio_x5f16",
	"_nUMB_x5fFL_x5fReceiver_fRatio_x5f32",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fFL_x5fReceiver_fFFTSizeSet",
	"_nUMB_x5fFL_x5fReceiver_fFFT_x5f2048",
	"_nUMB_x5fFL_x5fReceiver_fFFT_x5f1024",
	"_nUMB_x5fFL_x5fReceiver_fFFT_x5f512",
	"_nUMB_x5fFL_x5fReceiver_fFFT_x5f256",
	"_nUMB_x5fFL_x5fReceiver_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNcp_x5f1", 
	"Ncp 1",
	0,
	"0",
	"Ncp 1");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNcp_x5f2", 
	"Ncp 2",
	0,
	"1",
	"Ncp 2");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNcp_x5f3", 
	"Ncp 3",
	0,
	"2",
	"Ncp 3");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNcp_x5f4", 
	"Ncp 4",
	0,
	"3",
	"Ncp 4");
create_form_set("_nUMB_x5fFL_x5fReceiver_fNcpSet",
	"_nUMB_x5fFL_x5fReceiver_fNcp_x5f1",
	"_nUMB_x5fFL_x5fReceiver_fNcp_x5f2",
	"_nUMB_x5fFL_x5fReceiver_fNcp_x5f3",
	"_nUMB_x5fFL_x5fReceiver_fNcp_x5f4",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fMode_x5f1", 
	"Mode 1",
	0,
	"0",
	"Mode 1");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fMode_x5f2", 
	"Mode 2",
	0,
	"1",
	"Mode 2");
create_form_set("_nUMB_x5fFL_x5fReceiver_fRsChMuxModeSet",
	"_nUMB_x5fFL_x5fReceiver_fMode_x5f1",
	"_nUMB_x5fFL_x5fReceiver_fMode_x5f2",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fSize_x5f64", 
	"Size 64",
	0,
	"0",
	"Size 64");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fSize_x5f128", 
	"Size 128",
	0,
	"1",
	"Size 128");
create_form_set("_nUMB_x5fFL_x5fReceiver_fSubzoneSizeSet",
	"_nUMB_x5fFL_x5fReceiver_fSize_x5f64",
	"_nUMB_x5fFL_x5fReceiver_fSize_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fSize_x5f4096", 
	"Size 4096",
	0,
	"0",
	"Size 4096");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fSize_x5f8192", 
	"Size 8192",
	0,
	"1",
	"Size 8192");
create_form_set("_nUMB_x5fFL_x5fReceiver_fMaxPHYSubPacketSizeSet",
	"_nUMB_x5fFL_x5fReceiver_fSize_x5f4096",
	"_nUMB_x5fFL_x5fReceiver_fSize_x5f8192",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_fEnableBRCHSubzoneCyclingSet",
	"_nUMB_x5fFL_x5fReceiver_fNO",
	"_nUMB_x5fFL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_fEnableHalfDuplexOperationSet",
	"_nUMB_x5fFL_x5fReceiver_fNO",
	"_nUMB_x5fFL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_fSuperframeIdxIncreasedSet",
	"_nUMB_x5fFL_x5fReceiver_fNO",
	"_nUMB_x5fFL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_fGloballySynchronousSet",
	"_nUMB_x5fFL_x5fReceiver_fNO",
	"_nUMB_x5fFL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fRandom", 
	"Random",
	0,
	"0",
	"Random");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fDeterministic", 
	"Deterministic",
	0,
	"1",
	"Deterministic");
create_form_set("_nUMB_x5fFL_x5fReceiver_fFCPICH_x5fHoppingModeSet",
	"_nUMB_x5fFL_x5fReceiver_fRandom",
	"_nUMB_x5fFL_x5fReceiver_fDeterministic",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fFormat_x5f0", 
	"Format 0",
	0,
	"0",
	"Format 0");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fFormat_x5f1", 
	"Format 1",
	0,
	"1",
	"Format 1");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fFormat_x5f2", 
	"Format 2",
	0,
	"2",
	"Format 2");
create_form_set("_nUMB_x5fFL_x5fReceiver_fDPICHFormatSet",
	"_nUMB_x5fFL_x5fReceiver_fFormat_x5f0",
	"_nUMB_x5fFL_x5fReceiver_fFormat_x5f1",
	"_nUMB_x5fFL_x5fReceiver_fFormat_x5f2",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_fEnableFLCSSet",
	"_nUMB_x5fFL_x5fReceiver_fNO",
	"_nUMB_x5fFL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fReceiver_fFLCS_x5fUseDRCHSet",
	"_nUMB_x5fFL_x5fReceiver_fNO",
	"_nUMB_x5fFL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fFractional_x5fFreq", 
	"Fractional Freq",
	0,
	"1",
	"Fractional Freq");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fIntegeral_x5fand_x5fFractional_x5fFreq", 
	"Integeral and Fractional Freq",
	0,
	"2",
	"Integeral and Fractional Freq");
create_form_set("_nUMB_x5fFL_x5fReceiver_fFreqSyncSet",
	"_nUMB_x5fFL_x5fReceiver_fNone",
	"_nUMB_x5fFL_x5fReceiver_fFractional_x5fFreq",
	"_nUMB_x5fFL_x5fReceiver_fIntegeral_x5fand_x5fFractional_x5fFreq",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fHard", 
	"Hard",
	0,
	"0",
	"Hard");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fSoft", 
	"Soft",
	0,
	"1",
	"Soft");
create_constant_form ("_nUMB_x5fFL_x5fReceiver_fCSI", 
	"CSI",
	0,
	"2",
	"CSI");
create_form_set("_nUMB_x5fFL_x5fReceiver_fDecoderTypeSet",
	"_nUMB_x5fFL_x5fReceiver_fHard",
	"_nUMB_x5fFL_x5fReceiver_fSoft",
	"_nUMB_x5fFL_x5fReceiver_fCSI",
	"StdForm");
create_item ("UMB_FL_Receiver","3GPP2 UMB Forward Link Receiver",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_Receiver",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_Receiver",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_Receiver",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("OutputFrameFormat","output superframe format",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fOutputFrameFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fFull_x5fSuperframe","Full_Superframe")),
	create_parm ("StartingFrame","the starting frame index in each superframe from which this model will allocate the data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumFrames","the number of frames on which this model will allocate the data starting from the StartingFrame",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("OversamplingOption","Oversampling ratio option",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fRatio_x5f2","Ratio_2")),
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fFFT_x5f512","FFT_512")),
	create_parm ("Ncp","the index for Cyclic Prefix (Tcp=Ncp*FFTSize*Tchip/16)",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fNcpSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fNcp_x5f1","Ncp_1")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")),
	create_parm ("RsChMuxMode","The mux mode for resource channels",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fRsChMuxModeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fMode_x5f2","Mode_2")),
	create_parm ("SubzoneSize","the number of hop-ports in each subzone (64 or 128)",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fSize_x5f64","Size_64")),
	create_parm ("NumDRCHSubzones","the number of DRCH subzones",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MaxPHYSubPacketSize","the maximum subpacket size (4096 bits or 8192 bits)",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fMaxPHYSubPacketSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fSize_x5f8192","Size_8192")),
	create_parm ("EnableBRCHSubzoneCycling","whether the cycling for BRCH subzones is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fEnableBRCHSubzoneCyclingSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fNO","NO")),
	create_parm ("EnableHalfDuplexOperation","whether the half duplex operation is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fEnableHalfDuplexOperationSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fNO","NO")),
	create_parm ("StartingSuperframe","the superframe index for the starting superframe",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SuperframeIdxIncreased","whether the superframe index is increased from superframe to superframe",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fSuperframeIdxIncreasedSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fYES","YES")),
	create_parm ("GloballySynchronous","whether the sector is synchronized with GPS time",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fGloballySynchronousSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fNO","NO")),
	create_parm ("PilotPN","9-bit pilot PN for different sectors",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_NumPackets","number of data packets transmitted in F-DCH; At most four packets are supported",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_PFIndex","the packet format index for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_NodeID","the array of NodeID allocated to the first data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{31}")),
	create_parm ("FDCH_1_MACID","the MAC ID of the first data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_NumHARQTrans","the number of HARQ transmissions for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_HARQInterlace","the number of frames in HARQ interlace structure for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_1_StartingFrame","the starting frame index from which the first data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_1_NumFrames","the number of frames on which the first data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_1_PowerDensity","the power density for the first data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_2_PFIndex","the packet format index for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_2_NodeID","the array of NodeID allocated to the second data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{32}")),
	create_parm ("FDCH_2_MACID","the MAC ID of the second data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("FDCH_2_NumHARQTrans","the number of HARQ transmissions for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_2_HARQInterlace","the number of frames in HARQ interlace structure for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_2_StartingFrame","the starting frame index from which the second data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_2_NumFrames","the number of frames on which the second data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_2_PowerDensity","the power density for the second data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_3_PFIndex","the packet format index for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_3_NodeID","the array of NodeID allocated to the third data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{33}")),
	create_parm ("FDCH_3_MACID","the MAC ID of the third data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("FDCH_3_NumHARQTrans","the number of HARQ transmissions for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_3_HARQInterlace","the number of frames in HARQ interlace structure for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_3_StartingFrame","the starting frame index from which the third data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_3_NumFrames","the number of frames on which the third data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_3_PowerDensity","the power density for the third data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_4_PFIndex","the packet format index for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_4_NodeID","the array of NodeID allocated to the fourth data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{34}")),
	create_parm ("FDCH_4_MACID","the MAC ID of the fourth data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("FDCH_4_NumHARQTrans","the number of HARQ transmissions for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_4_HARQInterlace","the number of frames in HARQ interlace structure for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_4_StartingFrame","the starting frame index from which the fourth data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_4_NumFrames","the number of frames on which the fourth data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_4_PowerDensity","the power density for the fourth data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FCPICH_HoppingMode","the hopping mode for F-CPICH",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fFCPICH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fRandom","Random")),
	create_parm ("FCPICH_PilotSpacing","the subcarrier spacing for common pilots",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("FCPICH_PowerDensity","the power density for F-CPICH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("CodeOffset","code offset between 0 and 2 for Forward Dedicated Pilot Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DPICHFormat","the Forward Dedicated Pilot Channel format for Forward Data Channel",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fDPICHFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fFormat_x5f0","Format_0")),
	create_parm ("EnableFLCS","whether the Forward Link Control Segment is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fEnableFLCSSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fNO","NO")),
	create_parm ("FLCS_NumBlocks","the number of blocks (tiles) allocated for FLCS, only valid when EnableFLCS is YES",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("FLCS_UseDRCH","whether FLCS is on DRCH or on BRCH, only valid when EnableFLCS is YES",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fFLCS_x5fUseDRCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fNO","NO")),
	create_parm ("FLCS_PowerDensity","the power density for FLCS (defined as power(dBm) per modulation symbol), only valid when EnableFLCS is YES",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("FreqSync","frequency sync mode",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fFreqSyncSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fFractional_x5fFreq","Fractional_Freq")),
	create_parm ("IterationNumber","number of iterations for turbo decoder",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("DecoderType","Demapping type",
		PARM_INT,
		"_nUMB_x5fFL_x5fReceiver_fDecoderTypeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fReceiver_fCSI","CSI")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","The maximum delay of multi-path channel",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1e-6")),
	create_parm ("Fmax","The maximum doppler frequency",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")));
library_group("UMB,	Receiver","UMB,	Receiver","UMB_FL_Receiver");
palette_group("UMB,	Receiver","UMB,	Receiver","UMB_FL_Receiver");

create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fSize_x5f4096", 
	"Size 4096",
	0,
	"0",
	"Size 4096");
create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fSize_x5f8192", 
	"Size 8192",
	0,
	"1",
	"Size 8192");
create_form_set("_nUMB_x5fFL_x5fFECDecoder_fMaxPHYSubPacketSizeSet",
	"_nUMB_x5fFL_x5fFECDecoder_fSize_x5f4096",
	"_nUMB_x5fFL_x5fFECDecoder_fSize_x5f8192",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fFL_x5fFECDecoder_fFFTSizeSet",
	"_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f2048",
	"_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f1024",
	"_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f512",
	"_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f256",
	"_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fMode_x5f1", 
	"Mode 1",
	0,
	"0",
	"Mode 1");
create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fMode_x5f2", 
	"Mode 2",
	0,
	"1",
	"Mode 2");
create_form_set("_nUMB_x5fFL_x5fFECDecoder_fRsChMuxModeSet",
	"_nUMB_x5fFL_x5fFECDecoder_fMode_x5f1",
	"_nUMB_x5fFL_x5fFECDecoder_fMode_x5f2",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fSize_x5f64", 
	"Size 64",
	0,
	"0",
	"Size 64");
create_constant_form ("_nUMB_x5fFL_x5fFECDecoder_fSize_x5f128", 
	"Size 128",
	0,
	"1",
	"Size 128");
create_form_set("_nUMB_x5fFL_x5fFECDecoder_fSubzoneSizeSet",
	"_nUMB_x5fFL_x5fFECDecoder_fSize_x5f64",
	"_nUMB_x5fFL_x5fFECDecoder_fSize_x5f128",
	"StdForm");
create_item ("UMB_FL_FECDecoder","forward link FEC decoder",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_FECDecoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_FECDecoder",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_FECDecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("MaxPHYSubPacketSize","the maximum subpacket size (4096 bits or 8192 bits)",
		PARM_INT,
		"_nUMB_x5fFL_x5fFECDecoder_fMaxPHYSubPacketSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fFECDecoder_fSize_x5f8192","Size_8192")),
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fFL_x5fFECDecoder_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fFECDecoder_fFFT_x5f512","FFT_512")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")),
	create_parm ("RsChMuxMode","The mux mode for resource channels",
		PARM_INT,
		"_nUMB_x5fFL_x5fFECDecoder_fRsChMuxModeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fFECDecoder_fMode_x5f2","Mode_2")),
	create_parm ("SubzoneSize","the number of hop-ports in each subzone (64 or 128)",
		PARM_INT,
		"_nUMB_x5fFL_x5fFECDecoder_fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fFECDecoder_fSize_x5f64","Size_64")),
	create_parm ("NumDRCHSubzones","the number of DRCH subzones",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_PFIndex","the packet format index for the data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_NodeID","the array of NodeID allocated to the data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{31}")),
	create_parm ("FDCH_NumFrames","the number of frames on which the data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("IterationNumber","number of iterations for turbo decoder",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")));
library_group("UMB, Channel Coding","UMB, Channel Coding","UMB_FL_FECDecoder");
palette_group("UMB, Channel Coding","UMB, Channel Coding","UMB_FL_FECDecoder");

create_constant_form ("_nUMB_x5fRL_x5fFEC_fSize_x5f4096", 
	"Size 4096",
	0,
	"0",
	"Size 4096");
create_constant_form ("_nUMB_x5fRL_x5fFEC_fSize_x5f8192", 
	"Size 8192",
	0,
	"1",
	"Size 8192");
create_form_set("_nUMB_x5fRL_x5fFEC_fMaxPHYSubPacketSizeSet",
	"_nUMB_x5fRL_x5fFEC_fSize_x5f4096",
	"_nUMB_x5fRL_x5fFEC_fSize_x5f8192",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fFEC_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fRL_x5fFEC_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fRL_x5fFEC_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fRL_x5fFEC_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fRL_x5fFEC_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fRL_x5fFEC_fFFTSizeSet",
	"_nUMB_x5fRL_x5fFEC_fFFT_x5f2048",
	"_nUMB_x5fRL_x5fFEC_fFFT_x5f1024",
	"_nUMB_x5fRL_x5fFEC_fFFT_x5f512",
	"_nUMB_x5fRL_x5fFEC_fFFT_x5f256",
	"_nUMB_x5fRL_x5fFEC_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fFEC_fSize_x5f64", 
	"Size 64",
	0,
	"0",
	"Size 64");
create_constant_form ("_nUMB_x5fRL_x5fFEC_fSize_x5f128", 
	"Size 128",
	0,
	"1",
	"Size 128");
create_form_set("_nUMB_x5fRL_x5fFEC_fSubzoneSizeSet",
	"_nUMB_x5fRL_x5fFEC_fSize_x5f64",
	"_nUMB_x5fRL_x5fFEC_fSize_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fFEC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fFEC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fFEC_fEnableCDMASubsegmentsSet",
	"_nUMB_x5fRL_x5fFEC_fNO",
	"_nUMB_x5fRL_x5fFEC_fYES",
	"StdForm");
create_item ("UMB_RL_FEC","reverse link FEC",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_RL_FEC",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_RL_FEC",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_RL_FEC",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("MaxPHYSubPacketSize","the maximum subpacket size (4096 bits or 8192 bits)",
		PARM_INT,
		"_nUMB_x5fRL_x5fFEC_fMaxPHYSubPacketSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fFEC_fSize_x5f8192","Size_8192")),
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fRL_x5fFEC_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fFEC_fFFT_x5f512","FFT_512")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")),
	create_parm ("SubzoneSize","the number of hop-ports in each subzone (64 or 128)",
		PARM_INT,
		"_nUMB_x5fRL_x5fFEC_fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fFEC_fSize_x5f64","Size_64")),
	create_parm ("EnableCDMASubsegments","whether the allocation of CDMA subsegments is enabled",
		PARM_INT,
		"_nUMB_x5fRL_x5fFEC_fEnableCDMASubsegmentsSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fFEC_fNO","NO")),
	create_parm ("NumCDMASubsegments","number of allocated CDMA subsegments allocated, only valid when EnableCDMASubsegments is YES",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RODCH_PFIndex","the packet format index for R-ODCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RODCH_NodeID","the array of NodeID allocated to R-ODCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{31}")),
	create_parm ("RODCH_NumFrames","the number of PHY frames on which R-ODCH is allocated",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("UMB, Channel Coding","UMB, Channel Coding","UMB_RL_FEC");
palette_group("UMB, Channel Coding","UMB, Channel Coding","UMB_RL_FEC");

create_constant_form ("_nUMB_x5fFL_x5fFEC_fSize_x5f4096", 
	"Size 4096",
	0,
	"0",
	"Size 4096");
create_constant_form ("_nUMB_x5fFL_x5fFEC_fSize_x5f8192", 
	"Size 8192",
	0,
	"1",
	"Size 8192");
create_form_set("_nUMB_x5fFL_x5fFEC_fMaxPHYSubPacketSizeSet",
	"_nUMB_x5fFL_x5fFEC_fSize_x5f4096",
	"_nUMB_x5fFL_x5fFEC_fSize_x5f8192",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fFEC_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fFL_x5fFEC_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fFL_x5fFEC_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fFL_x5fFEC_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fFL_x5fFEC_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fFL_x5fFEC_fFFTSizeSet",
	"_nUMB_x5fFL_x5fFEC_fFFT_x5f2048",
	"_nUMB_x5fFL_x5fFEC_fFFT_x5f1024",
	"_nUMB_x5fFL_x5fFEC_fFFT_x5f512",
	"_nUMB_x5fFL_x5fFEC_fFFT_x5f256",
	"_nUMB_x5fFL_x5fFEC_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fFEC_fMode_x5f1", 
	"Mode 1",
	0,
	"0",
	"Mode 1");
create_constant_form ("_nUMB_x5fFL_x5fFEC_fMode_x5f2", 
	"Mode 2",
	0,
	"1",
	"Mode 2");
create_form_set("_nUMB_x5fFL_x5fFEC_fRsChMuxModeSet",
	"_nUMB_x5fFL_x5fFEC_fMode_x5f1",
	"_nUMB_x5fFL_x5fFEC_fMode_x5f2",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fFEC_fSize_x5f64", 
	"Size 64",
	0,
	"0",
	"Size 64");
create_constant_form ("_nUMB_x5fFL_x5fFEC_fSize_x5f128", 
	"Size 128",
	0,
	"1",
	"Size 128");
create_form_set("_nUMB_x5fFL_x5fFEC_fSubzoneSizeSet",
	"_nUMB_x5fFL_x5fFEC_fSize_x5f64",
	"_nUMB_x5fFL_x5fFEC_fSize_x5f128",
	"StdForm");
create_item ("UMB_FL_FEC","forward link FEC",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_FEC",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_FEC",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_FEC",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("MaxPHYSubPacketSize","the maximum subpacket size (4096 bits or 8192 bits)",
		PARM_INT,
		"_nUMB_x5fFL_x5fFEC_fMaxPHYSubPacketSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fFEC_fSize_x5f8192","Size_8192")),
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fFL_x5fFEC_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fFEC_fFFT_x5f512","FFT_512")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")),
	create_parm ("RsChMuxMode","The mux mode for resource channels",
		PARM_INT,
		"_nUMB_x5fFL_x5fFEC_fRsChMuxModeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fFEC_fMode_x5f2","Mode_2")),
	create_parm ("SubzoneSize","the number of hop-ports in each subzone (64 or 128)",
		PARM_INT,
		"_nUMB_x5fFL_x5fFEC_fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fFEC_fSize_x5f64","Size_64")),
	create_parm ("NumDRCHSubzones","the number of DRCH subzones",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_PFIndex","the packet format index for the data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_NodeID","the array of NodeID allocated to the data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{31}")),
	create_parm ("FDCH_NumFrames","the number of frames on which the data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("UMB, Channel Coding","UMB, Channel Coding","UMB_FL_FEC");
palette_group("UMB, Channel Coding","UMB, Channel Coding","UMB_FL_FEC");

create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fOFDM_x5fDemodulator_fFFTSizeSet",
	"_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f2048",
	"_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f1024",
	"_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f512",
	"_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f256",
	"_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f16", 
	"Ratio 16",
	0,
	"4",
	"Ratio 16");
create_constant_form ("_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f32", 
	"Ratio 32",
	0,
	"5",
	"Ratio 32");
create_form_set("_nUMB_x5fOFDM_x5fDemodulator_fOversamplingOptionSet",
	"_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f1",
	"_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f2",
	"_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f4",
	"_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f8",
	"_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f16",
	"_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f32",
	"StdForm");
create_item ("UMB_OFDM_Demodulator","OFDM demodulator",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_OFDM_Demodulator",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_OFDM_Demodulator",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_OFDM_Demodulator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fOFDM_x5fDemodulator_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fOFDM_x5fDemodulator_fFFT_x5f512","FFT_512")),
	create_parm ("OversamplingOption","Oversampling ratio option",
		PARM_INT,
		"_nUMB_x5fOFDM_x5fDemodulator_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fOFDM_x5fDemodulator_fRatio_x5f2","Ratio_2")));
library_group("UMB, Multiplex","UMB, Multiplex","UMB_OFDM_Demodulator");
palette_group("UMB, Multiplex","UMB, Multiplex","UMB_OFDM_Demodulator");

create_constant_form ("_nUMB_x5fFL_x5fPreamble_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fFL_x5fPreamble_fFFTSizeSet",
	"_nUMB_x5fFL_x5fPreamble_fFFT_x5f2048",
	"_nUMB_x5fFL_x5fPreamble_fFFT_x5f1024",
	"_nUMB_x5fFL_x5fPreamble_fFFT_x5f512",
	"_nUMB_x5fFL_x5fPreamble_fFFT_x5f256",
	"_nUMB_x5fFL_x5fPreamble_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fRatio_x5f16", 
	"Ratio 16",
	0,
	"4",
	"Ratio 16");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fRatio_x5f32", 
	"Ratio 32",
	0,
	"5",
	"Ratio 32");
create_form_set("_nUMB_x5fFL_x5fPreamble_fOversamplingOptionSet",
	"_nUMB_x5fFL_x5fPreamble_fRatio_x5f1",
	"_nUMB_x5fFL_x5fPreamble_fRatio_x5f2",
	"_nUMB_x5fFL_x5fPreamble_fRatio_x5f4",
	"_nUMB_x5fFL_x5fPreamble_fRatio_x5f8",
	"_nUMB_x5fFL_x5fPreamble_fRatio_x5f16",
	"_nUMB_x5fFL_x5fPreamble_fRatio_x5f32",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fNcp_x5f1", 
	"Ncp 1",
	0,
	"0",
	"Ncp 1");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fNcp_x5f2", 
	"Ncp 2",
	0,
	"1",
	"Ncp 2");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fNcp_x5f3", 
	"Ncp 3",
	0,
	"2",
	"Ncp 3");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fNcp_x5f4", 
	"Ncp 4",
	0,
	"3",
	"Ncp 4");
create_form_set("_nUMB_x5fFL_x5fPreamble_fNcpSet",
	"_nUMB_x5fFL_x5fPreamble_fNcp_x5f1",
	"_nUMB_x5fFL_x5fPreamble_fNcp_x5f2",
	"_nUMB_x5fFL_x5fPreamble_fNcp_x5f3",
	"_nUMB_x5fFL_x5fPreamble_fNcp_x5f4",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fPreamble_fSuperframeIdxIncreasedSet",
	"_nUMB_x5fFL_x5fPreamble_fNO",
	"_nUMB_x5fFL_x5fPreamble_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fPreamble_fEnablePreambleFrequencyReuseSet",
	"_nUMB_x5fFL_x5fPreamble_fNO",
	"_nUMB_x5fFL_x5fPreamble_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fPreamble_fEnableExpandedQPCHSet",
	"_nUMB_x5fFL_x5fPreamble_fNO",
	"_nUMB_x5fFL_x5fPreamble_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fPreamble_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fPreamble_fGloballySynchronousSet",
	"_nUMB_x5fFL_x5fPreamble_fNO",
	"_nUMB_x5fFL_x5fPreamble_fYES",
	"StdForm");
create_item ("UMB_FL_Preamble","forward link preamble generator",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_Preamble",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_Preamble",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_Preamble",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fFL_x5fPreamble_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fPreamble_fFFT_x5f512","FFT_512")),
	create_parm ("OversamplingOption","Oversampling ratio option",
		PARM_INT,
		"_nUMB_x5fFL_x5fPreamble_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fPreamble_fRatio_x5f2","Ratio_2")),
	create_parm ("Ncp","the index for Cyclic Prefix (Tcp=Ncp*FFTSize*Tchip/16)",
		PARM_INT,
		"_nUMB_x5fFL_x5fPreamble_fNcpSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fPreamble_fNcp_x5f1","Ncp_1")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")),
	create_parm ("StartingSuperframe","the superframe index for the starting superframe",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SuperframeIdxIncreased","whether the superframe index is increased from superframe to superframe",
		PARM_INT,
		"_nUMB_x5fFL_x5fPreamble_fSuperframeIdxIncreasedSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fPreamble_fYES","YES")),
	create_parm ("EnablePreambleFrequencyReuse","whether Preamble Frequency Reuse is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fPreamble_fEnablePreambleFrequencyReuseSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fPreamble_fNO","NO")),
	create_parm ("EnableExpandedQPCH","whether QPCH is expanded",
		PARM_INT,
		"_nUMB_x5fFL_x5fPreamble_fEnableExpandedQPCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fPreamble_fNO","NO")),
	create_parm ("GloballySynchronous","whether the sector is synchronized with GPS time",
		PARM_INT,
		"_nUMB_x5fFL_x5fPreamble_fGloballySynchronousSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fPreamble_fNO","NO")),
	create_parm ("PilotPN","9-bit pilot PN for different sectors",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("SFNCellID","9-bit SFN cell ID",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","12")),
	create_parm ("K_OSI","the OSIValue from the SFP MAC Protocol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("K_SD","the 9-bit AcqInfo block provided by the SFP MAC Protocol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SBCCHScramblingSeed","F-SBCCH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("QPCHScramblingSeed","F-QPCH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PreambleUnitPower","transmit unit power for these channels in the first five OFDM symbols in units of dBm",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10.0")),
	create_parm ("FACQCH_Power","transmit unit power for F-ACQCH in units of dBm",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10.0")),
	create_parm ("FOSICH_Power","transmit unit power for F-OSICH in units of dBm",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10.0")));
library_group("UMB, Signal Source","UMB, Signal Source","UMB_FL_Preamble");
palette_group("UMB, Signal Source","UMB, Signal Source","UMB_FL_Preamble");

create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fMirrorSpectrumSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFull_x5fSuperframe", 
	"Full Superframe",
	0,
	"0",
	"Full Superframe");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fCompact_x5fSuperframe", 
	"Compact Superframe",
	0,
	"1",
	"Compact Superframe");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fOutputFrameFormatSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFull_x5fSuperframe",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fCompact_x5fSuperframe",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f16", 
	"Ratio 16",
	0,
	"4",
	"Ratio 16");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f32", 
	"Ratio 32",
	0,
	"5",
	"Ratio 32");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fOversamplingOptionSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f1",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f2",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f4",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f8",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f16",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f32",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFTSizeSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f2048",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f1024",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f512",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f256",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcp_x5f1", 
	"Ncp 1",
	0,
	"0",
	"Ncp 1");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcp_x5f2", 
	"Ncp 2",
	0,
	"1",
	"Ncp 2");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcp_x5f3", 
	"Ncp 3",
	0,
	"2",
	"Ncp 3");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcp_x5f4", 
	"Ncp 4",
	0,
	"3",
	"Ncp 4");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcpSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcp_x5f1",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcp_x5f2",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcp_x5f3",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcp_x5f4",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fMode_x5f1", 
	"Mode 1",
	0,
	"0",
	"Mode 1");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fMode_x5f2", 
	"Mode 2",
	0,
	"1",
	"Mode 2");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRsChMuxModeSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fMode_x5f1",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fMode_x5f2",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSize_x5f64", 
	"Size 64",
	0,
	"0",
	"Size 64");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSize_x5f128", 
	"Size 128",
	0,
	"1",
	"Size 128");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSubzoneSizeSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSize_x5f64",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSize_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSize_x5f4096", 
	"Size 4096",
	0,
	"0",
	"Size 4096");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSize_x5f8192", 
	"Size 8192",
	0,
	"1",
	"Size 8192");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fMaxPHYSubPacketSizeSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSize_x5f4096",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSize_x5f8192",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnableBRCHSubzoneCyclingSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnableHalfDuplexOperationSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSuperframeIdxIncreasedSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fGloballySynchronousSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRandom", 
	"Random",
	0,
	"0",
	"Random");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fDeterministic", 
	"Deterministic",
	0,
	"1",
	"Deterministic");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFCPICH_x5fHoppingModeSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRandom",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fDeterministic",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFormat_x5f0", 
	"Format 0",
	0,
	"0",
	"Format 0");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFormat_x5f1", 
	"Format 1",
	0,
	"1",
	"Format 1");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFormat_x5f2", 
	"Format 2",
	0,
	"2",
	"Format 2");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fDPICHFormatSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFormat_x5f0",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFormat_x5f1",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFormat_x5f2",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnableFLCSSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFLCS_x5fUseDRCHSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnablePreambleSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnablePreambleFrequencyReuseSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnableExpandedQPCHSet",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_item ("UMB_FL_SignalSrc_RF","3GPP2 UMB Forward Link RF Signal Source",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_SignalSrc_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_SignalSrc_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_SignalSrc_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RF_Parameters","RF Parameters",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("ROut","Output resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","Temperature, in degrees C",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("MirrorSpectrum","Mirror spectrum about carrier?",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("GainImbalance","Gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","Phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("BasicParameters","Basic Parameters for UMB Forward Link signals",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OutputFrameFormat","output superframe format",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fOutputFrameFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFull_x5fSuperframe","Full_Superframe")),
	create_parm ("StartingFrame","the starting frame index in each superframe from which this model will allocate the data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumFrames","the number of frames on which this model will allocate the data starting from the StartingFrame",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("OversamplingOption","Oversampling ratio option",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFFT_x5f512","FFT_512")),
	create_parm ("Ncp","the index for Cyclic Prefix (Tcp=Ncp*FFTSize*Tchip/16)",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcpSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNcp_x5f1","Ncp_1")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")),
	create_parm ("RsChMuxMode","The mux mode for resource channels",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRsChMuxModeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fMode_x5f2","Mode_2")),
	create_parm ("SubzoneSize","the number of hop-ports in each subzone (64 or 128)",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSize_x5f64","Size_64")),
	create_parm ("NumDRCHSubzones","the number of DRCH subzones",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MaxPHYSubPacketSize","the maximum subpacket size (4096 bits or 8192 bits)",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fMaxPHYSubPacketSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSize_x5f8192","Size_8192")),
	create_parm ("EnableBRCHSubzoneCycling","whether the cycling for BRCH subzones is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnableBRCHSubzoneCyclingSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("EnableHalfDuplexOperation","whether the half duplex operation is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnableHalfDuplexOperationSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("StartingSuperframe","the superframe index for the starting superframe",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SuperframeIdxIncreased","whether the superframe index is increased from superframe to superframe",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fSuperframeIdxIncreasedSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fYES","YES")),
	create_parm ("GloballySynchronous","whether the sector is synchronized with GPS time",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fGloballySynchronousSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("PilotPN","9-bit pilot PN for different sectors",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_Parameters","Parameters for UMB F-DCH",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FDCH_NumPackets","number of data packets transmitted in F-DCH; At most four packets are supported",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_PFIndex","the packet format index for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_NodeID","the array of NodeID allocated to the first data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{31}")),
	create_parm ("FDCH_1_MACID","the MAC ID of the first data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_NumHARQTrans","the number of HARQ transmissions for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_HARQInterlace","the number of frames in HARQ interlace structure for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_1_StartingFrame","the starting frame index from which the first data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_1_NumFrames","the number of frames on which the first data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_1_PowerDensity","the power density for the first data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_2_PFIndex","the packet format index for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_2_NodeID","the array of NodeID allocated to the second data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{32}")),
	create_parm ("FDCH_2_MACID","the MAC ID of the second data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("FDCH_2_NumHARQTrans","the number of HARQ transmissions for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_2_HARQInterlace","the number of frames in HARQ interlace structure for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_2_StartingFrame","the starting frame index from which the second data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_2_NumFrames","the number of frames on which the second data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_2_PowerDensity","the power density for the second data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_3_PFIndex","the packet format index for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_3_NodeID","the array of NodeID allocated to the third data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{33}")),
	create_parm ("FDCH_3_MACID","the MAC ID of the third data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("FDCH_3_NumHARQTrans","the number of HARQ transmissions for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_3_HARQInterlace","the number of frames in HARQ interlace structure for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_3_StartingFrame","the starting frame index from which the third data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_3_NumFrames","the number of frames on which the third data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_3_PowerDensity","the power density for the third data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_4_PFIndex","the packet format index for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_4_NodeID","the array of NodeID allocated to the fourth data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{34}")),
	create_parm ("FDCH_4_MACID","the MAC ID of the fourth data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("FDCH_4_NumHARQTrans","the number of HARQ transmissions for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_4_HARQInterlace","the number of frames in HARQ interlace structure for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_4_StartingFrame","the starting frame index from which the fourth data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_4_NumFrames","the number of frames on which the fourth data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_4_PowerDensity","the power density for the fourth data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FPICH_Parameters","Parameters for Pilot Channels",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FCPICH_HoppingMode","the hopping mode for F-CPICH",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFCPICH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fRandom","Random")),
	create_parm ("FCPICH_PilotSpacing","the subcarrier spacing for common pilots",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("FCPICH_PowerDensity","the power density for F-CPICH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("CodeOffset","code offset between 0 and 2 for Forward Dedicated Pilot Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DPICHFormat","the Forward Dedicated Pilot Channel format for Forward Data Channel",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fDPICHFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFormat_x5f0","Format_0")),
	create_parm ("FLCS_Parameters","Parameters for Forward link Control Segment",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("EnableFLCS","whether the Forward Link Control Segment is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnableFLCSSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("FLCS_NumBlocks","the number of blocks (tiles) allocated for FLCS, only valid when EnableFLCS is YES",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("FLCS_UseDRCH","whether FLCS is on DRCH or on BRCH, only valid when EnableFLCS is YES",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fFLCS_x5fUseDRCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("FLCS_PowerDensity","the power density for FLCS (defined as power(dBm) per modulation symbol), only valid when EnableFLCS is YES",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("PreambleParameters","Preamble Parameters",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("EnablePreamble","whether the Preamble is output",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnablePreambleSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("EnablePreambleFrequencyReuse","whether Preamble Frequency Reuse is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnablePreambleFrequencyReuseSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("EnableExpandedQPCH","whether QPCH is expanded",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_x5fRF_fEnableExpandedQPCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("SFNCellID","9-bit SFN cell ID",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","12")),
	create_parm ("K_OSI","the OSIValue from the SFP MAC Protocol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("K_SD","the 9-bit AcqInfo block provided by the SFP MAC Protocol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SBCCHScramblingSeed","F-SBCCH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("QPCHScramblingSeed","F-QPCH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PreambleUnitPower","transmit unit power for these channels in the first five OFDM symbols in units of dBm",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10.0")),
	create_parm ("FACQCH_Power","transmit unit power for F-ACQCH in units of dBm",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10.0")),
	create_parm ("FOSICH_Power","transmit unit power for F-OSICH in units of dBm",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10.0")));
library_group("UMB,	Signal Source","UMB,	Signal Source","UMB_FL_SignalSrc_RF");
palette_group("UMB,	Signal Source","UMB,	Signal Source","UMB_FL_SignalSrc_RF");

create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fFull_x5fSuperframe", 
	"Full Superframe",
	0,
	"0",
	"Full Superframe");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fCompact_x5fSuperframe", 
	"Compact Superframe",
	0,
	"1",
	"Compact Superframe");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fOutputFrameFormatSet",
	"_nUMB_x5fFL_x5fSignalSrc_fFull_x5fSuperframe",
	"_nUMB_x5fFL_x5fSignalSrc_fCompact_x5fSuperframe",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f16", 
	"Ratio 16",
	0,
	"4",
	"Ratio 16");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f32", 
	"Ratio 32",
	0,
	"5",
	"Ratio 32");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fOversamplingOptionSet",
	"_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f1",
	"_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f2",
	"_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f4",
	"_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f8",
	"_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f16",
	"_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f32",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fFFTSizeSet",
	"_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f2048",
	"_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f1024",
	"_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f512",
	"_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f256",
	"_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNcp_x5f1", 
	"Ncp 1",
	0,
	"0",
	"Ncp 1");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNcp_x5f2", 
	"Ncp 2",
	0,
	"1",
	"Ncp 2");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNcp_x5f3", 
	"Ncp 3",
	0,
	"2",
	"Ncp 3");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNcp_x5f4", 
	"Ncp 4",
	0,
	"3",
	"Ncp 4");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fNcpSet",
	"_nUMB_x5fFL_x5fSignalSrc_fNcp_x5f1",
	"_nUMB_x5fFL_x5fSignalSrc_fNcp_x5f2",
	"_nUMB_x5fFL_x5fSignalSrc_fNcp_x5f3",
	"_nUMB_x5fFL_x5fSignalSrc_fNcp_x5f4",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fMode_x5f1", 
	"Mode 1",
	0,
	"0",
	"Mode 1");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fMode_x5f2", 
	"Mode 2",
	0,
	"1",
	"Mode 2");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fRsChMuxModeSet",
	"_nUMB_x5fFL_x5fSignalSrc_fMode_x5f1",
	"_nUMB_x5fFL_x5fSignalSrc_fMode_x5f2",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fSize_x5f64", 
	"Size 64",
	0,
	"0",
	"Size 64");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fSize_x5f128", 
	"Size 128",
	0,
	"1",
	"Size 128");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fSubzoneSizeSet",
	"_nUMB_x5fFL_x5fSignalSrc_fSize_x5f64",
	"_nUMB_x5fFL_x5fSignalSrc_fSize_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fSize_x5f4096", 
	"Size 4096",
	0,
	"0",
	"Size 4096");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fSize_x5f8192", 
	"Size 8192",
	0,
	"1",
	"Size 8192");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fMaxPHYSubPacketSizeSet",
	"_nUMB_x5fFL_x5fSignalSrc_fSize_x5f4096",
	"_nUMB_x5fFL_x5fSignalSrc_fSize_x5f8192",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fEnableBRCHSubzoneCyclingSet",
	"_nUMB_x5fFL_x5fSignalSrc_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fEnableHalfDuplexOperationSet",
	"_nUMB_x5fFL_x5fSignalSrc_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fSuperframeIdxIncreasedSet",
	"_nUMB_x5fFL_x5fSignalSrc_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fGloballySynchronousSet",
	"_nUMB_x5fFL_x5fSignalSrc_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fRandom", 
	"Random",
	0,
	"0",
	"Random");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fDeterministic", 
	"Deterministic",
	0,
	"1",
	"Deterministic");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fFCPICH_x5fHoppingModeSet",
	"_nUMB_x5fFL_x5fSignalSrc_fRandom",
	"_nUMB_x5fFL_x5fSignalSrc_fDeterministic",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fFormat_x5f0", 
	"Format 0",
	0,
	"0",
	"Format 0");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fFormat_x5f1", 
	"Format 1",
	0,
	"1",
	"Format 1");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fFormat_x5f2", 
	"Format 2",
	0,
	"2",
	"Format 2");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fDPICHFormatSet",
	"_nUMB_x5fFL_x5fSignalSrc_fFormat_x5f0",
	"_nUMB_x5fFL_x5fSignalSrc_fFormat_x5f1",
	"_nUMB_x5fFL_x5fSignalSrc_fFormat_x5f2",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fEnableFLCSSet",
	"_nUMB_x5fFL_x5fSignalSrc_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fFLCS_x5fUseDRCHSet",
	"_nUMB_x5fFL_x5fSignalSrc_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fEnablePreambleSet",
	"_nUMB_x5fFL_x5fSignalSrc_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fEnablePreambleFrequencyReuseSet",
	"_nUMB_x5fFL_x5fSignalSrc_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fFL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fFL_x5fSignalSrc_fEnableExpandedQPCHSet",
	"_nUMB_x5fFL_x5fSignalSrc_fNO",
	"_nUMB_x5fFL_x5fSignalSrc_fYES",
	"StdForm");
create_item ("UMB_FL_SignalSrc","3GPP2 UMB Forward Link Signal Source",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_FL_SignalSrc",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_FL_SignalSrc",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_FL_SignalSrc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("OutputFrameFormat","output superframe format",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fOutputFrameFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fFull_x5fSuperframe","Full_Superframe")),
	create_parm ("StartingFrame","the starting frame index in each superframe from which this model will allocate the data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumFrames","the number of frames on which this model will allocate the data starting from the StartingFrame",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("OversamplingOption","Oversampling ratio option",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fRatio_x5f2","Ratio_2")),
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fFFT_x5f512","FFT_512")),
	create_parm ("Ncp","the index for Cyclic Prefix (Tcp=Ncp*FFTSize*Tchip/16)",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fNcpSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fNcp_x5f1","Ncp_1")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")),
	create_parm ("RsChMuxMode","The mux mode for resource channels",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fRsChMuxModeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fMode_x5f2","Mode_2")),
	create_parm ("SubzoneSize","the number of hop-ports in each subzone (64 or 128)",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fSize_x5f64","Size_64")),
	create_parm ("NumDRCHSubzones","the number of DRCH subzones",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MaxPHYSubPacketSize","the maximum subpacket size (4096 bits or 8192 bits)",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fMaxPHYSubPacketSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fSize_x5f8192","Size_8192")),
	create_parm ("EnableBRCHSubzoneCycling","whether the cycling for BRCH subzones is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fEnableBRCHSubzoneCyclingSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fNO","NO")),
	create_parm ("EnableHalfDuplexOperation","whether the half duplex operation is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fEnableHalfDuplexOperationSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fNO","NO")),
	create_parm ("StartingSuperframe","the superframe index for the starting superframe",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SuperframeIdxIncreased","whether the superframe index is increased from superframe to superframe",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fSuperframeIdxIncreasedSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fYES","YES")),
	create_parm ("GloballySynchronous","whether the sector is synchronized with GPS time",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fGloballySynchronousSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fNO","NO")),
	create_parm ("PilotPN","9-bit pilot PN for different sectors",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_NumPackets","number of data packets transmitted in F-DCH; At most four packets are supported",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_PFIndex","the packet format index for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_NodeID","the array of NodeID allocated to the first data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{31}")),
	create_parm ("FDCH_1_MACID","the MAC ID of the first data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_NumHARQTrans","the number of HARQ transmissions for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_1_HARQInterlace","the number of frames in HARQ interlace structure for the first data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_1_StartingFrame","the starting frame index from which the first data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_1_NumFrames","the number of frames on which the first data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_1_PowerDensity","the power density for the first data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_2_PFIndex","the packet format index for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_2_NodeID","the array of NodeID allocated to the second data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{32}")),
	create_parm ("FDCH_2_MACID","the MAC ID of the second data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("FDCH_2_NumHARQTrans","the number of HARQ transmissions for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_2_HARQInterlace","the number of frames in HARQ interlace structure for the second data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_2_StartingFrame","the starting frame index from which the second data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_2_NumFrames","the number of frames on which the second data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_2_PowerDensity","the power density for the second data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_3_PFIndex","the packet format index for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_3_NodeID","the array of NodeID allocated to the third data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{33}")),
	create_parm ("FDCH_3_MACID","the MAC ID of the third data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("FDCH_3_NumHARQTrans","the number of HARQ transmissions for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_3_HARQInterlace","the number of frames in HARQ interlace structure for the third data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_3_StartingFrame","the starting frame index from which the third data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_3_NumFrames","the number of frames on which the third data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_3_PowerDensity","the power density for the third data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FDCH_4_PFIndex","the packet format index for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_4_NodeID","the array of NodeID allocated to the fourth data packet transmitted in F-DCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{34}")),
	create_parm ("FDCH_4_MACID","the MAC ID of the fourth data packet (Access Terminal) transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("FDCH_4_NumHARQTrans","the number of HARQ transmissions for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FDCH_4_HARQInterlace","the number of frames in HARQ interlace structure for the fourth data packet transmitted in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("FDCH_4_StartingFrame","the starting frame index from which the fourth data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FDCH_4_NumFrames","the number of frames on which the fourth data packet is allocated in F-DCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("FDCH_4_PowerDensity","the power density for the fourth data packet transmitted in F-DCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("FCPICH_HoppingMode","the hopping mode for F-CPICH",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fFCPICH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fRandom","Random")),
	create_parm ("FCPICH_PilotSpacing","the subcarrier spacing for common pilots",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("FCPICH_PowerDensity","the power density for F-CPICH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("CodeOffset","code offset between 0 and 2 for Forward Dedicated Pilot Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DPICHFormat","the Forward Dedicated Pilot Channel format for Forward Data Channel",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fDPICHFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fFormat_x5f0","Format_0")),
	create_parm ("EnableFLCS","whether the Forward Link Control Segment is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fEnableFLCSSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fNO","NO")),
	create_parm ("FLCS_NumBlocks","the number of blocks (tiles) allocated for FLCS, only valid when EnableFLCS is YES",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("FLCS_UseDRCH","whether FLCS is on DRCH or on BRCH, only valid when EnableFLCS is YES",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fFLCS_x5fUseDRCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fNO","NO")),
	create_parm ("FLCS_PowerDensity","the power density for FLCS (defined as power(dBm) per modulation symbol), only valid when EnableFLCS is YES",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("EnablePreamble","whether the Preamble is output",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fEnablePreambleSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fNO","NO")),
	create_parm ("EnablePreambleFrequencyReuse","whether Preamble Frequency Reuse is enabled",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fEnablePreambleFrequencyReuseSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fNO","NO")),
	create_parm ("EnableExpandedQPCH","whether QPCH is expanded",
		PARM_INT,
		"_nUMB_x5fFL_x5fSignalSrc_fEnableExpandedQPCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fFL_x5fSignalSrc_fNO","NO")),
	create_parm ("SFNCellID","9-bit SFN cell ID",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","12")),
	create_parm ("K_OSI","the OSIValue from the SFP MAC Protocol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("K_SD","the 9-bit AcqInfo block provided by the SFP MAC Protocol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SBCCHScramblingSeed","F-SBCCH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("QPCHScramblingSeed","F-QPCH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PreambleUnitPower","transmit unit power for these channels in the first five OFDM symbols in units of dBm",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10.0")),
	create_parm ("FACQCH_Power","transmit unit power for F-ACQCH in units of dBm",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10.0")),
	create_parm ("FOSICH_Power","transmit unit power for F-OSICH in units of dBm",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10.0")));
library_group("UMB,	Signal Source","UMB,	Signal Source","UMB_FL_SignalSrc");
palette_group("UMB,	Signal Source","UMB,	Signal Source","UMB_FL_SignalSrc");

create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fMirrorSpectrumSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFull_x5fSuperframe", 
	"Full Superframe",
	0,
	"0",
	"Full Superframe");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fCompact_x5fSuperframe", 
	"Compact Superframe",
	0,
	"1",
	"Compact Superframe");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fOutputFrameFormatSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFull_x5fSuperframe",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fCompact_x5fSuperframe",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f16", 
	"Ratio 16",
	0,
	"4",
	"Ratio 16");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f32", 
	"Ratio 32",
	0,
	"5",
	"Ratio 32");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fOversamplingOptionSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f1",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f2",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f4",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f8",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f16",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f32",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFTSizeSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f2048",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f1024",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f512",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f256",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcp_x5f1", 
	"Ncp 1",
	0,
	"0",
	"Ncp 1");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcp_x5f2", 
	"Ncp 2",
	0,
	"1",
	"Ncp 2");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcp_x5f3", 
	"Ncp 3",
	0,
	"2",
	"Ncp 3");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcp_x5f4", 
	"Ncp 4",
	0,
	"3",
	"Ncp 4");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcpSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcp_x5f1",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcp_x5f2",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcp_x5f3",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcp_x5f4",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSize_x5f64", 
	"Size 64",
	0,
	"0",
	"Size 64");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSize_x5f128", 
	"Size 128",
	0,
	"1",
	"Size 128");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSubzoneSizeSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSize_x5f64",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSize_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSize_x5f4096", 
	"Size 4096",
	0,
	"0",
	"Size 4096");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSize_x5f8192", 
	"Size 8192",
	0,
	"1",
	"Size 8192");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fMaxPHYSubPacketSizeSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSize_x5f4096",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSize_x5f8192",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableHalfDuplexOperationSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSuperframeIdxIncreasedSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fGloballySynchronousSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFL_x5fSize_x5f64", 
	"FL Size 64",
	0,
	"0",
	"FL Size 64");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFL_x5fSize_x5f128", 
	"FL Size 128",
	0,
	"1",
	"FL Size 128");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFL_x5fSubzoneSizeSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFL_x5fSize_x5f64",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFL_x5fSize_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFormat_x5f0", 
	"Format 0",
	0,
	"0",
	"Format 0");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFormat_x5f1", 
	"Format 1",
	0,
	"1",
	"Format 1");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fDPICHFormatSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFormat_x5f0",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFormat_x5f1",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRODCCHSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableCDMASubsegmentsSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRPICHSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRAuxPICHSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRACHSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRCDCCHSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRCDCHSet",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES",
	"StdForm");
create_item ("UMB_RL_SignalSrc_RF","3GPP2 UMB Reverse Link RF Signal Source",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_RL_SignalSrc_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_RL_SignalSrc_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_RL_SignalSrc_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RF_Parameters","RF Parameters",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("ROut","Output resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","Temperature, in degrees C",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("MirrorSpectrum","Mirror spectrum about carrier?",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("GainImbalance","Gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","Phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("BasicParameters","Basic Parameters for UMB Reverse Link signals",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OutputFrameFormat","output superframe format",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fOutputFrameFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFull_x5fSuperframe","Full_Superframe")),
	create_parm ("StartingFrame","the starting frame index in each superframe from which this model will allocate the data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumFrames","the number of frames on which this model will allocate the data starting from the StartingFrame",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("OversamplingOption","Oversampling ratio option",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFFT_x5f512","FFT_512")),
	create_parm ("Ncp","the index for Cyclic Prefix (Tcp=Ncp*FFTSize*Tchip/16)",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcpSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNcp_x5f1","Ncp_1")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")),
	create_parm ("SubzoneSize","the number of hop-ports in each subzone (64 or 128)",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSize_x5f64","Size_64")),
	create_parm ("MaxPHYSubPacketSize","the maximum subpacket size (4096 bits or 8192 bits)",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fMaxPHYSubPacketSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSize_x5f8192","Size_8192")),
	create_parm ("EnableHalfDuplexOperation","whether the half duplex operation is enabled",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableHalfDuplexOperationSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("StartingSuperframe","the superframe index for the starting superframe",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SuperframeIdxIncreased","whether the superframe index is increased from superframe to superframe",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fSuperframeIdxIncreasedSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES","YES")),
	create_parm ("GloballySynchronous","whether the sector is synchronized with GPS time",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fGloballySynchronousSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("PilotPN","9-bit pilot PN for different sectors",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FL_SubzoneSize","the number of hop-ports in a FL subzone for determining hopping structures in RL PHY Frames",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFL_x5fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFL_x5fSize_x5f64","FL_Size_64")),
	create_parm ("NumDRCHSubzones","the number of DRCH subzones in FL for determining hopping structures in RL PHY Frames",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("RODCH_Parameters","Parameters for UMB R-ODCH",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RODCH_PFIndex","the packet format index for R-ODCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RODCH_NodeID","the array of NodeID allocated to R-ODCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{31}")),
	create_parm ("RODCH_MACID","the MAC ID of the Access Terminal as associated with the RLSS",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RODCH_NumHARQTrans","the number of HARQ transmissions for the R-ODCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RODCH_HARQInterlace","the number of PHY frames in HARQ interlace structure for the R-ODCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("RODCH_StartingFrame","the starting frame index from which R-ODCH is allocated",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RODCH_NumFrames","the number of frames on which R-ODCH is allocated starting from the RODCH_StartingFrame",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("RODCH_PowerDensity","the power density for R-ODCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("CodeOffset","code offset between 0 and 2 for Reverse Dedicated Pilot Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DPICHFormat","the Reverse Dedicated Pilot Channel format for OFDMA Data Channels",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fDPICHFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fFormat_x5f0","Format_0")),
	create_parm ("RODCCH_Parameters","Parameters for UMB R-ODCCH",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("EnableRODCCH","whether the allocation of R-ODCCH is enabled",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRODCCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("NumRODCIndices","the number of Indices for R-ODCCH (the number of tiles for R-ODCCH is max(2,system.NumRODCIndices/2",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("RODCResourceIndex","the resource index for each R-ODCCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RODCCH_PowerDensity","the power density for R-ODCCH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("CDMASubsegmentParameters","Parameters for UMB RL CDMA subsegments",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("EnableCDMASubsegments","whether the allocation of CDMA subsegments is enabled",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableCDMASubsegmentsSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("NumCDMASubsegments","number of allocated CDMA subsegments allocated, only valid when EnableCDMASubsegments is YES",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("EnableRPICH","whether R-PICH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRPICHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("RPICH_PowerDensity","the power density for R-PICH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("EnableRAuxPICH","whether R-AuxPICH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRAuxPICHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("RAuxPICH_PowerDensity","the power density for R-AuxPICH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("EnableRACH","whether R-ACH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRACHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("RACH_PowerDensity","the power density for R-ACH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("EnableRCDCCH","whether R-CDCCH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRCDCCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fNO","NO")),
	create_parm ("RCDCCH_PowerDensity","the power density for R-CDCCH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("EnableRCDCH","whether R-CDCH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_x5fRF_fEnableRCDCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_x5fRF_fYES","YES")),
	create_parm ("RCDCH_PacketSize","the number of packet bits in R-CDCH excluding CRC bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","136")),
	create_parm ("RCDCH_PowerDensity","the power density for R-CDCH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("MACID","the MAC ID of the terminal in the target sector",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SHOGID","the SHOG ID for R-CDCCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RPICHScramblingSeed_MSB","the 17-bit MSBs of 49-bit R-PICH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RPICHScramblingSeed_LSB","the 32-bit LSBs of 49-bit R-PICH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("AccessScramblingID","the AccessScrambling ID for R-ACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("RCDCH_PFID","the packet format index used for the transmission of the Reverse CDMA Data Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RCDCH_HARQIndex","the HARQ transmission index for the Reverse CDMA Data Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RACH_WalshSequenceID","the WalshSequence ID for R-ACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("RCDCCH_WalshSequenceID","the WalshSequence ID for R-CDCCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("UMB,	Signal Source","UMB,	Signal Source","UMB_RL_SignalSrc_RF");
palette_group("UMB,	Signal Source","UMB,	Signal Source","UMB_RL_SignalSrc_RF");

create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fFull_x5fSuperframe", 
	"Full Superframe",
	0,
	"0",
	"Full Superframe");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fCompact_x5fSuperframe", 
	"Compact Superframe",
	0,
	"1",
	"Compact Superframe");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fOutputFrameFormatSet",
	"_nUMB_x5fRL_x5fSignalSrc_fFull_x5fSuperframe",
	"_nUMB_x5fRL_x5fSignalSrc_fCompact_x5fSuperframe",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f16", 
	"Ratio 16",
	0,
	"4",
	"Ratio 16");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f32", 
	"Ratio 32",
	0,
	"5",
	"Ratio 32");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fOversamplingOptionSet",
	"_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f1",
	"_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f2",
	"_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f4",
	"_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f8",
	"_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f16",
	"_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f32",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fFFTSizeSet",
	"_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f2048",
	"_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f1024",
	"_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f512",
	"_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f256",
	"_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNcp_x5f1", 
	"Ncp 1",
	0,
	"0",
	"Ncp 1");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNcp_x5f2", 
	"Ncp 2",
	0,
	"1",
	"Ncp 2");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNcp_x5f3", 
	"Ncp 3",
	0,
	"2",
	"Ncp 3");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNcp_x5f4", 
	"Ncp 4",
	0,
	"3",
	"Ncp 4");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fNcpSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNcp_x5f1",
	"_nUMB_x5fRL_x5fSignalSrc_fNcp_x5f2",
	"_nUMB_x5fRL_x5fSignalSrc_fNcp_x5f3",
	"_nUMB_x5fRL_x5fSignalSrc_fNcp_x5f4",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fSize_x5f64", 
	"Size 64",
	0,
	"0",
	"Size 64");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fSize_x5f128", 
	"Size 128",
	0,
	"1",
	"Size 128");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fSubzoneSizeSet",
	"_nUMB_x5fRL_x5fSignalSrc_fSize_x5f64",
	"_nUMB_x5fRL_x5fSignalSrc_fSize_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fSize_x5f4096", 
	"Size 4096",
	0,
	"0",
	"Size 4096");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fSize_x5f8192", 
	"Size 8192",
	0,
	"1",
	"Size 8192");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fMaxPHYSubPacketSizeSet",
	"_nUMB_x5fRL_x5fSignalSrc_fSize_x5f4096",
	"_nUMB_x5fRL_x5fSignalSrc_fSize_x5f8192",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fEnableHalfDuplexOperationSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fSuperframeIdxIncreasedSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fGloballySynchronousSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fFL_x5fSize_x5f64", 
	"FL Size 64",
	0,
	"0",
	"FL Size 64");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fFL_x5fSize_x5f128", 
	"FL Size 128",
	0,
	"1",
	"FL Size 128");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fFL_x5fSubzoneSizeSet",
	"_nUMB_x5fRL_x5fSignalSrc_fFL_x5fSize_x5f64",
	"_nUMB_x5fRL_x5fSignalSrc_fFL_x5fSize_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fFormat_x5f0", 
	"Format 0",
	0,
	"0",
	"Format 0");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fFormat_x5f1", 
	"Format 1",
	0,
	"1",
	"Format 1");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fDPICHFormatSet",
	"_nUMB_x5fRL_x5fSignalSrc_fFormat_x5f0",
	"_nUMB_x5fRL_x5fSignalSrc_fFormat_x5f1",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fEnableRODCCHSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fEnableCDMASubsegmentsSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fEnableRPICHSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fEnableRAuxPICHSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fEnableRACHSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fEnableRCDCCHSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fSignalSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fSignalSrc_fEnableRCDCHSet",
	"_nUMB_x5fRL_x5fSignalSrc_fNO",
	"_nUMB_x5fRL_x5fSignalSrc_fYES",
	"StdForm");
create_item ("UMB_RL_SignalSrc","3GPP2 UMB Reverse Link Signal Source",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_RL_SignalSrc",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_RL_SignalSrc",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_RL_SignalSrc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("OutputFrameFormat","output superframe format",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fOutputFrameFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fFull_x5fSuperframe","Full_Superframe")),
	create_parm ("StartingFrame","the starting frame index in each superframe from which this model will allocate the data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumFrames","the number of frames on which this model will allocate the data starting from the StartingFrame",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("OversamplingOption","Oversampling ratio option",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fRatio_x5f2","Ratio_2")),
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fFFT_x5f512","FFT_512")),
	create_parm ("Ncp","the index for Cyclic Prefix (Tcp=Ncp*FFTSize*Tchip/16)",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fNcpSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fNcp_x5f1","Ncp_1")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")),
	create_parm ("SubzoneSize","the number of hop-ports in each subzone (64 or 128)",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fSize_x5f64","Size_64")),
	create_parm ("MaxPHYSubPacketSize","the maximum subpacket size (4096 bits or 8192 bits)",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fMaxPHYSubPacketSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fSize_x5f8192","Size_8192")),
	create_parm ("EnableHalfDuplexOperation","whether the half duplex operation is enabled",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fEnableHalfDuplexOperationSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fNO","NO")),
	create_parm ("StartingSuperframe","the superframe index for the starting superframe",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SuperframeIdxIncreased","whether the superframe index is increased from superframe to superframe",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fSuperframeIdxIncreasedSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fYES","YES")),
	create_parm ("GloballySynchronous","whether the sector is synchronized with GPS time",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fGloballySynchronousSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fNO","NO")),
	create_parm ("PilotPN","9-bit pilot PN for different sectors",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FL_SubzoneSize","the number of hop-ports in a FL subzone for determining hopping structures in RL PHY Frames",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fFL_x5fSubzoneSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fFL_x5fSize_x5f64","FL_Size_64")),
	create_parm ("NumDRCHSubzones","the number of DRCH subzones in FL for determining hopping structures in RL PHY Frames",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("RODCH_PFIndex","the packet format index for R-ODCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RODCH_NodeID","the array of NodeID allocated to R-ODCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{31}")),
	create_parm ("RODCH_MACID","the MAC ID of the Access Terminal as associated with the RLSS",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RODCH_NumHARQTrans","the number of HARQ transmissions for the R-ODCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RODCH_HARQInterlace","the number of PHY frames in HARQ interlace structure for the R-ODCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("RODCH_StartingFrame","the starting frame index from which R-ODCH is allocated",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RODCH_NumFrames","the number of frames on which R-ODCH is allocated starting from the RODCH_StartingFrame",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("RODCH_PowerDensity","the power density for R-ODCH (defined as power(dBm) per modulation symbol)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-16.0}")),
	create_parm ("CodeOffset","code offset between 0 and 2 for Reverse Dedicated Pilot Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DPICHFormat","the Reverse Dedicated Pilot Channel format for OFDMA Data Channels",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fDPICHFormatSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fFormat_x5f0","Format_0")),
	create_parm ("EnableRODCCH","whether the allocation of R-ODCCH is enabled",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fEnableRODCCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fNO","NO")),
	create_parm ("NumRODCIndices","the number of Indices for R-ODCCH (the number of tiles for R-ODCCH is max(2,system.NumRODCIndices/2",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("RODCResourceIndex","the resource index for each R-ODCCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RODCCH_PowerDensity","the power density for R-ODCCH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("EnableCDMASubsegments","whether the allocation of CDMA subsegments is enabled",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fEnableCDMASubsegmentsSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fNO","NO")),
	create_parm ("NumCDMASubsegments","number of allocated CDMA subsegments allocated, only valid when EnableCDMASubsegments is YES",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("EnableRPICH","whether R-PICH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fEnableRPICHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fNO","NO")),
	create_parm ("RPICH_PowerDensity","the power density for R-PICH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("EnableRAuxPICH","whether R-AuxPICH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fEnableRAuxPICHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fNO","NO")),
	create_parm ("RAuxPICH_PowerDensity","the power density for R-AuxPICH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("EnableRACH","whether R-ACH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fEnableRACHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fNO","NO")),
	create_parm ("RACH_PowerDensity","the power density for R-ACH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("EnableRCDCCH","whether R-CDCCH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fEnableRCDCCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fNO","NO")),
	create_parm ("RCDCCH_PowerDensity","the power density for R-CDCCH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("EnableRCDCH","whether R-CDCH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fSignalSrc_fEnableRCDCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fSignalSrc_fYES","YES")),
	create_parm ("RCDCH_PacketSize","the number of packet bits in R-CDCH excluding CRC bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","136")),
	create_parm ("RCDCH_PowerDensity","the power density for R-CDCH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16")),
	create_parm ("MACID","the MAC ID of the terminal in the target sector",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SHOGID","the SHOG ID for R-CDCCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RPICHScramblingSeed_MSB","the 17-bit MSBs of 49-bit R-PICH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RPICHScramblingSeed_LSB","the 32-bit LSBs of 49-bit R-PICH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("AccessScramblingID","the AccessScrambling ID for R-ACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("RCDCH_PFID","the packet format index used for the transmission of the Reverse CDMA Data Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RCDCH_HARQIndex","the HARQ transmission index for the Reverse CDMA Data Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RACH_WalshSequenceID","the WalshSequence ID for R-ACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("RCDCCH_WalshSequenceID","the WalshSequence ID for R-CDCCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("UMB,	Signal Source","UMB,	Signal Source","UMB_RL_SignalSrc");
palette_group("UMB,	Signal Source","UMB,	Signal Source","UMB_RL_SignalSrc");

create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fFFT_x5f2048", 
	"FFT 2048",
	0,
	"0",
	"FFT 2048");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fFFT_x5f1024", 
	"FFT 1024",
	0,
	"1",
	"FFT 1024");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fFFT_x5f512", 
	"FFT 512",
	0,
	"2",
	"FFT 512");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fFFT_x5f256", 
	"FFT 256",
	0,
	"3",
	"FFT 256");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fFFT_x5f128", 
	"FFT 128",
	0,
	"4",
	"FFT 128");
create_form_set("_nUMB_x5fOFDM_x5fModulator_fFFTSizeSet",
	"_nUMB_x5fOFDM_x5fModulator_fFFT_x5f2048",
	"_nUMB_x5fOFDM_x5fModulator_fFFT_x5f1024",
	"_nUMB_x5fOFDM_x5fModulator_fFFT_x5f512",
	"_nUMB_x5fOFDM_x5fModulator_fFFT_x5f256",
	"_nUMB_x5fOFDM_x5fModulator_fFFT_x5f128",
	"StdForm");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fRatio_x5f16", 
	"Ratio 16",
	0,
	"4",
	"Ratio 16");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fRatio_x5f32", 
	"Ratio 32",
	0,
	"5",
	"Ratio 32");
create_form_set("_nUMB_x5fOFDM_x5fModulator_fOversamplingOptionSet",
	"_nUMB_x5fOFDM_x5fModulator_fRatio_x5f1",
	"_nUMB_x5fOFDM_x5fModulator_fRatio_x5f2",
	"_nUMB_x5fOFDM_x5fModulator_fRatio_x5f4",
	"_nUMB_x5fOFDM_x5fModulator_fRatio_x5f8",
	"_nUMB_x5fOFDM_x5fModulator_fRatio_x5f16",
	"_nUMB_x5fOFDM_x5fModulator_fRatio_x5f32",
	"StdForm");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fNcp_x5f1", 
	"Ncp 1",
	0,
	"0",
	"Ncp 1");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fNcp_x5f2", 
	"Ncp 2",
	0,
	"1",
	"Ncp 2");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fNcp_x5f3", 
	"Ncp 3",
	0,
	"2",
	"Ncp 3");
create_constant_form ("_nUMB_x5fOFDM_x5fModulator_fNcp_x5f4", 
	"Ncp 4",
	0,
	"3",
	"Ncp 4");
create_form_set("_nUMB_x5fOFDM_x5fModulator_fNcpSet",
	"_nUMB_x5fOFDM_x5fModulator_fNcp_x5f1",
	"_nUMB_x5fOFDM_x5fModulator_fNcp_x5f2",
	"_nUMB_x5fOFDM_x5fModulator_fNcp_x5f3",
	"_nUMB_x5fOFDM_x5fModulator_fNcp_x5f4",
	"StdForm");
create_item ("UMB_OFDM_Modulator","OFDM modulator",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_OFDM_Modulator",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_OFDM_Modulator",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_OFDM_Modulator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FFTSize","the size of total subcarriers for FFT operation",
		PARM_INT,
		"_nUMB_x5fOFDM_x5fModulator_fFFTSizeSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fOFDM_x5fModulator_fFFT_x5f512","FFT_512")),
	create_parm ("OversamplingOption","Oversampling ratio option",
		PARM_INT,
		"_nUMB_x5fOFDM_x5fModulator_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fOFDM_x5fModulator_fRatio_x5f2","Ratio_2")),
	create_parm ("Ncp","the index for Cyclic Prefix (Tcp=Ncp*FFTSize*Tchip/16)",
		PARM_INT,
		"_nUMB_x5fOFDM_x5fModulator_fNcpSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fOFDM_x5fModulator_fNcp_x5f1","Ncp_1")),
	create_parm ("GuardSize","the size of guard subcarriers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","32")));
library_group("UMB, Multiplex","UMB, Multiplex","UMB_OFDM_Modulator");
palette_group("UMB, Multiplex","UMB, Multiplex","UMB_OFDM_Modulator");

create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fCDMASubsegment_fEnableRPICHSet",
	"_nUMB_x5fRL_x5fCDMASubsegment_fNO",
	"_nUMB_x5fRL_x5fCDMASubsegment_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fCDMASubsegment_fEnableRAuxPICHSet",
	"_nUMB_x5fRL_x5fCDMASubsegment_fNO",
	"_nUMB_x5fRL_x5fCDMASubsegment_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fCDMASubsegment_fEnableRACHSet",
	"_nUMB_x5fRL_x5fCDMASubsegment_fNO",
	"_nUMB_x5fRL_x5fCDMASubsegment_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fCDMASubsegment_fEnableRCDCCHSet",
	"_nUMB_x5fRL_x5fCDMASubsegment_fNO",
	"_nUMB_x5fRL_x5fCDMASubsegment_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fCDMASubsegment_fEnableRCDCHSet",
	"_nUMB_x5fRL_x5fCDMASubsegment_fNO",
	"_nUMB_x5fRL_x5fCDMASubsegment_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fCDMASubsegment_fSuperframeIdxIncreasedSet",
	"_nUMB_x5fRL_x5fCDMASubsegment_fNO",
	"_nUMB_x5fRL_x5fCDMASubsegment_fYES",
	"StdForm");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUMB_x5fRL_x5fCDMASubsegment_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUMB_x5fRL_x5fCDMASubsegment_fGloballySynchronousSet",
	"_nUMB_x5fRL_x5fCDMASubsegment_fNO",
	"_nUMB_x5fRL_x5fCDMASubsegment_fYES",
	"StdForm");
create_item ("UMB_RL_CDMASubsegment","reverse link CDMA subsegment generator",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UMB_RL_CDMASubsegment",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UMB_RL_CDMASubsegment",
	SPDesignAnnotFmt,
	"SYM_DSN_UMB_RL_CDMASubsegment",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("StartingFrame","the starting frame index in each superframe from which this model will allocate the data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumFrames","the number of frames on which this model will allocate the data starting from the StartingFrame",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","25")),
	create_parm ("EnableRPICH","whether R-PICH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fCDMASubsegment_fEnableRPICHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fCDMASubsegment_fNO","NO")),
	create_parm ("RPICH_PowerDensity","the power density for R-PICH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("EnableRAuxPICH","whether R-AuxPICH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fCDMASubsegment_fEnableRAuxPICHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fCDMASubsegment_fNO","NO")),
	create_parm ("RAuxPICH_PowerDensity","the power density for R-AuxPICH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("EnableRACH","whether R-ACH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fCDMASubsegment_fEnableRACHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fCDMASubsegment_fNO","NO")),
	create_parm ("RACH_PowerDensity","the power density for R-ACH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("EnableRCDCCH","whether R-CDCCH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fCDMASubsegment_fEnableRCDCCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fCDMASubsegment_fNO","NO")),
	create_parm ("RCDCCH_PowerDensity","the power density for R-CDCCH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("EnableRCDCH","whether R-CDCH is enabled in this CDMA subsegment",
		PARM_INT,
		"_nUMB_x5fRL_x5fCDMASubsegment_fEnableRCDCHSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fCDMASubsegment_fYES","YES")),
	create_parm ("RCDCH_PacketSize","the number of packet bits in R-CDCH excluding CRC bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","136")),
	create_parm ("RCDCH_PowerDensity","the power density for R-CDCH (defined as power(dBm) per modulation symbol)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-16.0")),
	create_parm ("StartingSuperframe","the superframe index for the starting superframe",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SuperframeIdxIncreased","whether the superframe index is increased from superframe to superframe",
		PARM_INT,
		"_nUMB_x5fRL_x5fCDMASubsegment_fSuperframeIdxIncreasedSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fCDMASubsegment_fYES","YES")),
	create_parm ("GloballySynchronous","whether the sector is synchronized with GPS time",
		PARM_INT,
		"_nUMB_x5fRL_x5fCDMASubsegment_fGloballySynchronousSet",
		UNITLESS_UNIT,
		prm("_nUMB_x5fRL_x5fCDMASubsegment_fNO","NO")),
	create_parm ("PilotPN","9-bit pilot PN for different sectors",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MACID","the MAC ID of the terminal in the target sector",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SHOGID","the SHOG ID for R-CDCCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RPICHScramblingSeed_MSB","the 17-bit MSBs of 49-bit R-PICH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RPICHScramblingSeed_LSB","the 32-bit LSBs of 49-bit R-PICH Scrambling Seed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("AccessScramblingID","the AccessScrambling ID for R-ACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("RCDCH_PFID","the packet format index used for the transmission of the Reverse CDMA Data Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RCDCH_HARQIndex","the HARQ transmission index for the Reverse CDMA Data Channel",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RACH_WalshSequenceID","the WalshSequence ID for R-ACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("RCDCCH_WalshSequenceID","the WalshSequence ID for R-CDCCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("UMB, Signal Source","UMB, Signal Source","UMB_RL_CDMASubsegment");
palette_group("UMB, Signal Source","UMB, Signal Source","UMB_RL_CDMASubsegment");

