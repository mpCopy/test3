set_design_type( sigproc_net );
create_constant_form ("_n_x5fAtoD_fClocked", 
	"Clocked",
	0,
	"0",
	"Clocked");
create_constant_form ("_n_x5fAtoD_fDownsampled", 
	"Downsampled",
	0,
	"1",
	"Downsampled");
create_form_set("_n_x5fAtoD_fConversionTypeSet",
	"_n_x5fAtoD_fClocked",
	"_n_x5fAtoD_fDownsampled",
	"StdForm");
create_constant_form ("_n_x5fAtoD_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");
create_constant_form ("_n_x5fAtoD_fON", 
	"ON",
	0,
	"1",
	"ON");
create_form_set("_n_x5fAtoD_fAntiAliasingFilterSet",
	"_n_x5fAtoD_fOFF",
	"_n_x5fAtoD_fON",
	"StdForm");
create_constant_form ("_n_x5fAtoD_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fAtoD_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fAtoD_fEnableJitterSet",
	"_n_x5fAtoD_fNO",
	"_n_x5fAtoD_fYES",
	"StdForm");
create_constant_form ("_n_x5fAtoD_fOffset_x5fbinary", 
	"Offset binary",
	0,
	"0",
	"Offset binary");
create_constant_form ("_n_x5fAtoD_fTwos_x5fcomplement", 
	"Twos-complement",
	0,
	"1",
	"Twos-complement");
create_form_set("_n_x5fAtoD_fOutputDigitalFormatSet",
	"_n_x5fAtoD_fOffset_x5fbinary",
	"_n_x5fAtoD_fTwos_x5fcomplement",
	"StdForm");
create_item ("_AtoD","Analog to Digital Converter with Integral and Differential Nonlinearities",
	"A",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_AtoD",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fAtoD_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_AtoD",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("NBits","Number of bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("VRef","Reference voltage, -VRef<=input<=VRef",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("INL","Integral nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DNL","Differential nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("ConversionType","Type of input conversion",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fAtoD_fConversionTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fAtoD_fDownsampled","Downsampled")),
	create_parm ("Clock","Internal cosine clock frequency (used when ConversionType=Clocked)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.2e6")),
	create_parm ("Phase","Internal clock phase (used when ConversionType=Clocked)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DownsampleFactor","Downsampling ratio (used when ConversionType=Downsampled)",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("DownsamplePhase","Downsampling phase (used when ConversionType=Downsampled)",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("AntiAliasingFilter","Turn off/on anti-aliasing filter before downsampling (used when ConversionType=Downsampled)",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fAtoD_fAntiAliasingFilterSet",
		UNITLESS_UNIT,
		prm("_n_x5fAtoD_fOFF","OFF")),
	create_parm ("ExcessBW","Excess bandwidth of raised cosine anti-aliasing filter (used when ConversionType=Downsampled and AntiAliasingFilter=On)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")),
	create_parm ("EnableJitter","Enable jitter",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fAtoD_fEnableJitterSet",
		UNITLESS_UNIT,
		prm("_n_x5fAtoD_fNO","NO")),
	create_parm ("RJrms","Standard deviation of random jitter",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("OutputDigitalFormat","Output digital format",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fAtoD_fOutputDigitalFormatSet",
		UNITLESS_UNIT,
		prm("_n_x5fAtoD_fTwos_x5fcomplement","Twos_complement")));
library_group("Timed, Data Processing","Timed, Data Processing","_AtoD");
palette_group("Timed, Data Processing","Timed, Data Processing","_AtoD");

create_constant_form ("_nAtoD_fClocked", 
	"Clocked",
	0,
	"0",
	"Clocked");
create_constant_form ("_nAtoD_fDownsampled", 
	"Downsampled",
	0,
	"1",
	"Downsampled");
create_form_set("_nAtoD_fConversionTypeSet",
	"_nAtoD_fClocked",
	"_nAtoD_fDownsampled",
	"StdForm");
create_constant_form ("_nAtoD_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");
create_constant_form ("_nAtoD_fON", 
	"ON",
	0,
	"1",
	"ON");
create_form_set("_nAtoD_fAntiAliasingFilterSet",
	"_nAtoD_fOFF",
	"_nAtoD_fON",
	"StdForm");
create_constant_form ("_nAtoD_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nAtoD_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nAtoD_fEnableJitterSet",
	"_nAtoD_fNO",
	"_nAtoD_fYES",
	"StdForm");
create_constant_form ("_nAtoD_fOffset_x5fbinary", 
	"Offset binary",
	0,
	"0",
	"Offset binary");
create_constant_form ("_nAtoD_fTwos_x5fcomplement", 
	"Twos-complement",
	0,
	"1",
	"Twos-complement");
create_form_set("_nAtoD_fOutputDigitalFormatSet",
	"_nAtoD_fOffset_x5fbinary",
	"_nAtoD_fTwos_x5fcomplement",
	"StdForm");
create_item ("AtoD","Analog to Digital Converter with Integral and Differential Nonlinearities",
	"A",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_AtoD",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"AtoD",
	SPDesignAnnotFmt,
	"SYM_DSN_AtoD",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("NBits","Number of bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("VRef","Reference voltage, -VRef<=input<=VRef",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("INL","Integral nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DNL","Differential nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("ConversionType","Type of input conversion",
		PARM_INT | PARM_NO_DISPLAY,
		"_nAtoD_fConversionTypeSet",
		UNITLESS_UNIT,
		prm("_nAtoD_fDownsampled","Downsampled")),
	create_parm ("Clock","Internal cosine clock frequency (used when ConversionType=Clocked)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.2e6")),
	create_parm ("Phase","Internal clock phase (used when ConversionType=Clocked)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DownsampleFactor","Downsampling ratio (used when ConversionType=Downsampled)",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("DownsamplePhase","Downsampling phase (used when ConversionType=Downsampled)",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("AntiAliasingFilter","Turn off/on anti-aliasing filter before downsampling (used when ConversionType=Downsampled)",
		PARM_INT | PARM_NO_DISPLAY,
		"_nAtoD_fAntiAliasingFilterSet",
		UNITLESS_UNIT,
		prm("_nAtoD_fOFF","OFF")),
	create_parm ("ExcessBW","Excess bandwidth of raised cosine anti-aliasing filter (used when ConversionType=Downsampled and AntiAliasingFilter=On)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")),
	create_parm ("EnableJitter","Enable jitter",
		PARM_INT | PARM_NO_DISPLAY,
		"_nAtoD_fEnableJitterSet",
		UNITLESS_UNIT,
		prm("_nAtoD_fNO","NO")),
	create_parm ("RJrms","Standard deviation of random jitter",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("OutputDigitalFormat","Output digital format",
		PARM_INT | PARM_NO_DISPLAY,
		"_nAtoD_fOutputDigitalFormatSet",
		UNITLESS_UNIT,
		prm("_nAtoD_fTwos_x5fcomplement","Twos_complement")));
library_group("Timed, Data Processing","Timed, Data Processing","AtoD");
palette_group("Timed, Data Processing","Timed, Data Processing","AtoD");

create_constant_form ("_n_x5fVideo_fNTSC_x5f5_x5fStep_x5fLinearity", 
	"NTSC 5 Step Linearity",
	0,
	"0",
	"NTSC 5 Step Linearity");
create_constant_form ("_n_x5fVideo_fNTSC_x5f10_x5fStep_x5fLinearity", 
	"NTSC 10 Step Linearity",
	0,
	"1",
	"NTSC 10 Step Linearity");
create_constant_form ("_n_x5fVideo_fNTSC_x5fRamp_x5fLinearity", 
	"NTSC Ramp Linearity",
	0,
	"2",
	"NTSC Ramp Linearity");
create_constant_form ("_n_x5fVideo_fNTSC_x5fSine_x5fSquared_x5fPulse_x5fand_x5fBar", 
	"NTSC Sine Squared Pulse and Bar",
	0,
	"3",
	"NTSC Sine Squared Pulse and Bar");
create_constant_form ("_n_x5fVideo_fNTSC_x5fMultiburst_x5f90_x5fIRE", 
	"NTSC Multiburst 90 IRE",
	0,
	"4",
	"NTSC Multiburst 90 IRE");
create_constant_form ("_n_x5fVideo_fNTSC_x5fMultiburst_x5f60_x5fIRE", 
	"NTSC Multiburst 60 IRE",
	0,
	"5",
	"NTSC Multiburst 60 IRE");
create_constant_form ("_n_x5fVideo_fNTSC_x5fComposite", 
	"NTSC Composite",
	0,
	"6",
	"NTSC Composite");
create_constant_form ("_n_x5fVideo_fNTSC_x5fVIRS", 
	"NTSC VIRS",
	0,
	"7",
	"NTSC VIRS");
create_constant_form ("_n_x5fVideo_fNTSC_x5fFlat_x5fField_x5f100_x5fIRE", 
	"NTSC Flat Field 100 IRE",
	0,
	"8",
	"NTSC Flat Field 100 IRE");
create_constant_form ("_n_x5fVideo_fNTSC_x5fFlat_x5fField_x5f50_x5fIRE", 
	"NTSC Flat Field 50 IRE",
	0,
	"9",
	"NTSC Flat Field 50 IRE");
create_constant_form ("_n_x5fVideo_fNTSC_x5fModulated_x5fPedestal", 
	"NTSC Modulated Pedestal",
	0,
	"10",
	"NTSC Modulated Pedestal");
create_constant_form ("_n_x5fVideo_fNTSC_x5fColor_x5fBar", 
	"NTSC Color Bar",
	0,
	"11",
	"NTSC Color Bar");
create_constant_form ("_n_x5fVideo_fPAL_x5fLine_x5f17_x5fComposite", 
	"PAL Line 17 Composite",
	0,
	"12",
	"PAL Line 17 Composite");
create_constant_form ("_n_x5fVideo_fPAL_x5fLine_x5f330_x5fComposite_x5fwith_x5fD1", 
	"PAL Line 330 Composite with D1",
	0,
	"13",
	"PAL Line 330 Composite with D1");
create_constant_form ("_n_x5fVideo_fPAL_x5fLine_x5f330_x5fComposite_x5fwith_x5fD2", 
	"PAL Line 330 Composite with D2",
	0,
	"14",
	"PAL Line 330 Composite with D2");
create_constant_form ("_n_x5fVideo_fPAL_x5fMultiburst", 
	"PAL Multiburst",
	0,
	"15",
	"PAL Multiburst");
create_constant_form ("_n_x5fVideo_fPAL_x5fChrominance_x5fBar", 
	"PAL Chrominance Bar",
	0,
	"16",
	"PAL Chrominance Bar");
create_constant_form ("_n_x5fVideo_fPAL_x5fModulated_x5fPedestal", 
	"PAL Modulated Pedestal",
	0,
	"17",
	"PAL Modulated Pedestal");
create_form_set("_n_x5fVideo_fTypeSet",
	"_n_x5fVideo_fNTSC_x5f5_x5fStep_x5fLinearity",
	"_n_x5fVideo_fNTSC_x5f10_x5fStep_x5fLinearity",
	"_n_x5fVideo_fNTSC_x5fRamp_x5fLinearity",
	"_n_x5fVideo_fNTSC_x5fSine_x5fSquared_x5fPulse_x5fand_x5fBar",
	"_n_x5fVideo_fNTSC_x5fMultiburst_x5f90_x5fIRE",
	"_n_x5fVideo_fNTSC_x5fMultiburst_x5f60_x5fIRE",
	"_n_x5fVideo_fNTSC_x5fComposite",
	"_n_x5fVideo_fNTSC_x5fVIRS",
	"_n_x5fVideo_fNTSC_x5fFlat_x5fField_x5f100_x5fIRE",
	"_n_x5fVideo_fNTSC_x5fFlat_x5fField_x5f50_x5fIRE",
	"_n_x5fVideo_fNTSC_x5fModulated_x5fPedestal",
	"_n_x5fVideo_fNTSC_x5fColor_x5fBar",
	"_n_x5fVideo_fPAL_x5fLine_x5f17_x5fComposite",
	"_n_x5fVideo_fPAL_x5fLine_x5f330_x5fComposite_x5fwith_x5fD1",
	"_n_x5fVideo_fPAL_x5fLine_x5f330_x5fComposite_x5fwith_x5fD2",
	"_n_x5fVideo_fPAL_x5fMultiburst",
	"_n_x5fVideo_fPAL_x5fChrominance_x5fBar",
	"_n_x5fVideo_fPAL_x5fModulated_x5fPedestal",
	"StdForm");
create_constant_form ("_n_x5fVideo_fVideo_x5fline", 
	"Video line",
	0,
	"0",
	"Video line");
create_constant_form ("_n_x5fVideo_fVideo_x5fframe", 
	"Video frame",
	0,
	"1",
	"Video frame");
create_form_set("_n_x5fVideo_fFormSet",
	"_n_x5fVideo_fVideo_x5fline",
	"_n_x5fVideo_fVideo_x5fframe",
	"StdForm");
create_item ("_Video","Video (NTSC or PAL) signal generator",
	"V",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Video",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fVideo_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Video",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("Type","type of NTSC or PAL video lines",
		PARM_INT,
		"_n_x5fVideo_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fVideo_fNTSC_x5f5_x5fStep_x5fLinearity","NTSC_5_Step_Linearity")),
	create_parm ("Form","Video line or Video frame",
		PARM_INT,
		"_n_x5fVideo_fFormSet",
		UNITLESS_UNIT,
		prm("_n_x5fVideo_fVideo_x5fline","Video_line")),
	create_parm ("StartField","used when Form=Video frame; use value 1 or 2 (when Type=NTSC Type);  use value 1 to 4 (when Type=PAL Type)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("StartLine","used when Form=Video frame; use value 1 to 525 (when Type=NTSC type);  use value 1 to 625 (when Type=PAL type)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Sources","Timed, Sources","_Video");
palette_group("Timed, Sources","Timed, Sources","_Video");

create_constant_form ("_nVideo_fNTSC_x5f5_x5fStep_x5fLinearity", 
	"NTSC 5 Step Linearity",
	0,
	"0",
	"NTSC 5 Step Linearity");
create_constant_form ("_nVideo_fNTSC_x5f10_x5fStep_x5fLinearity", 
	"NTSC 10 Step Linearity",
	0,
	"1",
	"NTSC 10 Step Linearity");
create_constant_form ("_nVideo_fNTSC_x5fRamp_x5fLinearity", 
	"NTSC Ramp Linearity",
	0,
	"2",
	"NTSC Ramp Linearity");
create_constant_form ("_nVideo_fNTSC_x5fSine_x5fSquared_x5fPulse_x5fand_x5fBar", 
	"NTSC Sine Squared Pulse and Bar",
	0,
	"3",
	"NTSC Sine Squared Pulse and Bar");
create_constant_form ("_nVideo_fNTSC_x5fMultiburst_x5f90_x5fIRE", 
	"NTSC Multiburst 90 IRE",
	0,
	"4",
	"NTSC Multiburst 90 IRE");
create_constant_form ("_nVideo_fNTSC_x5fMultiburst_x5f60_x5fIRE", 
	"NTSC Multiburst 60 IRE",
	0,
	"5",
	"NTSC Multiburst 60 IRE");
create_constant_form ("_nVideo_fNTSC_x5fComposite", 
	"NTSC Composite",
	0,
	"6",
	"NTSC Composite");
create_constant_form ("_nVideo_fNTSC_x5fVIRS", 
	"NTSC VIRS",
	0,
	"7",
	"NTSC VIRS");
create_constant_form ("_nVideo_fNTSC_x5fFlat_x5fField_x5f100_x5fIRE", 
	"NTSC Flat Field 100 IRE",
	0,
	"8",
	"NTSC Flat Field 100 IRE");
create_constant_form ("_nVideo_fNTSC_x5fFlat_x5fField_x5f50_x5fIRE", 
	"NTSC Flat Field 50 IRE",
	0,
	"9",
	"NTSC Flat Field 50 IRE");
create_constant_form ("_nVideo_fNTSC_x5fModulated_x5fPedestal", 
	"NTSC Modulated Pedestal",
	0,
	"10",
	"NTSC Modulated Pedestal");
create_constant_form ("_nVideo_fNTSC_x5fColor_x5fBar", 
	"NTSC Color Bar",
	0,
	"11",
	"NTSC Color Bar");
create_constant_form ("_nVideo_fPAL_x5fLine_x5f17_x5fComposite", 
	"PAL Line 17 Composite",
	0,
	"12",
	"PAL Line 17 Composite");
create_constant_form ("_nVideo_fPAL_x5fLine_x5f330_x5fComposite_x5fwith_x5fD1", 
	"PAL Line 330 Composite with D1",
	0,
	"13",
	"PAL Line 330 Composite with D1");
create_constant_form ("_nVideo_fPAL_x5fLine_x5f330_x5fComposite_x5fwith_x5fD2", 
	"PAL Line 330 Composite with D2",
	0,
	"14",
	"PAL Line 330 Composite with D2");
create_constant_form ("_nVideo_fPAL_x5fMultiburst", 
	"PAL Multiburst",
	0,
	"15",
	"PAL Multiburst");
create_constant_form ("_nVideo_fPAL_x5fChrominance_x5fBar", 
	"PAL Chrominance Bar",
	0,
	"16",
	"PAL Chrominance Bar");
create_constant_form ("_nVideo_fPAL_x5fModulated_x5fPedestal", 
	"PAL Modulated Pedestal",
	0,
	"17",
	"PAL Modulated Pedestal");
create_form_set("_nVideo_fTypeSet",
	"_nVideo_fNTSC_x5f5_x5fStep_x5fLinearity",
	"_nVideo_fNTSC_x5f10_x5fStep_x5fLinearity",
	"_nVideo_fNTSC_x5fRamp_x5fLinearity",
	"_nVideo_fNTSC_x5fSine_x5fSquared_x5fPulse_x5fand_x5fBar",
	"_nVideo_fNTSC_x5fMultiburst_x5f90_x5fIRE",
	"_nVideo_fNTSC_x5fMultiburst_x5f60_x5fIRE",
	"_nVideo_fNTSC_x5fComposite",
	"_nVideo_fNTSC_x5fVIRS",
	"_nVideo_fNTSC_x5fFlat_x5fField_x5f100_x5fIRE",
	"_nVideo_fNTSC_x5fFlat_x5fField_x5f50_x5fIRE",
	"_nVideo_fNTSC_x5fModulated_x5fPedestal",
	"_nVideo_fNTSC_x5fColor_x5fBar",
	"_nVideo_fPAL_x5fLine_x5f17_x5fComposite",
	"_nVideo_fPAL_x5fLine_x5f330_x5fComposite_x5fwith_x5fD1",
	"_nVideo_fPAL_x5fLine_x5f330_x5fComposite_x5fwith_x5fD2",
	"_nVideo_fPAL_x5fMultiburst",
	"_nVideo_fPAL_x5fChrominance_x5fBar",
	"_nVideo_fPAL_x5fModulated_x5fPedestal",
	"StdForm");
create_constant_form ("_nVideo_fVideo_x5fline", 
	"Video line",
	0,
	"0",
	"Video line");
create_constant_form ("_nVideo_fVideo_x5fframe", 
	"Video frame",
	0,
	"1",
	"Video frame");
create_form_set("_nVideo_fFormSet",
	"_nVideo_fVideo_x5fline",
	"_nVideo_fVideo_x5fframe",
	"StdForm");
create_item ("Video","Video (NTSC or PAL) signal generator",
	"V",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Video",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Video",
	SPDesignAnnotFmt,
	"SYM_DSN_Video",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("Type","type of NTSC or PAL video lines",
		PARM_INT,
		"_nVideo_fTypeSet",
		UNITLESS_UNIT,
		prm("_nVideo_fNTSC_x5f5_x5fStep_x5fLinearity","NTSC_5_Step_Linearity")),
	create_parm ("Form","Video line or Video frame",
		PARM_INT,
		"_nVideo_fFormSet",
		UNITLESS_UNIT,
		prm("_nVideo_fVideo_x5fline","Video_line")),
	create_parm ("StartField","used when Form=Video frame; use value 1 or 2 (when Type=NTSC Type);  use value 1 to 4 (when Type=PAL Type)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("StartLine","used when Form=Video frame; use value 1 to 525 (when Type=NTSC type);  use value 1 to 625 (when Type=PAL type)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Sources","Timed, Sources","Video");
palette_group("Timed, Sources","Timed, Sources","Video");

create_item ("_VcPhaseShiftRF","Voltage controlled RF signal phase shifter",
	"V",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_VcPhaseShiftRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fVcPhaseShiftRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_VcPhaseShiftRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","phase shift sensitivity in degrees/Volt",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","_VcPhaseShiftRF");
palette_group("Timed, Linear","Timed, Linear","_VcPhaseShiftRF");

create_item ("VcPhaseShiftRF","Voltage controlled RF signal phase shifter",
	"V",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_VcPhaseShiftRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"VcPhaseShiftRF",
	SPDesignAnnotFmt,
	"SYM_DSN_VcPhaseShiftRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","phase shift sensitivity in degrees/Volt",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","VcPhaseShiftRF");
palette_group("Timed, Linear","Timed, Linear","VcPhaseShiftRF");

create_constant_form ("_n_x5fVcDelayRF_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_n_x5fVcDelayRF_flinear", 
	"linear",
	0,
	"1",
	"linear");
create_form_set("_n_x5fVcDelayRF_fInterpolationMethodSet",
	"_n_x5fVcDelayRF_fnone",
	"_n_x5fVcDelayRF_flinear",
	"StdForm");
create_constant_form ("_n_x5fVcDelayRF_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_n_x5fVcDelayRF_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_n_x5fVcDelayRF_fIncludeCarrierPhaseShiftSet",
	"_n_x5fVcDelayRF_fNo",
	"_n_x5fVcDelayRF_fYes",
	"StdForm");
create_item ("_VcDelayRF","Voltage controlled time delay",
	"V",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_VcDelayRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fVcDelayRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_VcDelayRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("InterpolationMethod","signal interpolation method",
		PARM_INT,
		"_n_x5fVcDelayRF_fInterpolationMethodSet",
		UNITLESS_UNIT,
		prm("_n_x5fVcDelayRF_fnone","none")),
	create_parm ("IncludeCarrierPhaseShift","include RF carrier phase shift",
		PARM_INT,
		"_n_x5fVcDelayRF_fIncludeCarrierPhaseShiftSet",
		UNITLESS_UNIT,
		prm("_n_x5fVcDelayRF_fYes","Yes")),
	create_parm ("MaxTimeDelay","maximum time delay available rounded to nearest TStep",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Linear","Timed, Linear","_VcDelayRF");
palette_group("Timed, Linear","Timed, Linear","_VcDelayRF");

create_constant_form ("_nVcDelayRF_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_nVcDelayRF_flinear", 
	"linear",
	0,
	"1",
	"linear");
create_form_set("_nVcDelayRF_fInterpolationMethodSet",
	"_nVcDelayRF_fnone",
	"_nVcDelayRF_flinear",
	"StdForm");
create_constant_form ("_nVcDelayRF_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_nVcDelayRF_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_nVcDelayRF_fIncludeCarrierPhaseShiftSet",
	"_nVcDelayRF_fNo",
	"_nVcDelayRF_fYes",
	"StdForm");
create_item ("VcDelayRF","Voltage controlled time delay",
	"V",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_VcDelayRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"VcDelayRF",
	SPDesignAnnotFmt,
	"SYM_DSN_VcDelayRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("InterpolationMethod","signal interpolation method",
		PARM_INT,
		"_nVcDelayRF_fInterpolationMethodSet",
		UNITLESS_UNIT,
		prm("_nVcDelayRF_fnone","none")),
	create_parm ("IncludeCarrierPhaseShift","include RF carrier phase shift",
		PARM_INT,
		"_nVcDelayRF_fIncludeCarrierPhaseShiftSet",
		UNITLESS_UNIT,
		prm("_nVcDelayRF_fYes","Yes")),
	create_parm ("MaxTimeDelay","maximum time delay available rounded to nearest TStep",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Linear","Timed, Linear","VcDelayRF");
palette_group("Timed, Linear","Timed, Linear","VcDelayRF");

create_constant_form ("_n_x5fUSampleRF_fSampleAndHold", 
	"SampleAndHold",
	0,
	"0",
	"SampleAndHold");
create_constant_form ("_n_x5fUSampleRF_fZeroInsertion", 
	"ZeroInsertion",
	0,
	"1",
	"ZeroInsertion");
create_constant_form ("_n_x5fUSampleRF_fPolyPhaseFilter", 
	"PolyPhaseFilter",
	0,
	"2",
	"PolyPhaseFilter");
create_constant_form ("_n_x5fUSampleRF_fLinear", 
	"Linear",
	0,
	"3",
	"Linear");
create_form_set("_n_x5fUSampleRF_fTypeSet",
	"_n_x5fUSampleRF_fSampleAndHold",
	"_n_x5fUSampleRF_fZeroInsertion",
	"_n_x5fUSampleRF_fPolyPhaseFilter",
	"_n_x5fUSampleRF_fLinear",
	"StdForm");
create_item ("_USampleRF","Up sampler for time domain signals",
	"U",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_USampleRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fUSampleRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_USampleRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Type","upsampling interpolation type",
		PARM_INT,
		"_n_x5fUSampleRF_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fUSampleRF_fSampleAndHold","SampleAndHold")),
	create_parm ("Ratio","upsampling ratio",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("InsertionPhase","upsampling insertion phase for the output non-zero sample when Type=ZeroInsertion",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ExcessBW","excess bandwidth of raised cosine interpolation filter, used when Type=PolyPhaseFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Linear","Timed, Linear","_USampleRF");
palette_group("Timed, Linear","Timed, Linear","_USampleRF");

create_constant_form ("_nUSampleRF_fSampleAndHold", 
	"SampleAndHold",
	0,
	"0",
	"SampleAndHold");
create_constant_form ("_nUSampleRF_fZeroInsertion", 
	"ZeroInsertion",
	0,
	"1",
	"ZeroInsertion");
create_constant_form ("_nUSampleRF_fPolyPhaseFilter", 
	"PolyPhaseFilter",
	0,
	"2",
	"PolyPhaseFilter");
create_constant_form ("_nUSampleRF_fLinear", 
	"Linear",
	0,
	"3",
	"Linear");
create_form_set("_nUSampleRF_fTypeSet",
	"_nUSampleRF_fSampleAndHold",
	"_nUSampleRF_fZeroInsertion",
	"_nUSampleRF_fPolyPhaseFilter",
	"_nUSampleRF_fLinear",
	"StdForm");
create_item ("USampleRF","Up sampler for time domain signals",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_USampleRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"USampleRF",
	SPDesignAnnotFmt,
	"SYM_DSN_USampleRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Type","upsampling interpolation type",
		PARM_INT,
		"_nUSampleRF_fTypeSet",
		UNITLESS_UNIT,
		prm("_nUSampleRF_fSampleAndHold","SampleAndHold")),
	create_parm ("Ratio","upsampling ratio",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("InsertionPhase","upsampling insertion phase for the output non-zero sample when Type=ZeroInsertion",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ExcessBW","excess bandwidth of raised cosine interpolation filter, used when Type=PolyPhaseFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Linear","Timed, Linear","USampleRF");
palette_group("Timed, Linear","Timed, Linear","USampleRF");

create_item ("_SymbolSplitterClocked","Symbol splitter for alternate symbols with clock input",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SymbolSplitterClocked",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSymbolSplitterClocked_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SymbolSplitterClocked",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")));
library_group("Timed, Data Processing","Timed, Data Processing","_SymbolSplitterClocked");
palette_group("Timed, Data Processing","Timed, Data Processing","_SymbolSplitterClocked");

create_item ("SymbolSplitterClocked","Symbol splitter for alternate symbols with clock input",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SymbolSplitterClocked",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SymbolSplitterClocked",
	SPDesignAnnotFmt,
	"SYM_DSN_SymbolSplitterClocked",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")));
library_group("Timed, Data Processing","Timed, Data Processing","SymbolSplitterClocked");
palette_group("Timed, Data Processing","Timed, Data Processing","SymbolSplitterClocked");

create_item ("_SymbolSplitter","Symbol splitter for alternate symbols",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SymbolSplitter",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSymbolSplitter_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SymbolSplitter",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","data input time delay from t=0 for start of the data stream, Delay= -1 for auto synchronization",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")));
library_group("Timed, Data Processing","Timed, Data Processing","_SymbolSplitter");
palette_group("Timed, Data Processing","Timed, Data Processing","_SymbolSplitter");

create_item ("SymbolSplitter","Symbol splitter for alternate symbols",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SymbolSplitter",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SymbolSplitter",
	SPDesignAnnotFmt,
	"SYM_DSN_SymbolSplitter",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","data input time delay from t=0 for start of the data stream, Delay= -1 for auto synchronization",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")));
library_group("Timed, Data Processing","Timed, Data Processing","SymbolSplitter");
palette_group("Timed, Data Processing","Timed, Data Processing","SymbolSplitter");

create_constant_form ("_n_x5fSymbolConverterClocked_fnrzIn", 
	"nrzIn",
	0,
	"0",
	"nrzIn");
create_constant_form ("_n_x5fSymbolConverterClocked_frzIn", 
	"rzIn",
	0,
	"1",
	"rzIn");
create_constant_form ("_n_x5fSymbolConverterClocked_fcmiIn", 
	"cmiIn",
	0,
	"2",
	"cmiIn");
create_constant_form ("_n_x5fSymbolConverterClocked_fami_x5fnrzIn", 
	"ami_nrzIn",
	0,
	"3",
	"ami_nrzIn");
create_constant_form ("_n_x5fSymbolConverterClocked_fami_x5frzIn", 
	"ami_rzIn",
	0,
	"4",
	"ami_rzIn");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam4In", 
	"pam4In",
	0,
	"5",
	"pam4In");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam8In", 
	"pam8In",
	0,
	"6",
	"pam8In");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam16In", 
	"pam16In",
	0,
	"7",
	"pam16In");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam32In", 
	"pam32In",
	0,
	"8",
	"pam32In");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam64In", 
	"pam64In",
	0,
	"9",
	"pam64In");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam128In", 
	"pam128In",
	0,
	"10",
	"pam128In");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam256In", 
	"pam256In",
	0,
	"11",
	"pam256In");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam512In", 
	"pam512In",
	0,
	"12",
	"pam512In");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam1024In", 
	"pam1024In",
	0,
	"13",
	"pam1024In");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam2048In", 
	"pam2048In",
	0,
	"14",
	"pam2048In");
create_form_set("_n_x5fSymbolConverterClocked_fCodeInSet",
	"_n_x5fSymbolConverterClocked_fnrzIn",
	"_n_x5fSymbolConverterClocked_frzIn",
	"_n_x5fSymbolConverterClocked_fcmiIn",
	"_n_x5fSymbolConverterClocked_fami_x5fnrzIn",
	"_n_x5fSymbolConverterClocked_fami_x5frzIn",
	"_n_x5fSymbolConverterClocked_fpam4In",
	"_n_x5fSymbolConverterClocked_fpam8In",
	"_n_x5fSymbolConverterClocked_fpam16In",
	"_n_x5fSymbolConverterClocked_fpam32In",
	"_n_x5fSymbolConverterClocked_fpam64In",
	"_n_x5fSymbolConverterClocked_fpam128In",
	"_n_x5fSymbolConverterClocked_fpam256In",
	"_n_x5fSymbolConverterClocked_fpam512In",
	"_n_x5fSymbolConverterClocked_fpam1024In",
	"_n_x5fSymbolConverterClocked_fpam2048In",
	"StdForm");
create_constant_form ("_n_x5fSymbolConverterClocked_fnrzOut", 
	"nrzOut",
	0,
	"0",
	"nrzOut");
create_constant_form ("_n_x5fSymbolConverterClocked_frzOut", 
	"rzOut",
	0,
	"1",
	"rzOut");
create_constant_form ("_n_x5fSymbolConverterClocked_fcmiOut", 
	"cmiOut",
	0,
	"2",
	"cmiOut");
create_constant_form ("_n_x5fSymbolConverterClocked_fami_x5fnrzOut", 
	"ami_nrzOut",
	0,
	"3",
	"ami_nrzOut");
create_constant_form ("_n_x5fSymbolConverterClocked_fami_x5frzOut", 
	"ami_rzOut",
	0,
	"4",
	"ami_rzOut");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam4Out", 
	"pam4Out",
	0,
	"5",
	"pam4Out");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam8Out", 
	"pam8Out",
	0,
	"6",
	"pam8Out");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam16Out", 
	"pam16Out",
	0,
	"7",
	"pam16Out");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam32Out", 
	"pam32Out",
	0,
	"8",
	"pam32Out");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam64Out", 
	"pam64Out",
	0,
	"9",
	"pam64Out");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam128Out", 
	"pam128Out",
	0,
	"10",
	"pam128Out");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam256Out", 
	"pam256Out",
	0,
	"11",
	"pam256Out");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam512Out", 
	"pam512Out",
	0,
	"12",
	"pam512Out");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam1024Out", 
	"pam1024Out",
	0,
	"13",
	"pam1024Out");
create_constant_form ("_n_x5fSymbolConverterClocked_fpam2048Out", 
	"pam2048Out",
	0,
	"14",
	"pam2048Out");
create_form_set("_n_x5fSymbolConverterClocked_fCodeOutSet",
	"_n_x5fSymbolConverterClocked_fnrzOut",
	"_n_x5fSymbolConverterClocked_frzOut",
	"_n_x5fSymbolConverterClocked_fcmiOut",
	"_n_x5fSymbolConverterClocked_fami_x5fnrzOut",
	"_n_x5fSymbolConverterClocked_fami_x5frzOut",
	"_n_x5fSymbolConverterClocked_fpam4Out",
	"_n_x5fSymbolConverterClocked_fpam8Out",
	"_n_x5fSymbolConverterClocked_fpam16Out",
	"_n_x5fSymbolConverterClocked_fpam32Out",
	"_n_x5fSymbolConverterClocked_fpam64Out",
	"_n_x5fSymbolConverterClocked_fpam128Out",
	"_n_x5fSymbolConverterClocked_fpam256Out",
	"_n_x5fSymbolConverterClocked_fpam512Out",
	"_n_x5fSymbolConverterClocked_fpam1024Out",
	"_n_x5fSymbolConverterClocked_fpam2048Out",
	"StdForm");
create_item ("_SymbolConverterClocked","Symbol format converter with clock input",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SymbolConverterClocked",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSymbolConverterClocked_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SymbolConverterClocked",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("CodeIn","input data format",
		PARM_INT,
		"_n_x5fSymbolConverterClocked_fCodeInSet",
		UNITLESS_UNIT,
		prm("_n_x5fSymbolConverterClocked_fnrzIn","nrzIn")),
	create_parm ("CodeOut","output data format",
		PARM_INT,
		"_n_x5fSymbolConverterClocked_fCodeOutSet",
		UNITLESS_UNIT,
		prm("_n_x5fSymbolConverterClocked_fnrzOut","nrzOut")));
library_group("Timed, Data Processing","Timed, Data Processing","_SymbolConverterClocked");
palette_group("Timed, Data Processing","Timed, Data Processing","_SymbolConverterClocked");

create_constant_form ("_nSymbolConverterClocked_fnrzIn", 
	"nrzIn",
	0,
	"0",
	"nrzIn");
create_constant_form ("_nSymbolConverterClocked_frzIn", 
	"rzIn",
	0,
	"1",
	"rzIn");
create_constant_form ("_nSymbolConverterClocked_fcmiIn", 
	"cmiIn",
	0,
	"2",
	"cmiIn");
create_constant_form ("_nSymbolConverterClocked_fami_x5fnrzIn", 
	"ami_nrzIn",
	0,
	"3",
	"ami_nrzIn");
create_constant_form ("_nSymbolConverterClocked_fami_x5frzIn", 
	"ami_rzIn",
	0,
	"4",
	"ami_rzIn");
create_constant_form ("_nSymbolConverterClocked_fpam4In", 
	"pam4In",
	0,
	"5",
	"pam4In");
create_constant_form ("_nSymbolConverterClocked_fpam8In", 
	"pam8In",
	0,
	"6",
	"pam8In");
create_constant_form ("_nSymbolConverterClocked_fpam16In", 
	"pam16In",
	0,
	"7",
	"pam16In");
create_constant_form ("_nSymbolConverterClocked_fpam32In", 
	"pam32In",
	0,
	"8",
	"pam32In");
create_constant_form ("_nSymbolConverterClocked_fpam64In", 
	"pam64In",
	0,
	"9",
	"pam64In");
create_constant_form ("_nSymbolConverterClocked_fpam128In", 
	"pam128In",
	0,
	"10",
	"pam128In");
create_constant_form ("_nSymbolConverterClocked_fpam256In", 
	"pam256In",
	0,
	"11",
	"pam256In");
create_constant_form ("_nSymbolConverterClocked_fpam512In", 
	"pam512In",
	0,
	"12",
	"pam512In");
create_constant_form ("_nSymbolConverterClocked_fpam1024In", 
	"pam1024In",
	0,
	"13",
	"pam1024In");
create_constant_form ("_nSymbolConverterClocked_fpam2048In", 
	"pam2048In",
	0,
	"14",
	"pam2048In");
create_form_set("_nSymbolConverterClocked_fCodeInSet",
	"_nSymbolConverterClocked_fnrzIn",
	"_nSymbolConverterClocked_frzIn",
	"_nSymbolConverterClocked_fcmiIn",
	"_nSymbolConverterClocked_fami_x5fnrzIn",
	"_nSymbolConverterClocked_fami_x5frzIn",
	"_nSymbolConverterClocked_fpam4In",
	"_nSymbolConverterClocked_fpam8In",
	"_nSymbolConverterClocked_fpam16In",
	"_nSymbolConverterClocked_fpam32In",
	"_nSymbolConverterClocked_fpam64In",
	"_nSymbolConverterClocked_fpam128In",
	"_nSymbolConverterClocked_fpam256In",
	"_nSymbolConverterClocked_fpam512In",
	"_nSymbolConverterClocked_fpam1024In",
	"_nSymbolConverterClocked_fpam2048In",
	"StdForm");
create_constant_form ("_nSymbolConverterClocked_fnrzOut", 
	"nrzOut",
	0,
	"0",
	"nrzOut");
create_constant_form ("_nSymbolConverterClocked_frzOut", 
	"rzOut",
	0,
	"1",
	"rzOut");
create_constant_form ("_nSymbolConverterClocked_fcmiOut", 
	"cmiOut",
	0,
	"2",
	"cmiOut");
create_constant_form ("_nSymbolConverterClocked_fami_x5fnrzOut", 
	"ami_nrzOut",
	0,
	"3",
	"ami_nrzOut");
create_constant_form ("_nSymbolConverterClocked_fami_x5frzOut", 
	"ami_rzOut",
	0,
	"4",
	"ami_rzOut");
create_constant_form ("_nSymbolConverterClocked_fpam4Out", 
	"pam4Out",
	0,
	"5",
	"pam4Out");
create_constant_form ("_nSymbolConverterClocked_fpam8Out", 
	"pam8Out",
	0,
	"6",
	"pam8Out");
create_constant_form ("_nSymbolConverterClocked_fpam16Out", 
	"pam16Out",
	0,
	"7",
	"pam16Out");
create_constant_form ("_nSymbolConverterClocked_fpam32Out", 
	"pam32Out",
	0,
	"8",
	"pam32Out");
create_constant_form ("_nSymbolConverterClocked_fpam64Out", 
	"pam64Out",
	0,
	"9",
	"pam64Out");
create_constant_form ("_nSymbolConverterClocked_fpam128Out", 
	"pam128Out",
	0,
	"10",
	"pam128Out");
create_constant_form ("_nSymbolConverterClocked_fpam256Out", 
	"pam256Out",
	0,
	"11",
	"pam256Out");
create_constant_form ("_nSymbolConverterClocked_fpam512Out", 
	"pam512Out",
	0,
	"12",
	"pam512Out");
create_constant_form ("_nSymbolConverterClocked_fpam1024Out", 
	"pam1024Out",
	0,
	"13",
	"pam1024Out");
create_constant_form ("_nSymbolConverterClocked_fpam2048Out", 
	"pam2048Out",
	0,
	"14",
	"pam2048Out");
create_form_set("_nSymbolConverterClocked_fCodeOutSet",
	"_nSymbolConverterClocked_fnrzOut",
	"_nSymbolConverterClocked_frzOut",
	"_nSymbolConverterClocked_fcmiOut",
	"_nSymbolConverterClocked_fami_x5fnrzOut",
	"_nSymbolConverterClocked_fami_x5frzOut",
	"_nSymbolConverterClocked_fpam4Out",
	"_nSymbolConverterClocked_fpam8Out",
	"_nSymbolConverterClocked_fpam16Out",
	"_nSymbolConverterClocked_fpam32Out",
	"_nSymbolConverterClocked_fpam64Out",
	"_nSymbolConverterClocked_fpam128Out",
	"_nSymbolConverterClocked_fpam256Out",
	"_nSymbolConverterClocked_fpam512Out",
	"_nSymbolConverterClocked_fpam1024Out",
	"_nSymbolConverterClocked_fpam2048Out",
	"StdForm");
create_item ("SymbolConverterClocked","Symbol format converter with clock input",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SymbolConverterClocked",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SymbolConverterClocked",
	SPDesignAnnotFmt,
	"SYM_DSN_SymbolConverterClocked",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("CodeIn","input data format",
		PARM_INT,
		"_nSymbolConverterClocked_fCodeInSet",
		UNITLESS_UNIT,
		prm("_nSymbolConverterClocked_fnrzIn","nrzIn")),
	create_parm ("CodeOut","output data format",
		PARM_INT,
		"_nSymbolConverterClocked_fCodeOutSet",
		UNITLESS_UNIT,
		prm("_nSymbolConverterClocked_fnrzOut","nrzOut")));
library_group("Timed, Data Processing","Timed, Data Processing","SymbolConverterClocked");
palette_group("Timed, Data Processing","Timed, Data Processing","SymbolConverterClocked");

create_constant_form ("_n_x5fSymbolConverter_fnrzIn", 
	"nrzIn",
	0,
	"0",
	"nrzIn");
create_constant_form ("_n_x5fSymbolConverter_frzIn", 
	"rzIn",
	0,
	"1",
	"rzIn");
create_constant_form ("_n_x5fSymbolConverter_fcmiIn", 
	"cmiIn",
	0,
	"2",
	"cmiIn");
create_constant_form ("_n_x5fSymbolConverter_fami_x5fnrzIn", 
	"ami_nrzIn",
	0,
	"3",
	"ami_nrzIn");
create_constant_form ("_n_x5fSymbolConverter_fami_x5frzIn", 
	"ami_rzIn",
	0,
	"4",
	"ami_rzIn");
create_constant_form ("_n_x5fSymbolConverter_fpam4In", 
	"pam4In",
	0,
	"5",
	"pam4In");
create_constant_form ("_n_x5fSymbolConverter_fpam8In", 
	"pam8In",
	0,
	"6",
	"pam8In");
create_constant_form ("_n_x5fSymbolConverter_fpam16In", 
	"pam16In",
	0,
	"7",
	"pam16In");
create_constant_form ("_n_x5fSymbolConverter_fpam32In", 
	"pam32In",
	0,
	"8",
	"pam32In");
create_constant_form ("_n_x5fSymbolConverter_fpam64In", 
	"pam64In",
	0,
	"9",
	"pam64In");
create_constant_form ("_n_x5fSymbolConverter_fpam128In", 
	"pam128In",
	0,
	"10",
	"pam128In");
create_constant_form ("_n_x5fSymbolConverter_fpam256In", 
	"pam256In",
	0,
	"11",
	"pam256In");
create_constant_form ("_n_x5fSymbolConverter_fpam512In", 
	"pam512In",
	0,
	"12",
	"pam512In");
create_constant_form ("_n_x5fSymbolConverter_fpam1024In", 
	"pam1024In",
	0,
	"13",
	"pam1024In");
create_constant_form ("_n_x5fSymbolConverter_fpam2048In", 
	"pam2048In",
	0,
	"14",
	"pam2048In");
create_form_set("_n_x5fSymbolConverter_fCodeInSet",
	"_n_x5fSymbolConverter_fnrzIn",
	"_n_x5fSymbolConverter_frzIn",
	"_n_x5fSymbolConverter_fcmiIn",
	"_n_x5fSymbolConverter_fami_x5fnrzIn",
	"_n_x5fSymbolConverter_fami_x5frzIn",
	"_n_x5fSymbolConverter_fpam4In",
	"_n_x5fSymbolConverter_fpam8In",
	"_n_x5fSymbolConverter_fpam16In",
	"_n_x5fSymbolConverter_fpam32In",
	"_n_x5fSymbolConverter_fpam64In",
	"_n_x5fSymbolConverter_fpam128In",
	"_n_x5fSymbolConverter_fpam256In",
	"_n_x5fSymbolConverter_fpam512In",
	"_n_x5fSymbolConverter_fpam1024In",
	"_n_x5fSymbolConverter_fpam2048In",
	"StdForm");
create_constant_form ("_n_x5fSymbolConverter_fnrzOut", 
	"nrzOut",
	0,
	"0",
	"nrzOut");
create_constant_form ("_n_x5fSymbolConverter_frzOut", 
	"rzOut",
	0,
	"1",
	"rzOut");
create_constant_form ("_n_x5fSymbolConverter_fcmiOut", 
	"cmiOut",
	0,
	"2",
	"cmiOut");
create_constant_form ("_n_x5fSymbolConverter_fami_x5fnrzOut", 
	"ami_nrzOut",
	0,
	"3",
	"ami_nrzOut");
create_constant_form ("_n_x5fSymbolConverter_fami_x5frzOut", 
	"ami_rzOut",
	0,
	"4",
	"ami_rzOut");
create_constant_form ("_n_x5fSymbolConverter_fpam4Out", 
	"pam4Out",
	0,
	"5",
	"pam4Out");
create_constant_form ("_n_x5fSymbolConverter_fpam8Out", 
	"pam8Out",
	0,
	"6",
	"pam8Out");
create_constant_form ("_n_x5fSymbolConverter_fpam16Out", 
	"pam16Out",
	0,
	"7",
	"pam16Out");
create_constant_form ("_n_x5fSymbolConverter_fpam32Out", 
	"pam32Out",
	0,
	"8",
	"pam32Out");
create_constant_form ("_n_x5fSymbolConverter_fpam64Out", 
	"pam64Out",
	0,
	"9",
	"pam64Out");
create_constant_form ("_n_x5fSymbolConverter_fpam128Out", 
	"pam128Out",
	0,
	"10",
	"pam128Out");
create_constant_form ("_n_x5fSymbolConverter_fpam256Out", 
	"pam256Out",
	0,
	"11",
	"pam256Out");
create_constant_form ("_n_x5fSymbolConverter_fpam512Out", 
	"pam512Out",
	0,
	"12",
	"pam512Out");
create_constant_form ("_n_x5fSymbolConverter_fpam1024Out", 
	"pam1024Out",
	0,
	"13",
	"pam1024Out");
create_constant_form ("_n_x5fSymbolConverter_fpam2048Out", 
	"pam2048Out",
	0,
	"14",
	"pam2048Out");
create_form_set("_n_x5fSymbolConverter_fCodeOutSet",
	"_n_x5fSymbolConverter_fnrzOut",
	"_n_x5fSymbolConverter_frzOut",
	"_n_x5fSymbolConverter_fcmiOut",
	"_n_x5fSymbolConverter_fami_x5fnrzOut",
	"_n_x5fSymbolConverter_fami_x5frzOut",
	"_n_x5fSymbolConverter_fpam4Out",
	"_n_x5fSymbolConverter_fpam8Out",
	"_n_x5fSymbolConverter_fpam16Out",
	"_n_x5fSymbolConverter_fpam32Out",
	"_n_x5fSymbolConverter_fpam64Out",
	"_n_x5fSymbolConverter_fpam128Out",
	"_n_x5fSymbolConverter_fpam256Out",
	"_n_x5fSymbolConverter_fpam512Out",
	"_n_x5fSymbolConverter_fpam1024Out",
	"_n_x5fSymbolConverter_fpam2048Out",
	"StdForm");
create_item ("_SymbolConverter","Symbol format converter",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SymbolConverter",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSymbolConverter_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SymbolConverter",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","data input time delay from t=0 for start of the data stream, Delay= -1 for auto synchronization",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("CodeIn","input data format",
		PARM_INT,
		"_n_x5fSymbolConverter_fCodeInSet",
		UNITLESS_UNIT,
		prm("_n_x5fSymbolConverter_fnrzIn","nrzIn")),
	create_parm ("CodeOut","output data format",
		PARM_INT,
		"_n_x5fSymbolConverter_fCodeOutSet",
		UNITLESS_UNIT,
		prm("_n_x5fSymbolConverter_fnrzOut","nrzOut")));
library_group("Timed, Data Processing","Timed, Data Processing","_SymbolConverter");
palette_group("Timed, Data Processing","Timed, Data Processing","_SymbolConverter");

create_constant_form ("_nSymbolConverter_fnrzIn", 
	"nrzIn",
	0,
	"0",
	"nrzIn");
create_constant_form ("_nSymbolConverter_frzIn", 
	"rzIn",
	0,
	"1",
	"rzIn");
create_constant_form ("_nSymbolConverter_fcmiIn", 
	"cmiIn",
	0,
	"2",
	"cmiIn");
create_constant_form ("_nSymbolConverter_fami_x5fnrzIn", 
	"ami_nrzIn",
	0,
	"3",
	"ami_nrzIn");
create_constant_form ("_nSymbolConverter_fami_x5frzIn", 
	"ami_rzIn",
	0,
	"4",
	"ami_rzIn");
create_constant_form ("_nSymbolConverter_fpam4In", 
	"pam4In",
	0,
	"5",
	"pam4In");
create_constant_form ("_nSymbolConverter_fpam8In", 
	"pam8In",
	0,
	"6",
	"pam8In");
create_constant_form ("_nSymbolConverter_fpam16In", 
	"pam16In",
	0,
	"7",
	"pam16In");
create_constant_form ("_nSymbolConverter_fpam32In", 
	"pam32In",
	0,
	"8",
	"pam32In");
create_constant_form ("_nSymbolConverter_fpam64In", 
	"pam64In",
	0,
	"9",
	"pam64In");
create_constant_form ("_nSymbolConverter_fpam128In", 
	"pam128In",
	0,
	"10",
	"pam128In");
create_constant_form ("_nSymbolConverter_fpam256In", 
	"pam256In",
	0,
	"11",
	"pam256In");
create_constant_form ("_nSymbolConverter_fpam512In", 
	"pam512In",
	0,
	"12",
	"pam512In");
create_constant_form ("_nSymbolConverter_fpam1024In", 
	"pam1024In",
	0,
	"13",
	"pam1024In");
create_constant_form ("_nSymbolConverter_fpam2048In", 
	"pam2048In",
	0,
	"14",
	"pam2048In");
create_form_set("_nSymbolConverter_fCodeInSet",
	"_nSymbolConverter_fnrzIn",
	"_nSymbolConverter_frzIn",
	"_nSymbolConverter_fcmiIn",
	"_nSymbolConverter_fami_x5fnrzIn",
	"_nSymbolConverter_fami_x5frzIn",
	"_nSymbolConverter_fpam4In",
	"_nSymbolConverter_fpam8In",
	"_nSymbolConverter_fpam16In",
	"_nSymbolConverter_fpam32In",
	"_nSymbolConverter_fpam64In",
	"_nSymbolConverter_fpam128In",
	"_nSymbolConverter_fpam256In",
	"_nSymbolConverter_fpam512In",
	"_nSymbolConverter_fpam1024In",
	"_nSymbolConverter_fpam2048In",
	"StdForm");
create_constant_form ("_nSymbolConverter_fnrzOut", 
	"nrzOut",
	0,
	"0",
	"nrzOut");
create_constant_form ("_nSymbolConverter_frzOut", 
	"rzOut",
	0,
	"1",
	"rzOut");
create_constant_form ("_nSymbolConverter_fcmiOut", 
	"cmiOut",
	0,
	"2",
	"cmiOut");
create_constant_form ("_nSymbolConverter_fami_x5fnrzOut", 
	"ami_nrzOut",
	0,
	"3",
	"ami_nrzOut");
create_constant_form ("_nSymbolConverter_fami_x5frzOut", 
	"ami_rzOut",
	0,
	"4",
	"ami_rzOut");
create_constant_form ("_nSymbolConverter_fpam4Out", 
	"pam4Out",
	0,
	"5",
	"pam4Out");
create_constant_form ("_nSymbolConverter_fpam8Out", 
	"pam8Out",
	0,
	"6",
	"pam8Out");
create_constant_form ("_nSymbolConverter_fpam16Out", 
	"pam16Out",
	0,
	"7",
	"pam16Out");
create_constant_form ("_nSymbolConverter_fpam32Out", 
	"pam32Out",
	0,
	"8",
	"pam32Out");
create_constant_form ("_nSymbolConverter_fpam64Out", 
	"pam64Out",
	0,
	"9",
	"pam64Out");
create_constant_form ("_nSymbolConverter_fpam128Out", 
	"pam128Out",
	0,
	"10",
	"pam128Out");
create_constant_form ("_nSymbolConverter_fpam256Out", 
	"pam256Out",
	0,
	"11",
	"pam256Out");
create_constant_form ("_nSymbolConverter_fpam512Out", 
	"pam512Out",
	0,
	"12",
	"pam512Out");
create_constant_form ("_nSymbolConverter_fpam1024Out", 
	"pam1024Out",
	0,
	"13",
	"pam1024Out");
create_constant_form ("_nSymbolConverter_fpam2048Out", 
	"pam2048Out",
	0,
	"14",
	"pam2048Out");
create_form_set("_nSymbolConverter_fCodeOutSet",
	"_nSymbolConverter_fnrzOut",
	"_nSymbolConverter_frzOut",
	"_nSymbolConverter_fcmiOut",
	"_nSymbolConverter_fami_x5fnrzOut",
	"_nSymbolConverter_fami_x5frzOut",
	"_nSymbolConverter_fpam4Out",
	"_nSymbolConverter_fpam8Out",
	"_nSymbolConverter_fpam16Out",
	"_nSymbolConverter_fpam32Out",
	"_nSymbolConverter_fpam64Out",
	"_nSymbolConverter_fpam128Out",
	"_nSymbolConverter_fpam256Out",
	"_nSymbolConverter_fpam512Out",
	"_nSymbolConverter_fpam1024Out",
	"_nSymbolConverter_fpam2048Out",
	"StdForm");
create_item ("SymbolConverter","Symbol format converter",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SymbolConverter",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SymbolConverter",
	SPDesignAnnotFmt,
	"SYM_DSN_SymbolConverter",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","data input time delay from t=0 for start of the data stream, Delay= -1 for auto synchronization",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("CodeIn","input data format",
		PARM_INT,
		"_nSymbolConverter_fCodeInSet",
		UNITLESS_UNIT,
		prm("_nSymbolConverter_fnrzIn","nrzIn")),
	create_parm ("CodeOut","output data format",
		PARM_INT,
		"_nSymbolConverter_fCodeOutSet",
		UNITLESS_UNIT,
		prm("_nSymbolConverter_fnrzOut","nrzOut")));
library_group("Timed, Data Processing","Timed, Data Processing","SymbolConverter");
palette_group("Timed, Data Processing","Timed, Data Processing","SymbolConverter");

create_item ("_SwitchSPST","RF single pole, single throw switch",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SwitchSPST",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSwitchSPST_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SwitchSPST",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","loss in dB for on state insterion loss",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Isolation","Isolation in dB for off state insterion loss",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("VThreshold","control voltage threshold",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("TOn","on-state transition time for output",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("TOff","off-state transition time for output",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","_SwitchSPST");
palette_group("Timed, Linear","Timed, Linear","_SwitchSPST");

create_item ("SwitchSPST","RF single pole, single throw switch",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SwitchSPST",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SwitchSPST",
	SPDesignAnnotFmt,
	"SYM_DSN_SwitchSPST",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","loss in dB for on state insterion loss",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Isolation","Isolation in dB for off state insterion loss",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("VThreshold","control voltage threshold",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("TOn","on-state transition time for output",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("TOff","off-state transition time for output",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","SwitchSPST");
palette_group("Timed, Linear","Timed, Linear","SwitchSPST");

create_item ("_SwitchSPDT","RF single pole, double throw switch",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SwitchSPDT",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSwitchSPDT_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SwitchSPDT",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss1","loss in dB for on state insterion loss for output 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Isolation1","isolation in dB for off state insterion loss for output 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("Loss2","loss in dB for on state insterion loss for output 2",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Isolation2","isolation in dB for off state insterion loss for output 2",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("VThreshold","control voltage threshold",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("TOn1","on state transition time for output 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("TOff1","off state transition time for output 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("TOn2","on state transition time for output 2",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("TOff2","off state transition time for output 2",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","_SwitchSPDT");
palette_group("Timed, Linear","Timed, Linear","_SwitchSPDT");

create_item ("SwitchSPDT","RF single pole, double throw switch",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SwitchSPDT",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SwitchSPDT",
	SPDesignAnnotFmt,
	"SYM_DSN_SwitchSPDT",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss1","loss in dB for on state insterion loss for output 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Isolation1","isolation in dB for off state insterion loss for output 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("Loss2","loss in dB for on state insterion loss for output 2",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Isolation2","isolation in dB for off state insterion loss for output 2",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("VThreshold","control voltage threshold",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("TOn1","on state transition time for output 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("TOff1","off state transition time for output 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("TOn2","on state transition time for output 2",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("TOff2","off state transition time for output 2",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","SwitchSPDT");
palette_group("Timed, Linear","Timed, Linear","SwitchSPDT");

create_constant_form ("_n_x5fSummerRF_fmin", 
	"min",
	0,
	"0",
	"min");
create_constant_form ("_n_x5fSummerRF_fcenter", 
	"center",
	0,
	"1",
	"center");
create_constant_form ("_n_x5fSummerRF_fmax", 
	"max",
	0,
	"2",
	"max");
create_form_set("_n_x5fSummerRF_fFcOutSet",
	"_n_x5fSummerRF_fmin",
	"_n_x5fSummerRF_fcenter",
	"_n_x5fSummerRF_fmax",
	"StdForm");
create_item ("_SummerRF","RF signal summer",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SummerRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSummerRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SummerRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FcOut","output characterization frequency",
		PARM_INT,
		"_n_x5fSummerRF_fFcOutSet",
		UNITLESS_UNIT,
		prm("_n_x5fSummerRF_fmax","max")));
library_group("Timed, Linear","Timed, Linear","_SummerRF");
palette_group("Timed, Linear","Timed, Linear","_SummerRF");

create_constant_form ("_nSummerRF_fmin", 
	"min",
	0,
	"0",
	"min");
create_constant_form ("_nSummerRF_fcenter", 
	"center",
	0,
	"1",
	"center");
create_constant_form ("_nSummerRF_fmax", 
	"max",
	0,
	"2",
	"max");
create_form_set("_nSummerRF_fFcOutSet",
	"_nSummerRF_fmin",
	"_nSummerRF_fcenter",
	"_nSummerRF_fmax",
	"StdForm");
create_item ("SummerRF","RF signal summer",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SummerRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SummerRF",
	SPDesignAnnotFmt,
	"SYM_DSN_SummerRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FcOut","output characterization frequency",
		PARM_INT,
		"_nSummerRF_fFcOutSet",
		UNITLESS_UNIT,
		prm("_nSummerRF_fmax","max")));
library_group("Timed, Linear","Timed, Linear","SummerRF");
palette_group("Timed, Linear","Timed, Linear","SummerRF");

create_item ("_SplitterRF","RF signal splitter",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SplitterRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSplitterRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SplitterRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")));
library_group("Timed, Linear","Timed, Linear","_SplitterRF");
palette_group("Timed, Linear","Timed, Linear","_SplitterRF");

create_item ("SplitterRF","RF signal splitter",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SplitterRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SplitterRF",
	SPDesignAnnotFmt,
	"SYM_DSN_SplitterRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")));
library_group("Timed, Linear","Timed, Linear","SplitterRF");
palette_group("Timed, Linear","Timed, Linear","SplitterRF");

create_item ("_Sinusoid","Sinusoid signal generator",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Sinusoid",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSinusoid_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Sinusoid",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("VPeak","peak voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("Frequency","sinusoid frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000.0")),
	create_parm ("Phase","phase angle in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DecayRatio","ratio of decay value at end to beginning of DurationTime, 0 = no decay, 1 = full decay; 0 <= DecayRatio <= 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Delay","turn-on time delay",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DurationTime","time duration for sinusoid on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("RepetitionInterval","repetition time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.002")));
library_group("Timed, Sources","Timed, Sources","_Sinusoid");
palette_group("Timed, Sources","Timed, Sources","_Sinusoid");

create_item ("Sinusoid","Sinusoid signal generator",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Sinusoid",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Sinusoid",
	SPDesignAnnotFmt,
	"SYM_DSN_Sinusoid",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("VPeak","peak voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("Frequency","sinusoid frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000.0")),
	create_parm ("Phase","phase angle in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DecayRatio","ratio of decay value at end to beginning of DurationTime, 0 = no decay, 1 = full decay; 0 <= DecayRatio <= 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Delay","turn-on time delay",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DurationTime","time duration for sinusoid on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("RepetitionInterval","repetition time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.002")));
library_group("Timed, Sources","Timed, Sources","Sinusoid");
palette_group("Timed, Sources","Timed, Sources","Sinusoid");

create_item ("_SampleAndHoldRF","Sample-and-Hold with RF clock",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SampleAndHoldRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSampleAndHoldRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SampleAndHoldRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("DroopRate","output voltage decay rate in fractional volts per second",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.1")));
library_group("Timed, Linear","Timed, Linear","_SampleAndHoldRF");
palette_group("Timed, Linear","Timed, Linear","_SampleAndHoldRF");

create_item ("SampleAndHoldRF","Sample-and-Hold with RF clock",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SampleAndHoldRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SampleAndHoldRF",
	SPDesignAnnotFmt,
	"SYM_DSN_SampleAndHoldRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("DroopRate","output voltage decay rate in fractional volts per second",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.1")));
library_group("Timed, Linear","Timed, Linear","SampleAndHoldRF");
palette_group("Timed, Linear","Timed, Linear","SampleAndHoldRF");

create_item ("_SampleAndHold","Sample and hold with output decay",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SampleAndHold",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSampleAndHold_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SampleAndHold",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("DroopRate","output voltage decay rate in fractional volts per second",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.1")));
library_group("Timed, Linear","Timed, Linear","_SampleAndHold");
palette_group("Timed, Linear","Timed, Linear","_SampleAndHold");

create_item ("SampleAndHold","Sample and hold with output decay",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SampleAndHold",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SampleAndHold",
	SPDesignAnnotFmt,
	"SYM_DSN_SampleAndHold",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("DroopRate","output voltage decay rate in fractional volts per second",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.1")));
library_group("Timed, Linear","Timed, Linear","SampleAndHold");
palette_group("Timed, Linear","Timed, Linear","SampleAndHold");

create_item ("_RxAntTempK","Add noise to input signal due to the receiver antenna temperature",
	"R",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_RxAntTempK",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fRxAntTempK_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_RxAntTempK",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("TempK","receiving antenna noise temperature, in Kelvin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","290")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","_RxAntTempK");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","_RxAntTempK");

create_item ("RxAntTempK","Add noise to input signal due to the receiver antenna temperature",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RxAntTempK",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RxAntTempK",
	SPDesignAnnotFmt,
	"SYM_DSN_RxAntTempK",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("TempK","receiving antenna noise temperature, in Kelvin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","290")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RxAntTempK");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RxAntTempK");

create_constant_form ("_n_x5fRF_x5fMirrorSignal_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fRF_x5fMirrorSignal_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fRF_x5fMirrorSignal_fMirrorSignalSet",
	"_n_x5fRF_x5fMirrorSignal_fNO",
	"_n_x5fRF_x5fMirrorSignal_fYES",
	"StdForm");
create_item ("_RF_MirrorSignal","RF mirror signal",
	"R",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_RF_MirrorSignal",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fRF_x5fMirrorSignal_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_RF_MirrorSignal",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("MirrorSignal","Mirror Signal?",
		PARM_INT,
		"_n_x5fRF_x5fMirrorSignal_fMirrorSignalSet",
		UNITLESS_UNIT,
		prm("_n_x5fRF_x5fMirrorSignal_fNO","NO")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","_RF_MirrorSignal");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","_RF_MirrorSignal");

create_constant_form ("_nRF_x5fMirrorSignal_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fMirrorSignal_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fMirrorSignal_fMirrorSignalSet",
	"_nRF_x5fMirrorSignal_fNO",
	"_nRF_x5fMirrorSignal_fYES",
	"StdForm");
create_item ("RF_MirrorSignal","RF mirror signal",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_MirrorSignal",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_MirrorSignal",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_MirrorSignal",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("MirrorSignal","Mirror Signal?",
		PARM_INT,
		"_nRF_x5fMirrorSignal_fMirrorSignalSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fMirrorSignal_fNO","NO")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_MirrorSignal");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_MirrorSignal");

create_constant_form ("_n_x5fRectifier_fFull_x5fwave_x5frectifier", 
	"Full wave rectifier",
	0,
	"0",
	"Full wave rectifier");
create_constant_form ("_n_x5fRectifier_fHalf_x5fwave_x5frectifier", 
	"Half wave rectifier",
	0,
	"1",
	"Half wave rectifier");
create_form_set("_n_x5fRectifier_fTypeSet",
	"_n_x5fRectifier_fFull_x5fwave_x5frectifier",
	"_n_x5fRectifier_fHalf_x5fwave_x5frectifier",
	"StdForm");
create_item ("_Rectifier","Signal rectifier",
	"R",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Rectifier",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fRectifier_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Rectifier",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Type","type of signal rectifier",
		PARM_INT,
		"_n_x5fRectifier_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fRectifier_fFull_x5fwave_x5frectifier","Full_wave_rectifier")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_Rectifier");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_Rectifier");

create_constant_form ("_nRectifier_fFull_x5fwave_x5frectifier", 
	"Full wave rectifier",
	0,
	"0",
	"Full wave rectifier");
create_constant_form ("_nRectifier_fHalf_x5fwave_x5frectifier", 
	"Half wave rectifier",
	0,
	"1",
	"Half wave rectifier");
create_form_set("_nRectifier_fTypeSet",
	"_nRectifier_fFull_x5fwave_x5frectifier",
	"_nRectifier_fHalf_x5fwave_x5frectifier",
	"StdForm");
create_item ("Rectifier","Signal rectifier",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Rectifier",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Rectifier",
	SPDesignAnnotFmt,
	"SYM_DSN_Rectifier",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Type","type of signal rectifier",
		PARM_INT,
		"_nRectifier_fTypeSet",
		UNITLESS_UNIT,
		prm("_nRectifier_fFull_x5fwave_x5frectifier","Full_wave_rectifier")));
library_group("Timed, Nonlinear","Timed, Nonlinear","Rectifier");
palette_group("Timed, Nonlinear","Timed, Nonlinear","Rectifier");

create_item ("_RateLimiter","Signal rate of change limiter",
	"R",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_RateLimiter",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fRateLimiter_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_RateLimiter",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RMax","maximum slew rate in volts per second",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_RateLimiter");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_RateLimiter");

create_item ("RateLimiter","Signal rate of change limiter",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RateLimiter",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RateLimiter",
	SPDesignAnnotFmt,
	"SYM_DSN_RateLimiter",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RMax","maximum slew rate in volts per second",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Nonlinear","Timed, Nonlinear","RateLimiter");
palette_group("Timed, Nonlinear","Timed, Nonlinear","RateLimiter");

create_constant_form ("_n_x5fRamp_fLinear_x5fRamp", 
	"Linear Ramp",
	0,
	"0",
	"Linear Ramp");
create_constant_form ("_n_x5fRamp_fPower_x5fRamp", 
	"Power Ramp",
	0,
	"1",
	"Power Ramp");
create_constant_form ("_n_x5fRamp_fExponential_x5fRamp", 
	"Exponential Ramp",
	0,
	"2",
	"Exponential Ramp");
create_form_set("_n_x5fRamp_fTypeSet",
	"_n_x5fRamp_fLinear_x5fRamp",
	"_n_x5fRamp_fPower_x5fRamp",
	"_n_x5fRamp_fExponential_x5fRamp",
	"StdForm");
create_item ("_Ramp","Baseband or RF ramp generator",
	"R",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Ramp",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fRamp_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Ramp",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VStart","start voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VFinal","final voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("VOff","off voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0.5")),
	create_parm ("Type","type of ramp",
		PARM_INT,
		"_n_x5fRamp_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fRamp_fLinear_x5fRamp","Linear_Ramp")),
	create_parm ("RampConstant","used for power and exponential type ramp",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Delay","time delay before turn-on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0005")),
	create_parm ("DurationTime","time duration for ramp-on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("RepetitionInterval","repetition time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.002")));
library_group("Timed, Sources","Timed, Sources","_Ramp");
palette_group("Timed, Sources","Timed, Sources","_Ramp");

create_constant_form ("_nRamp_fLinear_x5fRamp", 
	"Linear Ramp",
	0,
	"0",
	"Linear Ramp");
create_constant_form ("_nRamp_fPower_x5fRamp", 
	"Power Ramp",
	0,
	"1",
	"Power Ramp");
create_constant_form ("_nRamp_fExponential_x5fRamp", 
	"Exponential Ramp",
	0,
	"2",
	"Exponential Ramp");
create_form_set("_nRamp_fTypeSet",
	"_nRamp_fLinear_x5fRamp",
	"_nRamp_fPower_x5fRamp",
	"_nRamp_fExponential_x5fRamp",
	"StdForm");
create_item ("Ramp","Baseband or RF ramp generator",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Ramp",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Ramp",
	SPDesignAnnotFmt,
	"SYM_DSN_Ramp",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VStart","start voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VFinal","final voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("VOff","off voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0.5")),
	create_parm ("Type","type of ramp",
		PARM_INT,
		"_nRamp_fTypeSet",
		UNITLESS_UNIT,
		prm("_nRamp_fLinear_x5fRamp","Linear_Ramp")),
	create_parm ("RampConstant","used for power and exponential type ramp",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Delay","time delay before turn-on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0005")),
	create_parm ("DurationTime","time duration for ramp-on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("RepetitionInterval","repetition time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.002")));
library_group("Timed, Sources","Timed, Sources","Ramp");
palette_group("Timed, Sources","Timed, Sources","Ramp");

create_item ("_RFtoCWRF","CW RF signal derived from input RF carrier frequency",
	"R",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_RFtoCWRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fRFtoCWRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_RFtoCWRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Amplitude","envelope voltage amplitude of output continuous wave (CW) RF signal",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Linear","Timed, Linear","_RFtoCWRF");
palette_group("Timed, Linear","Timed, Linear","_RFtoCWRF");

create_item ("RFtoCWRF","CW RF signal derived from input RF carrier frequency",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RFtoCWRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RFtoCWRF",
	SPDesignAnnotFmt,
	"SYM_DSN_RFtoCWRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Amplitude","envelope voltage amplitude of output continuous wave (CW) RF signal",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Linear","Timed, Linear","RFtoCWRF");
palette_group("Timed, Linear","Timed, Linear","RFtoCWRF");

create_item ("_QAM_Mod","Quadrature amplitude modulator with internal oscillator",
	"Q",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_QAM_Mod",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fQAM_x5fMod_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_QAM_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("VRef","modulator voltage reference level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")),
	create_parm ("GainImbalance","gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PhaseImbalance","phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","_QAM_Mod");
palette_group("Timed, Modem","Timed, Modem","_QAM_Mod");

create_item ("QAM_Mod","Quadrature amplitude modulator with internal oscillator",
	"Q",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_QAM_Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"QAM_Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_QAM_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("VRef","modulator voltage reference level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")),
	create_parm ("GainImbalance","gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PhaseImbalance","phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","QAM_Mod");
palette_group("Timed, Modem","Timed, Modem","QAM_Mod");

create_item ("_QAM_DemodExtOsc","Quadrature amplitude demodulator with external reference oscillator",
	"Q",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_QAM_DemodExtOsc",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fQAM_x5fDemodExtOsc_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_QAM_DemodExtOsc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("GainImbalance","gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PhaseImbalance","phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","_QAM_DemodExtOsc");
palette_group("Timed, Modem","Timed, Modem","_QAM_DemodExtOsc");

create_item ("QAM_DemodExtOsc","Quadrature amplitude demodulator with external reference oscillator",
	"Q",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_QAM_DemodExtOsc",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"QAM_DemodExtOsc",
	SPDesignAnnotFmt,
	"SYM_DSN_QAM_DemodExtOsc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("GainImbalance","gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PhaseImbalance","phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","QAM_DemodExtOsc");
palette_group("Timed, Modem","Timed, Modem","QAM_DemodExtOsc");

create_item ("_QAM_Demod","Quadrature amplitude demodulator with internal oscillator",
	"Q",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_QAM_Demod",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fQAM_x5fDemod_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_QAM_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("Phase","reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("GainImbalance","gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Modem","Timed, Modem","_QAM_Demod");
palette_group("Timed, Modem","Timed, Modem","_QAM_Demod");

create_item ("QAM_Demod","Quadrature amplitude demodulator with internal oscillator",
	"Q",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_QAM_Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"QAM_Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_QAM_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("Phase","reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("GainImbalance","gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Modem","Timed, Modem","QAM_Demod");
palette_group("Timed, Modem","Timed, Modem","QAM_Demod");

create_item ("_QAM","Quadrature amplitude modulated carrier with single I and Q modulating tones",
	"Q",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_QAM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fQAM_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_QAM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Phase","unmodulated carrier phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VRef","modulator voltage reference level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("FSignalI","I envelope modulation frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")),
	create_parm ("VPeakI","I envelope peak modulation voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("FSignalQ","Q envelope modulation frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2000")),
	create_parm ("VPeakQ","Q envelope peak modulation voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Sources","Timed, Sources","_QAM");
palette_group("Timed, Sources","Timed, Sources","_QAM");

create_item ("QAM","Quadrature amplitude modulated carrier with single I and Q modulating tones",
	"Q",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_QAM",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"QAM",
	SPDesignAnnotFmt,
	"SYM_DSN_QAM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Phase","unmodulated carrier phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VRef","modulator voltage reference level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("FSignalI","I envelope modulation frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")),
	create_parm ("VPeakI","I envelope peak modulation voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("FSignalQ","Q envelope modulation frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2000")),
	create_parm ("VPeakQ","Q envelope peak modulation voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Sources","Timed, Sources","QAM");
palette_group("Timed, Sources","Timed, Sources","QAM");

create_item ("_PulseRF","Pulsed RF signal generator",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_PulseRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPulseRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_PulseRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("PeakPower","peak power level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Phase","unmodulated carrier phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PulsePeriod","pulse period",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.002")),
	create_parm ("PulseWidth","pulse width (between 50% levels)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","time delay before turn on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("OnOffRatio","on/off ratio, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","200")),
	create_parm ("RiseTime","pulse rise time (between 10% and 90% levels)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.00016")),
	create_parm ("FallTime","pulse fall time (between 90% and 10% levels)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.00016")));
library_group("Timed, Sources","Timed, Sources","_PulseRF");
palette_group("Timed, Sources","Timed, Sources","_PulseRF");

create_item ("PulseRF","Pulsed RF signal generator",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PulseRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PulseRF",
	SPDesignAnnotFmt,
	"SYM_DSN_PulseRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("PeakPower","peak power level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Phase","unmodulated carrier phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PulsePeriod","pulse period",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.002")),
	create_parm ("PulseWidth","pulse width (between 50% levels)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","time delay before turn on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("OnOffRatio","on/off ratio, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","200")),
	create_parm ("RiseTime","pulse rise time (between 10% and 90% levels)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.00016")),
	create_parm ("FallTime","pulse fall time (between 90% and 10% levels)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.00016")));
library_group("Timed, Sources","Timed, Sources","PulseRF");
palette_group("Timed, Sources","Timed, Sources","PulseRF");

create_item ("_Pulse","Baseband or RF pulse generator",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Pulse",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPulse_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Pulse",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VStart","start voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VPlateau","plateau voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("VStop","modulator reference voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Delay","time delay before turn-on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0005")),
	create_parm ("LeadingEdgeTime","time interval from VStart to VPlateau",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0002")),
	create_parm ("PlateauTime","time interval at VPlateau level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0006")),
	create_parm ("TrailingEdgeTime","time interval from VPlateau to VStop",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0002")),
	create_parm ("RepetitionInterval","repetition time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")));
library_group("Timed, Sources","Timed, Sources","_Pulse");
palette_group("Timed, Sources","Timed, Sources","_Pulse");

create_item ("Pulse","Baseband or RF pulse generator",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Pulse",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Pulse",
	SPDesignAnnotFmt,
	"SYM_DSN_Pulse",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VStart","start voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VPlateau","plateau voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("VStop","modulator reference voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Delay","time delay before turn-on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0005")),
	create_parm ("LeadingEdgeTime","time interval from VStart to VPlateau",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0002")),
	create_parm ("PlateauTime","time interval at VPlateau level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0006")),
	create_parm ("TrailingEdgeTime","time interval from VPlateau to VStop",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0002")),
	create_parm ("RepetitionInterval","repetition time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")));
library_group("Timed, Sources","Timed, Sources","Pulse");
palette_group("Timed, Sources","Timed, Sources","Pulse");

create_item ("_PhaseShiftRF","RF phase shifter continuously interpolated between time steps",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_PhaseShiftRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPhaseShiftRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_PhaseShiftRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("PhaseShift","phase shift angle in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","_PhaseShiftRF");
palette_group("Timed, Linear","Timed, Linear","_PhaseShiftRF");

create_item ("PhaseShiftRF","RF phase shifter continuously interpolated between time steps",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PhaseShiftRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PhaseShiftRF",
	SPDesignAnnotFmt,
	"SYM_DSN_PhaseShiftRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("PhaseShift","phase shift angle in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","PhaseShiftRF");
palette_group("Timed, Linear","Timed, Linear","PhaseShiftRF");

create_item ("_PhaseFreqCompXOR","Phase/frequency comparator, exclusive OR type",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_PhaseFreqCompXOR",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPhaseFreqCompXOR_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_PhaseFreqCompXOR",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("LoLevel","low voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")),
	create_parm ("HiLevel","high voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_PhaseFreqCompXOR");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_PhaseFreqCompXOR");

create_item ("PhaseFreqCompXOR","Phase/frequency comparator, exclusive OR type",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PhaseFreqCompXOR",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PhaseFreqCompXOR",
	SPDesignAnnotFmt,
	"SYM_DSN_PhaseFreqCompXOR",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("LoLevel","low voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")),
	create_parm ("HiLevel","high voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")));
library_group("Timed, Nonlinear","Timed, Nonlinear","PhaseFreqCompXOR");
palette_group("Timed, Nonlinear","Timed, Nonlinear","PhaseFreqCompXOR");

create_item ("_PhaseFreqComp","Phase/frequency comparator, digital 3-state type",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_PhaseFreqComp",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPhaseFreqComp_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_PhaseFreqComp",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("LoLevel","low voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","-1")),
	create_parm ("HiLevel","high voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("UnLockR","internal phase detector output resistance level when not phase locked",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("LockR","internal phase detector output impedance level when phase locked",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","1000000")),
	create_parm ("FilterR1","internal lowpass filter series resistor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","2.17")),
	create_parm ("FilterR2","internal lowpass filter shunt resistor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","1.83")),
	create_parm ("FilterC","internal lowpass filter shunt capacitor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		CAPACITANCE_UNIT,
		prm("StdForm","0.000000000001")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_PhaseFreqComp");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_PhaseFreqComp");

create_item ("PhaseFreqComp","Phase/frequency comparator, digital 3-state type",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PhaseFreqComp",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PhaseFreqComp",
	SPDesignAnnotFmt,
	"SYM_DSN_PhaseFreqComp",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("LoLevel","low voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","-1")),
	create_parm ("HiLevel","high voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("UnLockR","internal phase detector output resistance level when not phase locked",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("LockR","internal phase detector output impedance level when phase locked",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","1000000")),
	create_parm ("FilterR1","internal lowpass filter series resistor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","2.17")),
	create_parm ("FilterR2","internal lowpass filter shunt resistor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","1.83")),
	create_parm ("FilterC","internal lowpass filter shunt capacitor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		CAPACITANCE_UNIT,
		prm("StdForm","0.000000000001")));
library_group("Timed, Nonlinear","Timed, Nonlinear","PhaseFreqComp");
palette_group("Timed, Nonlinear","Timed, Nonlinear","PhaseFreqComp");

create_constant_form ("_n_x5fPhaseCompRF_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_n_x5fPhaseCompRF_fSinusoidal", 
	"Sinusoidal",
	0,
	"1",
	"Sinusoidal");
create_constant_form ("_n_x5fPhaseCompRF_fTringular", 
	"Tringular",
	0,
	"2",
	"Tringular");
create_form_set("_n_x5fPhaseCompRF_fPhaseCharacteristicTypeSet",
	"_n_x5fPhaseCompRF_fLinear",
	"_n_x5fPhaseCompRF_fSinusoidal",
	"_n_x5fPhaseCompRF_fTringular",
	"StdForm");
create_item ("_PhaseCompRF","RF phase comparator",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_PhaseCompRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPhaseCompRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_PhaseCompRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("PhaseCharacteristicType","type of analog phase comparator",
		PARM_INT,
		"_n_x5fPhaseCompRF_fPhaseCharacteristicTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fPhaseCompRF_fLinear","Linear")),
	create_parm ("GainConstant","small signal gain constant, in volts per degree",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_PhaseCompRF");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_PhaseCompRF");

create_constant_form ("_nPhaseCompRF_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_nPhaseCompRF_fSinusoidal", 
	"Sinusoidal",
	0,
	"1",
	"Sinusoidal");
create_constant_form ("_nPhaseCompRF_fTringular", 
	"Tringular",
	0,
	"2",
	"Tringular");
create_form_set("_nPhaseCompRF_fPhaseCharacteristicTypeSet",
	"_nPhaseCompRF_fLinear",
	"_nPhaseCompRF_fSinusoidal",
	"_nPhaseCompRF_fTringular",
	"StdForm");
create_item ("PhaseCompRF","RF phase comparator",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PhaseCompRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PhaseCompRF",
	SPDesignAnnotFmt,
	"SYM_DSN_PhaseCompRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("PhaseCharacteristicType","type of analog phase comparator",
		PARM_INT,
		"_nPhaseCompRF_fPhaseCharacteristicTypeSet",
		UNITLESS_UNIT,
		prm("_nPhaseCompRF_fLinear","Linear")),
	create_parm ("GainConstant","small signal gain constant, in volts per degree",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Nonlinear","Timed, Nonlinear","PhaseCompRF");
palette_group("Timed, Nonlinear","Timed, Nonlinear","PhaseCompRF");

create_item ("_PeakDetector","Peak RF detector",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_PeakDetector",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPeakDetector_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_PeakDetector",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("DroopRate","output voltage decay rate in fractional volts per second",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.1")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_PeakDetector");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_PeakDetector");

create_item ("PeakDetector","Peak RF detector",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PeakDetector",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PeakDetector",
	SPDesignAnnotFmt,
	"SYM_DSN_PeakDetector",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("DroopRate","output voltage decay rate in fractional volts per second",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.1")));
library_group("Timed, Nonlinear","Timed, Nonlinear","PeakDetector");
palette_group("Timed, Nonlinear","Timed, Nonlinear","PeakDetector");

create_item ("_PM_Mod","Phase modulator with internal oscillator",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_PM_Mod",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPM_x5fMod_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_PM_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Sensitivity","phase deviation sensitivity, in degrees/volt",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","phase reference in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","_PM_Mod");
palette_group("Timed, Modem","Timed, Modem","_PM_Mod");

create_item ("PM_Mod","Phase modulator with internal oscillator",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PM_Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PM_Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_PM_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Sensitivity","phase deviation sensitivity, in degrees/volt",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","phase reference in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","PM_Mod");
palette_group("Timed, Modem","Timed, Modem","PM_Mod");

create_item ("_PM_DemodExtOsc","Phase demodulator with external reference oscillator",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_PM_DemodExtOsc",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPM_x5fDemodExtOsc_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_PM_DemodExtOsc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/degree",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Modem","Timed, Modem","_PM_DemodExtOsc");
palette_group("Timed, Modem","Timed, Modem","_PM_DemodExtOsc");

create_item ("PM_DemodExtOsc","Phase demodulator with external reference oscillator",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PM_DemodExtOsc",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PM_DemodExtOsc",
	SPDesignAnnotFmt,
	"SYM_DSN_PM_DemodExtOsc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/degree",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Modem","Timed, Modem","PM_DemodExtOsc");
palette_group("Timed, Modem","Timed, Modem","PM_DemodExtOsc");

create_item ("_PM_Demod","phase demodulator with internal oscillator",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_PM_Demod",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPM_x5fDemod_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_PM_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/degree",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","phase reference in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","_PM_Demod");
palette_group("Timed, Modem","Timed, Modem","_PM_Demod");

create_item ("PM_Demod","phase demodulator with internal oscillator",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PM_Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PM_Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_PM_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/degree",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","phase reference in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","PM_Demod");
palette_group("Timed, Modem","Timed, Modem","PM_Demod");

create_item ("_PM","Phase modulated carrier with single modulating tone",
	"P",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_PM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fPM_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_PM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Phase","unmodulated carrier phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Sensitivity","modulator sensitivity in radians/V",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","pi/4")),
	create_parm ("FSignal","modulation signal frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")),
	create_parm ("VPeak","peak modulation voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Sources","Timed, Sources","_PM");
palette_group("Timed, Sources","Timed, Sources","_PM");

create_item ("PM","Phase modulated carrier with single modulating tone",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PM",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PM",
	SPDesignAnnotFmt,
	"SYM_DSN_PM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Phase","unmodulated carrier phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Sensitivity","modulator sensitivity in radians/V",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","pi/4")),
	create_parm ("FSignal","modulation signal frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")),
	create_parm ("VPeak","peak modulation voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Sources","Timed, Sources","PM");
palette_group("Timed, Sources","Timed, Sources","PM");

create_item ("_NoiseFMask","Noise generator with frequency domain mask specification",
	"N",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_NoiseFMask",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fNoiseFMask_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_NoiseFMask",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("NoiseMask","noise specification defined with pairs of values for frequency (Hz), noise level (dBm/Hz)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("ResBW","resolution frequency bandwidth for noise spectrum",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1.0 MHz")));
library_group("Timed, Sources","Timed, Sources","_NoiseFMask");
palette_group("Timed, Sources","Timed, Sources","_NoiseFMask");

create_item ("NoiseFMask","Noise generator with frequency domain mask specification",
	"N",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_NoiseFMask",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"NoiseFMask",
	SPDesignAnnotFmt,
	"SYM_DSN_NoiseFMask",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("NoiseMask","noise specification defined with pairs of values for frequency (Hz), noise level (dBm/Hz)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("ResBW","resolution frequency bandwidth for noise spectrum",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1.0 MHz")));
library_group("Timed, Sources","Timed, Sources","NoiseFMask");
palette_group("Timed, Sources","Timed, Sources","NoiseFMask");

create_constant_form ("_n_x5fNoise_fUniform_x5fPDF", 
	"Uniform PDF",
	0,
	"0",
	"Uniform PDF");
create_constant_form ("_n_x5fNoise_fGaussian_x5fPDF", 
	"Gaussian PDF",
	0,
	"1",
	"Gaussian PDF");
create_constant_form ("_n_x5fNoise_fRayleigh_x5fPDF", 
	"Rayleigh PDF",
	0,
	"2",
	"Rayleigh PDF");
create_constant_form ("_n_x5fNoise_fLogNormal_x5fPDF", 
	"LogNormal PDF",
	0,
	"3",
	"LogNormal PDF");
create_constant_form ("_n_x5fNoise_fExponential_x5fPDF", 
	"Exponential PDF",
	0,
	"4",
	"Exponential PDF");
create_constant_form ("_n_x5fNoise_fWeibull_x5fPDF", 
	"Weibull PDF",
	0,
	"5",
	"Weibull PDF");
create_constant_form ("_n_x5fNoise_fChiSquared_x5fPDF", 
	"ChiSquared PDF",
	0,
	"6",
	"ChiSquared PDF");
create_constant_form ("_n_x5fNoise_fGamma_x5fPDF", 
	"Gamma PDF",
	0,
	"7",
	"Gamma PDF");
create_constant_form ("_n_x5fNoise_fBeta_x5fPDF", 
	"Beta PDF",
	0,
	"8",
	"Beta PDF");
create_constant_form ("_n_x5fNoise_fF_x5fPDF", 
	"F PDF",
	0,
	"9",
	"F PDF");
create_constant_form ("_n_x5fNoise_fBinomial_x5fCDF", 
	"Binomial CDF",
	0,
	"10",
	"Binomial CDF");
create_constant_form ("_n_x5fNoise_fPoisson_x5fCDF", 
	"Poisson CDF",
	0,
	"11",
	"Poisson CDF");
create_form_set("_n_x5fNoise_fTypeSet",
	"_n_x5fNoise_fUniform_x5fPDF",
	"_n_x5fNoise_fGaussian_x5fPDF",
	"_n_x5fNoise_fRayleigh_x5fPDF",
	"_n_x5fNoise_fLogNormal_x5fPDF",
	"_n_x5fNoise_fExponential_x5fPDF",
	"_n_x5fNoise_fWeibull_x5fPDF",
	"_n_x5fNoise_fChiSquared_x5fPDF",
	"_n_x5fNoise_fGamma_x5fPDF",
	"_n_x5fNoise_fBeta_x5fPDF",
	"_n_x5fNoise_fF_x5fPDF",
	"_n_x5fNoise_fBinomial_x5fCDF",
	"_n_x5fNoise_fPoisson_x5fCDF",
	"StdForm");
create_item ("_Noise","Baseband or RF noise generator",
	"N",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Noise",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fNoise_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Noise",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("Type","Noise probability density or Cumulative distribution cdf function",
		PARM_INT,
		"_n_x5fNoise_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fNoise_fGaussian_x5fPDF","Gaussian_PDF")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VA","Voltage value dependent on Type",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("VB","Voltage value dependent on Type",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("Delay","Time delay before turn on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DurationTime","Time duration for noise on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1")),
	create_parm ("RepetitionInterval","Repetition interval for noise to turn back on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm",".002")));
library_group("Timed, Sources","Timed, Sources","_Noise");
palette_group("Timed, Sources","Timed, Sources","_Noise");

create_constant_form ("_nNoise_fUniform_x5fPDF", 
	"Uniform PDF",
	0,
	"0",
	"Uniform PDF");
create_constant_form ("_nNoise_fGaussian_x5fPDF", 
	"Gaussian PDF",
	0,
	"1",
	"Gaussian PDF");
create_constant_form ("_nNoise_fRayleigh_x5fPDF", 
	"Rayleigh PDF",
	0,
	"2",
	"Rayleigh PDF");
create_constant_form ("_nNoise_fLogNormal_x5fPDF", 
	"LogNormal PDF",
	0,
	"3",
	"LogNormal PDF");
create_constant_form ("_nNoise_fExponential_x5fPDF", 
	"Exponential PDF",
	0,
	"4",
	"Exponential PDF");
create_constant_form ("_nNoise_fWeibull_x5fPDF", 
	"Weibull PDF",
	0,
	"5",
	"Weibull PDF");
create_constant_form ("_nNoise_fChiSquared_x5fPDF", 
	"ChiSquared PDF",
	0,
	"6",
	"ChiSquared PDF");
create_constant_form ("_nNoise_fGamma_x5fPDF", 
	"Gamma PDF",
	0,
	"7",
	"Gamma PDF");
create_constant_form ("_nNoise_fBeta_x5fPDF", 
	"Beta PDF",
	0,
	"8",
	"Beta PDF");
create_constant_form ("_nNoise_fF_x5fPDF", 
	"F PDF",
	0,
	"9",
	"F PDF");
create_constant_form ("_nNoise_fBinomial_x5fCDF", 
	"Binomial CDF",
	0,
	"10",
	"Binomial CDF");
create_constant_form ("_nNoise_fPoisson_x5fCDF", 
	"Poisson CDF",
	0,
	"11",
	"Poisson CDF");
create_form_set("_nNoise_fTypeSet",
	"_nNoise_fUniform_x5fPDF",
	"_nNoise_fGaussian_x5fPDF",
	"_nNoise_fRayleigh_x5fPDF",
	"_nNoise_fLogNormal_x5fPDF",
	"_nNoise_fExponential_x5fPDF",
	"_nNoise_fWeibull_x5fPDF",
	"_nNoise_fChiSquared_x5fPDF",
	"_nNoise_fGamma_x5fPDF",
	"_nNoise_fBeta_x5fPDF",
	"_nNoise_fF_x5fPDF",
	"_nNoise_fBinomial_x5fCDF",
	"_nNoise_fPoisson_x5fCDF",
	"StdForm");
create_item ("Noise","Baseband or RF noise generator",
	"N",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Noise",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Noise",
	SPDesignAnnotFmt,
	"SYM_DSN_Noise",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("Type","Noise probability density or Cumulative distribution cdf function",
		PARM_INT,
		"_nNoise_fTypeSet",
		UNITLESS_UNIT,
		prm("_nNoise_fGaussian_x5fPDF","Gaussian_PDF")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VA","Voltage value dependent on Type",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("VB","Voltage value dependent on Type",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("Delay","Time delay before turn on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DurationTime","Time duration for noise on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1")),
	create_parm ("RepetitionInterval","Repetition interval for noise to turn back on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm",".002")));
library_group("Timed, Sources","Timed, Sources","Noise");
palette_group("Timed, Sources","Timed, Sources","Noise");

create_constant_form ("_n_x5fN_x5fTones_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_n_x5fN_x5fTones_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_n_x5fN_x5fTones_fRandomPhaseSet",
	"_n_x5fN_x5fTones_fNo",
	"_n_x5fN_x5fTones_fYes",
	"StdForm");
create_constant_form ("_n_x5fN_x5fTones_fRandom_x5fPN", 
	"Random PN",
	0,
	"0",
	"Random PN");
create_constant_form ("_n_x5fN_x5fTones_fFixed_x5ffreq_x5foffset", 
	"Fixed freq offset",
	0,
	"1",
	"Fixed freq offset");
create_constant_form ("_n_x5fN_x5fTones_fFixed_x5ffreq_x5foffset_x5fand_x5famplitude", 
	"Fixed freq offset and amplitude",
	0,
	"2",
	"Fixed freq offset and amplitude");
create_form_set("_n_x5fN_x5fTones_fPN_x5fTypeSet",
	"_n_x5fN_x5fTones_fRandom_x5fPN",
	"_n_x5fN_x5fTones_fFixed_x5ffreq_x5foffset",
	"_n_x5fN_x5fTones_fFixed_x5ffreq_x5foffset_x5fand_x5famplitude",
	"StdForm");
create_item ("_N_Tones","RF tones generator",
	"N",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_N_Tones",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fN_x5fTones_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_N_Tones",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("Frequency1","first RF tone frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","999999")),
	create_parm ("Power1","first RF tone carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm",".010")),
	create_parm ("Phase1","first RF tone carrier phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("AdditionalTones","list of additional RF tones defined with triple values for frequency (Hz), power (watts), phase (degrees)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("RandomPhase","set phase of RF tones to random uniformly distributed value between -PI and +PI",
		PARM_INT,
		"_n_x5fN_x5fTones_fRandomPhaseSet",
		UNITLESS_UNIT,
		prm("_n_x5fN_x5fTones_fNo","No")),
	create_parm ("PhaseNoiseData","phase noise specification defined with pairs of values for offset frequency (Hz), signal sideband pnase noise level (dBc/Hz)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("PN_Type","Phase noise model type with random or fixed offset freq spacing and amplitude",
		PARM_INT,
		"_n_x5fN_x5fTones_fPN_x5fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fN_x5fTones_fRandom_x5fPN","Random_PN")));
library_group("Timed, Sources","Timed, Sources","_N_Tones");
palette_group("Timed, Sources","Timed, Sources","_N_Tones");

create_constant_form ("_nN_x5fTones_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_nN_x5fTones_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_nN_x5fTones_fRandomPhaseSet",
	"_nN_x5fTones_fNo",
	"_nN_x5fTones_fYes",
	"StdForm");
create_constant_form ("_nN_x5fTones_fRandom_x5fPN", 
	"Random PN",
	0,
	"0",
	"Random PN");
create_constant_form ("_nN_x5fTones_fFixed_x5ffreq_x5foffset", 
	"Fixed freq offset",
	0,
	"1",
	"Fixed freq offset");
create_constant_form ("_nN_x5fTones_fFixed_x5ffreq_x5foffset_x5fand_x5famplitude", 
	"Fixed freq offset and amplitude",
	0,
	"2",
	"Fixed freq offset and amplitude");
create_form_set("_nN_x5fTones_fPN_x5fTypeSet",
	"_nN_x5fTones_fRandom_x5fPN",
	"_nN_x5fTones_fFixed_x5ffreq_x5foffset",
	"_nN_x5fTones_fFixed_x5ffreq_x5foffset_x5fand_x5famplitude",
	"StdForm");
create_item ("N_Tones","RF tones generator",
	"N",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_N_Tones",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"N_Tones",
	SPDesignAnnotFmt,
	"SYM_DSN_N_Tones",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("Frequency1","first RF tone frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","999999")),
	create_parm ("Power1","first RF tone carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm",".010")),
	create_parm ("Phase1","first RF tone carrier phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("AdditionalTones","list of additional RF tones defined with triple values for frequency (Hz), power (watts), phase (degrees)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("RandomPhase","set phase of RF tones to random uniformly distributed value between -PI and +PI",
		PARM_INT,
		"_nN_x5fTones_fRandomPhaseSet",
		UNITLESS_UNIT,
		prm("_nN_x5fTones_fNo","No")),
	create_parm ("PhaseNoiseData","phase noise specification defined with pairs of values for offset frequency (Hz), signal sideband pnase noise level (dBc/Hz)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("PN_Type","Phase noise model type with random or fixed offset freq spacing and amplitude",
		PARM_INT,
		"_nN_x5fTones_fPN_x5fTypeSet",
		UNITLESS_UNIT,
		prm("_nN_x5fTones_fRandom_x5fPN","Random_PN")));
library_group("Timed, Sources","Timed, Sources","N_Tones");
palette_group("Timed, Sources","Timed, Sources","N_Tones");

create_constant_form ("_n_x5fMultiplierRF_fF1_x5fF2_x5fUpper_x5fsideband", 
	"F1+F2 Upper sideband",
	0,
	"0",
	"F1+F2");
create_constant_form ("_n_x5fMultiplierRF_fF1_x5fF2_x5fLower_x5fsideband", 
	"F1-F2 Lower sideband",
	0,
	"1",
	"F1-F2");
create_constant_form ("_n_x5fMultiplierRF_fBoth_x5fsidebands", 
	"Both sidebands",
	0,
	"2",
	"Both");
create_form_set("_n_x5fMultiplierRF_fTypeSet",
	"_n_x5fMultiplierRF_fF1_x5fF2_x5fUpper_x5fsideband",
	"_n_x5fMultiplierRF_fF1_x5fF2_x5fLower_x5fsideband",
	"_n_x5fMultiplierRF_fBoth_x5fsidebands",
	"StdForm");
create_item ("_MultiplierRF","Two-input RF signal multiplier",
	"M",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_MultiplierRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fMultiplierRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_MultiplierRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Type","selected multiplication product",
		PARM_INT,
		"_n_x5fMultiplierRF_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fMultiplierRF_fF1_x5fF2_x5fUpper_x5fsideband","F1_F2_Upper_sideband")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_MultiplierRF");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_MultiplierRF");

create_constant_form ("_nMultiplierRF_fF1_x5fF2_x5fUpper_x5fsideband", 
	"F1+F2 Upper sideband",
	0,
	"0",
	"F1+F2");
create_constant_form ("_nMultiplierRF_fF1_x5fF2_x5fLower_x5fsideband", 
	"F1-F2 Lower sideband",
	0,
	"1",
	"F1-F2");
create_constant_form ("_nMultiplierRF_fBoth_x5fsidebands", 
	"Both sidebands",
	0,
	"2",
	"Both");
create_form_set("_nMultiplierRF_fTypeSet",
	"_nMultiplierRF_fF1_x5fF2_x5fUpper_x5fsideband",
	"_nMultiplierRF_fF1_x5fF2_x5fLower_x5fsideband",
	"_nMultiplierRF_fBoth_x5fsidebands",
	"StdForm");
create_item ("MultiplierRF","Two-input RF signal multiplier",
	"M",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_MultiplierRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"MultiplierRF",
	SPDesignAnnotFmt,
	"SYM_DSN_MultiplierRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Type","selected multiplication product",
		PARM_INT,
		"_nMultiplierRF_fTypeSet",
		UNITLESS_UNIT,
		prm("_nMultiplierRF_fF1_x5fF2_x5fUpper_x5fsideband","F1_F2_Upper_sideband")));
library_group("Timed, Nonlinear","Timed, Nonlinear","MultiplierRF");
palette_group("Timed, Nonlinear","Timed, Nonlinear","MultiplierRF");

create_constant_form ("_n_x5fMixerRF_fRF_x5fplus_x5fLO", 
	"RF plus LO",
	0,
	"0",
	"RF plus LO");
create_constant_form ("_n_x5fMixerRF_fRF_x5fminus_x5fLO", 
	"RF minus LO",
	0,
	"1",
	"RF minus LO");
create_constant_form ("_n_x5fMixerRF_fLO_x5fminus_x5fRF", 
	"LO minus RF",
	0,
	"2",
	"LO minus RF");
create_form_set("_n_x5fMixerRF_fTypeSet",
	"_n_x5fMixerRF_fRF_x5fplus_x5fLO",
	"_n_x5fMixerRF_fRF_x5fminus_x5fLO",
	"_n_x5fMixerRF_fLO_x5fminus_x5fRF",
	"StdForm");
create_item ("_MixerRF","Complex single sideband mixer with RF and LO inputs",
	"M",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_MixerRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fMixerRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_MixerRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("NoiseFigure","input noise figure, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Type","single sideband mixer type",
		PARM_INT,
		"_n_x5fMixerRF_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fMixerRF_fRF_x5fplus_x5fLO","RF_plus_LO")),
	create_parm ("RfRej","RF to IF rejection in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("ImRej","Image rejection in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("LoRej","LO rejection in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("LComp","array of triple values for LO power (in dBm) vs gain change from small signal (in dB) and phase change from small signal (in degrees)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\" 0 0  0\"")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_MixerRF");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_MixerRF");

create_constant_form ("_nMixerRF_fRF_x5fplus_x5fLO", 
	"RF plus LO",
	0,
	"0",
	"RF plus LO");
create_constant_form ("_nMixerRF_fRF_x5fminus_x5fLO", 
	"RF minus LO",
	0,
	"1",
	"RF minus LO");
create_constant_form ("_nMixerRF_fLO_x5fminus_x5fRF", 
	"LO minus RF",
	0,
	"2",
	"LO minus RF");
create_form_set("_nMixerRF_fTypeSet",
	"_nMixerRF_fRF_x5fplus_x5fLO",
	"_nMixerRF_fRF_x5fminus_x5fLO",
	"_nMixerRF_fLO_x5fminus_x5fRF",
	"StdForm");
create_item ("MixerRF","Complex single sideband mixer with RF and LO inputs",
	"M",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_MixerRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"MixerRF",
	SPDesignAnnotFmt,
	"SYM_DSN_MixerRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("NoiseFigure","input noise figure, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Type","single sideband mixer type",
		PARM_INT,
		"_nMixerRF_fTypeSet",
		UNITLESS_UNIT,
		prm("_nMixerRF_fRF_x5fplus_x5fLO","RF_plus_LO")),
	create_parm ("RfRej","RF to IF rejection in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("ImRej","Image rejection in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("LoRej","LO rejection in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-200")),
	create_parm ("LComp","array of triple values for LO power (in dBm) vs gain change from small signal (in dB) and phase change from small signal (in degrees)",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\" 0 0  0\"")));
library_group("Timed, Nonlinear","Timed, Nonlinear","MixerRF");
palette_group("Timed, Nonlinear","Timed, Nonlinear","MixerRF");

create_item ("_MatchedLoss","Power loss referenced to matched source and load resistors",
	"M",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_MatchedLoss",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fMatchedLoss_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_MatchedLoss",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Linear","Timed, Linear","_MatchedLoss");
palette_group("Timed, Linear","Timed, Linear","_MatchedLoss");

create_item ("MatchedLoss","Power loss referenced to matched source and load resistors",
	"M",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_MatchedLoss",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"MatchedLoss",
	SPDesignAnnotFmt,
	"SYM_DSN_MatchedLoss",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Linear","Timed, Linear","MatchedLoss");
palette_group("Timed, Linear","Timed, Linear","MatchedLoss");

create_item ("_LogVDet","Logarithmic video detector",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LogVDet",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLogVDet_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_LogVDet",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","log sensitivity, in volts/dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")),
	create_parm ("PMin","minimum input power, in dBm, for logarithmic amplification",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-80")),
	create_parm ("E","peak log error, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Ec","log error cycle, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_LogVDet");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_LogVDet");

create_item ("LogVDet","Logarithmic video detector",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LogVDet",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LogVDet",
	SPDesignAnnotFmt,
	"SYM_DSN_LogVDet",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","log sensitivity, in volts/dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")),
	create_parm ("PMin","minimum input power, in dBm, for logarithmic amplification",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-80")),
	create_parm ("E","peak log error, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Ec","log error cycle, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Nonlinear","Timed, Nonlinear","LogVDet");
palette_group("Timed, Nonlinear","Timed, Nonlinear","LogVDet");

create_item ("_LogAmp","Logarithmic amplifier",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LogAmp",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLogAmp_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_LogAmp",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","log sensitivity, in volts/dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")),
	create_parm ("PMin","minimum input power, in dBm, for logarithmic amplification",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-80")),
	create_parm ("E","peak log error, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Ec","log error cycle, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_LogAmp");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_LogAmp");

create_item ("LogAmp","Logarithmic amplifier",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LogAmp",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LogAmp",
	SPDesignAnnotFmt,
	"SYM_DSN_LogAmp",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","log sensitivity, in volts/dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")),
	create_parm ("PMin","minimum input power, in dBm, for logarithmic amplification",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-80")),
	create_parm ("E","peak log error, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Ec","log error cycle, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Nonlinear","Timed, Nonlinear","LogAmp");
palette_group("Timed, Nonlinear","Timed, Nonlinear","LogAmp");

create_item ("_Limiter","Signal limiter",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Limiter",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLimiter_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Limiter",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("NLimit","negative output saturation voltage, forced equal to -PLimit if input FCarrier > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","-1")),
	create_parm ("PLimit","positive output saturation voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("Gain","non-saturated gain",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_Limiter");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_Limiter");

create_item ("Limiter","Signal limiter",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Limiter",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Limiter",
	SPDesignAnnotFmt,
	"SYM_DSN_Limiter",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("NLimit","negative output saturation voltage, forced equal to -PLimit if input FCarrier > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","-1")),
	create_parm ("PLimit","positive output saturation voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("Gain","non-saturated gain",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Nonlinear","Timed, Nonlinear","Limiter");
palette_group("Timed, Nonlinear","Timed, Nonlinear","Limiter");

create_constant_form ("_n_x5fLPF_x5fRaisedCosineTimed_fImpulse_x5fmodel", 
	"Impulse model",
	0,
	"0",
	"Impulse model");
create_constant_form ("_n_x5fLPF_x5fRaisedCosineTimed_fModel_x5fwith_x5fpulse_x5fequalization", 
	"Model with pulse equalization",
	0,
	"1",
	"Model with pulse equalization");
create_form_set("_n_x5fLPF_x5fRaisedCosineTimed_fTypeSet",
	"_n_x5fLPF_x5fRaisedCosineTimed_fImpulse_x5fmodel",
	"_n_x5fLPF_x5fRaisedCosineTimed_fModel_x5fwith_x5fpulse_x5fequalization",
	"StdForm");
create_constant_form ("_n_x5fLPF_x5fRaisedCosineTimed_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_n_x5fLPF_x5fRaisedCosineTimed_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_n_x5fLPF_x5fRaisedCosineTimed_fSquareRootSet",
	"_n_x5fLPF_x5fRaisedCosineTimed_fNo",
	"_n_x5fLPF_x5fRaisedCosineTimed_fYes",
	"StdForm");
create_constant_form ("_n_x5fLPF_x5fRaisedCosineTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_n_x5fLPF_x5fRaisedCosineTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_n_x5fLPF_x5fRaisedCosineTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_n_x5fLPF_x5fRaisedCosineTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_n_x5fLPF_x5fRaisedCosineTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_n_x5fLPF_x5fRaisedCosineTimed_fWindowTypeSet",
	"_n_x5fLPF_x5fRaisedCosineTimed_fRectangular",
	"_n_x5fLPF_x5fRaisedCosineTimed_fBartlett",
	"_n_x5fLPF_x5fRaisedCosineTimed_fHanning",
	"_n_x5fLPF_x5fRaisedCosineTimed_fHamming",
	"_n_x5fLPF_x5fRaisedCosineTimed_fFlat_x5fTop",
	"StdForm");
create_item ("_LPF_RaisedCosineTimed","Lowpass raised-cosine filter",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LPF_RaisedCosineTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLPF_x5fRaisedCosineTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_LPF_RaisedCosineTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("CornerFreq","corner frequency; recommended as 1/(2*SymbolTime)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","500")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")),
	create_parm ("Type","type of raised-cosine model",
		PARM_INT,
		"_n_x5fLPF_x5fRaisedCosineTimed_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fLPF_x5fRaisedCosineTimed_fImpulse_x5fmodel","Impulse_model")),
	create_parm ("SquareRoot","use square-root raised-cosine model",
		PARM_INT,
		"_n_x5fLPF_x5fRaisedCosineTimed_fSquareRootSet",
		UNITLESS_UNIT,
		prm("_n_x5fLPF_x5fRaisedCosineTimed_fNo","No")),
	create_parm ("Delay","filter time delay; recommended as 4*SymbolTime",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.004")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fLPF_x5fRaisedCosineTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fLPF_x5fRaisedCosineTimed_fRectangular","Rectangular")));
library_group("Timed, Filters","Timed, Filters","_LPF_RaisedCosineTimed");
palette_group("Timed, Filters","Timed, Filters","_LPF_RaisedCosineTimed");

create_constant_form ("_nLPF_x5fRaisedCosineTimed_fImpulse_x5fmodel", 
	"Impulse model",
	0,
	"0",
	"Impulse model");
create_constant_form ("_nLPF_x5fRaisedCosineTimed_fModel_x5fwith_x5fpulse_x5fequalization", 
	"Model with pulse equalization",
	0,
	"1",
	"Model with pulse equalization");
create_form_set("_nLPF_x5fRaisedCosineTimed_fTypeSet",
	"_nLPF_x5fRaisedCosineTimed_fImpulse_x5fmodel",
	"_nLPF_x5fRaisedCosineTimed_fModel_x5fwith_x5fpulse_x5fequalization",
	"StdForm");
create_constant_form ("_nLPF_x5fRaisedCosineTimed_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_nLPF_x5fRaisedCosineTimed_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_nLPF_x5fRaisedCosineTimed_fSquareRootSet",
	"_nLPF_x5fRaisedCosineTimed_fNo",
	"_nLPF_x5fRaisedCosineTimed_fYes",
	"StdForm");
create_constant_form ("_nLPF_x5fRaisedCosineTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nLPF_x5fRaisedCosineTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nLPF_x5fRaisedCosineTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nLPF_x5fRaisedCosineTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nLPF_x5fRaisedCosineTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nLPF_x5fRaisedCosineTimed_fWindowTypeSet",
	"_nLPF_x5fRaisedCosineTimed_fRectangular",
	"_nLPF_x5fRaisedCosineTimed_fBartlett",
	"_nLPF_x5fRaisedCosineTimed_fHanning",
	"_nLPF_x5fRaisedCosineTimed_fHamming",
	"_nLPF_x5fRaisedCosineTimed_fFlat_x5fTop",
	"StdForm");
create_item ("LPF_RaisedCosineTimed","Lowpass raised-cosine filter",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LPF_RaisedCosineTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LPF_RaisedCosineTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_LPF_RaisedCosineTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("CornerFreq","corner frequency; recommended as 1/(2*SymbolTime)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","500")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")),
	create_parm ("Type","type of raised-cosine model",
		PARM_INT,
		"_nLPF_x5fRaisedCosineTimed_fTypeSet",
		UNITLESS_UNIT,
		prm("_nLPF_x5fRaisedCosineTimed_fImpulse_x5fmodel","Impulse_model")),
	create_parm ("SquareRoot","use square-root raised-cosine model",
		PARM_INT,
		"_nLPF_x5fRaisedCosineTimed_fSquareRootSet",
		UNITLESS_UNIT,
		prm("_nLPF_x5fRaisedCosineTimed_fNo","No")),
	create_parm ("Delay","filter time delay; recommended as 4*SymbolTime",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.004")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLPF_x5fRaisedCosineTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLPF_x5fRaisedCosineTimed_fRectangular","Rectangular")));
library_group("Timed, Filters","Timed, Filters","LPF_RaisedCosineTimed");
palette_group("Timed, Filters","Timed, Filters","LPF_RaisedCosineTimed");

create_constant_form ("_n_x5fLPF_x5fGaussianTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_n_x5fLPF_x5fGaussianTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_n_x5fLPF_x5fGaussianTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_n_x5fLPF_x5fGaussianTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_n_x5fLPF_x5fGaussianTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_n_x5fLPF_x5fGaussianTimed_fWindowTypeSet",
	"_n_x5fLPF_x5fGaussianTimed_fRectangular",
	"_n_x5fLPF_x5fGaussianTimed_fBartlett",
	"_n_x5fLPF_x5fGaussianTimed_fHanning",
	"_n_x5fLPF_x5fGaussianTimed_fHamming",
	"_n_x5fLPF_x5fGaussianTimed_fFlat_x5fTop",
	"StdForm");
create_item ("_LPF_GaussianTimed","Lowpass ideal Gaussian filter",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LPF_GaussianTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLPF_x5fGaussianTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_LPF_GaussianTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PassFreq","passband edge frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("PassAtten","attenuation in dB at PassFreq, 0.01 <= PassAtten <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3.0")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fLPF_x5fGaussianTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fLPF_x5fGaussianTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 10/PassFreq",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","_LPF_GaussianTimed");
palette_group("Timed, Filters","Timed, Filters","_LPF_GaussianTimed");

create_constant_form ("_nLPF_x5fGaussianTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nLPF_x5fGaussianTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nLPF_x5fGaussianTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nLPF_x5fGaussianTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nLPF_x5fGaussianTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nLPF_x5fGaussianTimed_fWindowTypeSet",
	"_nLPF_x5fGaussianTimed_fRectangular",
	"_nLPF_x5fGaussianTimed_fBartlett",
	"_nLPF_x5fGaussianTimed_fHanning",
	"_nLPF_x5fGaussianTimed_fHamming",
	"_nLPF_x5fGaussianTimed_fFlat_x5fTop",
	"StdForm");
create_item ("LPF_GaussianTimed","Lowpass ideal Gaussian filter",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LPF_GaussianTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LPF_GaussianTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_LPF_GaussianTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PassFreq","passband edge frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("PassAtten","attenuation in dB at PassFreq, 0.01 <= PassAtten <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3.0")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLPF_x5fGaussianTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLPF_x5fGaussianTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 10/PassFreq",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","LPF_GaussianTimed");
palette_group("Timed, Filters","Timed, Filters","LPF_GaussianTimed");

create_constant_form ("_n_x5fLPF_x5fEllipticTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_n_x5fLPF_x5fEllipticTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_n_x5fLPF_x5fEllipticTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_n_x5fLPF_x5fEllipticTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_n_x5fLPF_x5fEllipticTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_n_x5fLPF_x5fEllipticTimed_fWindowTypeSet",
	"_n_x5fLPF_x5fEllipticTimed_fRectangular",
	"_n_x5fLPF_x5fEllipticTimed_fBartlett",
	"_n_x5fLPF_x5fEllipticTimed_fHanning",
	"_n_x5fLPF_x5fEllipticTimed_fHamming",
	"_n_x5fLPF_x5fEllipticTimed_fFlat_x5fTop",
	"StdForm");
create_item ("_LPF_EllipticTimed","Lowpass elliptic response filter",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LPF_EllipticTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLPF_x5fEllipticTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_LPF_EllipticTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PassFreq","passband edge frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("PassRipple","passband ripple in dB,  0.01 <= PassRipple <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("StopFreq","stopband edge frequency, StopFreq > PassFreq, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopFreq, StopAtten > PassAtten, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 0 <= N <= 12; if N=0, then N is set based on StopFreq and StopAtten",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fLPF_x5fEllipticTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fLPF_x5fEllipticTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 20/PassFreq",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","_LPF_EllipticTimed");
palette_group("Timed, Filters","Timed, Filters","_LPF_EllipticTimed");

create_constant_form ("_nLPF_x5fEllipticTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nLPF_x5fEllipticTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nLPF_x5fEllipticTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nLPF_x5fEllipticTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nLPF_x5fEllipticTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nLPF_x5fEllipticTimed_fWindowTypeSet",
	"_nLPF_x5fEllipticTimed_fRectangular",
	"_nLPF_x5fEllipticTimed_fBartlett",
	"_nLPF_x5fEllipticTimed_fHanning",
	"_nLPF_x5fEllipticTimed_fHamming",
	"_nLPF_x5fEllipticTimed_fFlat_x5fTop",
	"StdForm");
create_item ("LPF_EllipticTimed","Lowpass elliptic response filter",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LPF_EllipticTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LPF_EllipticTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_LPF_EllipticTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PassFreq","passband edge frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("PassRipple","passband ripple in dB,  0.01 <= PassRipple <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("StopFreq","stopband edge frequency, StopFreq > PassFreq, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopFreq, StopAtten > PassAtten, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 0 <= N <= 12; if N=0, then N is set based on StopFreq and StopAtten",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLPF_x5fEllipticTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLPF_x5fEllipticTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 20/PassFreq",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","LPF_EllipticTimed");
palette_group("Timed, Filters","Timed, Filters","LPF_EllipticTimed");

create_constant_form ("_n_x5fLPF_x5fChebyshevTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_n_x5fLPF_x5fChebyshevTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_n_x5fLPF_x5fChebyshevTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_n_x5fLPF_x5fChebyshevTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_n_x5fLPF_x5fChebyshevTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_n_x5fLPF_x5fChebyshevTimed_fWindowTypeSet",
	"_n_x5fLPF_x5fChebyshevTimed_fRectangular",
	"_n_x5fLPF_x5fChebyshevTimed_fBartlett",
	"_n_x5fLPF_x5fChebyshevTimed_fHanning",
	"_n_x5fLPF_x5fChebyshevTimed_fHamming",
	"_n_x5fLPF_x5fChebyshevTimed_fFlat_x5fTop",
	"StdForm");
create_item ("_LPF_ChebyshevTimed","Lowpass Chebyshev response filter",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LPF_ChebyshevTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLPF_x5fChebyshevTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_LPF_ChebyshevTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PassFreq","passband edge frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("PassRipple","passband ripple in dB, 0.01 <= PassRipple <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("StopFreq","stopband edge frequency, StopFreq > PassFreq, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopFreq, StopAtten > PassAtten, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 0 <= N <= 15; if N=0, then N is set based on StopFreq and StopAtten",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fLPF_x5fChebyshevTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fLPF_x5fChebyshevTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","Impulse time duration, ImpTime=0 defaults to 10/PassFreq",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","_LPF_ChebyshevTimed");
palette_group("Timed, Filters","Timed, Filters","_LPF_ChebyshevTimed");

create_constant_form ("_nLPF_x5fChebyshevTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nLPF_x5fChebyshevTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nLPF_x5fChebyshevTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nLPF_x5fChebyshevTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nLPF_x5fChebyshevTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nLPF_x5fChebyshevTimed_fWindowTypeSet",
	"_nLPF_x5fChebyshevTimed_fRectangular",
	"_nLPF_x5fChebyshevTimed_fBartlett",
	"_nLPF_x5fChebyshevTimed_fHanning",
	"_nLPF_x5fChebyshevTimed_fHamming",
	"_nLPF_x5fChebyshevTimed_fFlat_x5fTop",
	"StdForm");
create_item ("LPF_ChebyshevTimed","Lowpass Chebyshev response filter",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LPF_ChebyshevTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LPF_ChebyshevTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_LPF_ChebyshevTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PassFreq","passband edge frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("PassRipple","passband ripple in dB, 0.01 <= PassRipple <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("StopFreq","stopband edge frequency, StopFreq > PassFreq, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopFreq, StopAtten > PassAtten, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 0 <= N <= 15; if N=0, then N is set based on StopFreq and StopAtten",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLPF_x5fChebyshevTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLPF_x5fChebyshevTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","Impulse time duration, ImpTime=0 defaults to 10/PassFreq",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","LPF_ChebyshevTimed");
palette_group("Timed, Filters","Timed, Filters","LPF_ChebyshevTimed");

create_constant_form ("_n_x5fLPF_x5fButterworthTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_n_x5fLPF_x5fButterworthTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_n_x5fLPF_x5fButterworthTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_n_x5fLPF_x5fButterworthTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_n_x5fLPF_x5fButterworthTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_n_x5fLPF_x5fButterworthTimed_fWindowTypeSet",
	"_n_x5fLPF_x5fButterworthTimed_fRectangular",
	"_n_x5fLPF_x5fButterworthTimed_fBartlett",
	"_n_x5fLPF_x5fButterworthTimed_fHanning",
	"_n_x5fLPF_x5fButterworthTimed_fHamming",
	"_n_x5fLPF_x5fButterworthTimed_fFlat_x5fTop",
	"StdForm");
create_item ("_LPF_ButterworthTimed","Lowpass Butterworth response filter",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LPF_ButterworthTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLPF_x5fButterworthTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_LPF_ButterworthTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PassFreq","passband edge frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("PassAtten","attenuation in dB at PassFreq, 0.01 <= PassAtten <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3.")),
	create_parm ("StopFreq","stopband edge frequency, StopFreq > PassFreq, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopFreq, StopAtten > PassAtten, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 0 <= N <= 15; if N=0, then N is set based on StopFreq and StopAtten",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fLPF_x5fButterworthTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fLPF_x5fButterworthTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 10/(Bandwidth_at_3dB_down)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","_LPF_ButterworthTimed");
palette_group("Timed, Filters","Timed, Filters","_LPF_ButterworthTimed");

create_constant_form ("_nLPF_x5fButterworthTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nLPF_x5fButterworthTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nLPF_x5fButterworthTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nLPF_x5fButterworthTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nLPF_x5fButterworthTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nLPF_x5fButterworthTimed_fWindowTypeSet",
	"_nLPF_x5fButterworthTimed_fRectangular",
	"_nLPF_x5fButterworthTimed_fBartlett",
	"_nLPF_x5fButterworthTimed_fHanning",
	"_nLPF_x5fButterworthTimed_fHamming",
	"_nLPF_x5fButterworthTimed_fFlat_x5fTop",
	"StdForm");
create_item ("LPF_ButterworthTimed","Lowpass Butterworth response filter",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LPF_ButterworthTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LPF_ButterworthTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_LPF_ButterworthTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PassFreq","passband edge frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("PassAtten","attenuation in dB at PassFreq, 0.01 <= PassAtten <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3.")),
	create_parm ("StopFreq","stopband edge frequency, StopFreq > PassFreq, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopFreq, StopAtten > PassAtten, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 0 <= N <= 15; if N=0, then N is set based on StopFreq and StopAtten",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLPF_x5fButterworthTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLPF_x5fButterworthTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 10/(Bandwidth_at_3dB_down)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","LPF_ButterworthTimed");
palette_group("Timed, Filters","Timed, Filters","LPF_ButterworthTimed");

create_constant_form ("_n_x5fLPF_x5fBesselTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_n_x5fLPF_x5fBesselTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_n_x5fLPF_x5fBesselTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_n_x5fLPF_x5fBesselTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_n_x5fLPF_x5fBesselTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_n_x5fLPF_x5fBesselTimed_fWindowTypeSet",
	"_n_x5fLPF_x5fBesselTimed_fRectangular",
	"_n_x5fLPF_x5fBesselTimed_fBartlett",
	"_n_x5fLPF_x5fBesselTimed_fHanning",
	"_n_x5fLPF_x5fBesselTimed_fHamming",
	"_n_x5fLPF_x5fBesselTimed_fFlat_x5fTop",
	"StdForm");
create_item ("_LPF_BesselTimed","Lowpass Bessel response filter",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LPF_BesselTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLPF_x5fBesselTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_LPF_BesselTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PassFreq","passband edge frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("PassAtten","attenuation in dB at PassFreq, 0.01 <= PassAtten <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3.")),
	create_parm ("StopFreq","stopband edge frequency, StopFreq > PassFreq, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopFreq, StopAtten > PassAtten, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 1 <= N <= 12; the N=0 feature is not available in this product release",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fLPF_x5fBesselTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fLPF_x5fBesselTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 10/(Bandwidth_at_3dB_down)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","_LPF_BesselTimed");
palette_group("Timed, Filters","Timed, Filters","_LPF_BesselTimed");

create_constant_form ("_nLPF_x5fBesselTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nLPF_x5fBesselTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nLPF_x5fBesselTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nLPF_x5fBesselTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nLPF_x5fBesselTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nLPF_x5fBesselTimed_fWindowTypeSet",
	"_nLPF_x5fBesselTimed_fRectangular",
	"_nLPF_x5fBesselTimed_fBartlett",
	"_nLPF_x5fBesselTimed_fHanning",
	"_nLPF_x5fBesselTimed_fHamming",
	"_nLPF_x5fBesselTimed_fFlat_x5fTop",
	"StdForm");
create_item ("LPF_BesselTimed","Lowpass Bessel response filter",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LPF_BesselTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LPF_BesselTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_LPF_BesselTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PassFreq","passband edge frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("PassAtten","attenuation in dB at PassFreq, 0.01 <= PassAtten <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3.")),
	create_parm ("StopFreq","stopband edge frequency, StopFreq > PassFreq, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopFreq, StopAtten > PassAtten, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 1 <= N <= 12; the N=0 feature is not available in this product release",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLPF_x5fBesselTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLPF_x5fBesselTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 10/(Bandwidth_at_3dB_down)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","LPF_BesselTimed");
palette_group("Timed, Filters","Timed, Filters","LPF_BesselTimed");

create_constant_form ("_n_x5fInterpolator_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_n_x5fInterpolator_flinear", 
	"linear",
	0,
	"1",
	"linear");
create_constant_form ("_n_x5fInterpolator_fcubic_x5fspline", 
	"cubic spline",
	0,
	"2",
	"cubic spline");
create_constant_form ("_n_x5fInterpolator_fn_x5fpoint_x5fLagrange", 
	"n-point Lagrange",
	0,
	"3",
	"n-point Lagrange");
create_form_set("_n_x5fInterpolator_fTypeSet",
	"_n_x5fInterpolator_fnone",
	"_n_x5fInterpolator_flinear",
	"_n_x5fInterpolator_fcubic_x5fspline",
	"_n_x5fInterpolator_fn_x5fpoint_x5fLagrange",
	"StdForm");
create_item ("_Interpolator","Interpolator for timed signals",
	"I",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Interpolator",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fInterpolator_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Interpolator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("TimeRef","reference time for interpolated data; will be normalized by modulo tstep to a value, tref, in the range to 0 <= tref <= tstep",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("Type","type of interpolator",
		PARM_INT,
		"_n_x5fInterpolator_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fInterpolator_fnone","none")),
	create_parm ("Order","order of Lagrange interpolator",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("Timed, Data Processing","Timed, Data Processing","_Interpolator");
palette_group("Timed, Data Processing","Timed, Data Processing","_Interpolator");

create_constant_form ("_nInterpolator_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_nInterpolator_flinear", 
	"linear",
	0,
	"1",
	"linear");
create_constant_form ("_nInterpolator_fcubic_x5fspline", 
	"cubic spline",
	0,
	"2",
	"cubic spline");
create_constant_form ("_nInterpolator_fn_x5fpoint_x5fLagrange", 
	"n-point Lagrange",
	0,
	"3",
	"n-point Lagrange");
create_form_set("_nInterpolator_fTypeSet",
	"_nInterpolator_fnone",
	"_nInterpolator_flinear",
	"_nInterpolator_fcubic_x5fspline",
	"_nInterpolator_fn_x5fpoint_x5fLagrange",
	"StdForm");
create_item ("Interpolator","Interpolator for timed signals",
	"I",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Interpolator",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Interpolator",
	SPDesignAnnotFmt,
	"SYM_DSN_Interpolator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("TimeRef","reference time for interpolated data; will be normalized by modulo tstep to a value, tref, in the range to 0 <= tref <= tstep",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("Type","type of interpolator",
		PARM_INT,
		"_nInterpolator_fTypeSet",
		UNITLESS_UNIT,
		prm("_nInterpolator_fnone","none")),
	create_parm ("Order","order of Lagrange interpolator",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("Timed, Data Processing","Timed, Data Processing","Interpolator");
palette_group("Timed, Data Processing","Timed, Data Processing","Interpolator");

create_item ("_IntDumpTimed","Integrate and dump with reset",
	"I",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_IntDumpTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fIntDumpTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_IntDumpTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")));
library_group("Timed, Linear","Timed, Linear","_IntDumpTimed");
palette_group("Timed, Linear","Timed, Linear","_IntDumpTimed");

create_item ("IntDumpTimed","Integrate and dump with reset",
	"I",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_IntDumpTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"IntDumpTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_IntDumpTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")));
library_group("Timed, Linear","Timed, Linear","IntDumpTimed");
palette_group("Timed, Linear","Timed, Linear","IntDumpTimed");

create_item ("_Impulse","Baseband or RF impulse generator",
	"I",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Impulse",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fImpulse_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Impulse",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Weight","impulse level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("Period","impulse train period",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","time delay before turn-on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Sources","Timed, Sources","_Impulse");
palette_group("Timed, Sources","Timed, Sources","_Impulse");

create_item ("Impulse","Baseband or RF impulse generator",
	"I",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Impulse",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Impulse",
	SPDesignAnnotFmt,
	"SYM_DSN_Impulse",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Weight","impulse level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("Period","impulse train period",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","time delay before turn-on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Sources","Timed, Sources","Impulse");
palette_group("Timed, Sources","Timed, Sources","Impulse");

create_constant_form ("_n_x5fGainRF_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_n_x5fGainRF_fTOI", 
	"TOI",
	0,
	"1",
	"TOI");
create_constant_form ("_n_x5fGainRF_fdBc1", 
	"dBc1",
	0,
	"2",
	"dBc1");
create_constant_form ("_n_x5fGainRF_fTOI_x5fdBc1", 
	"TOI+dBc1",
	0,
	"3",
	"TOI+dBc1");
create_constant_form ("_n_x5fGainRF_fPSat_x5fGCSat_x5fTOI", 
	"PSat+GCSat+TOI",
	0,
	"4",
	"PSat+GCSat+TOI");
create_constant_form ("_n_x5fGainRF_fPSat_x5fGCSat_x5fdBc1", 
	"PSat+GCSat+dBc1",
	0,
	"5",
	"PSat+GCSat+dBc1");
create_constant_form ("_n_x5fGainRF_fPSat_x5fGCSat_x5fTOI_x5fdBc1", 
	"PSat+GCSat+TOI+dBc1",
	0,
	"6",
	"PSat+GCSat+TOI+dBc1");
create_constant_form ("_n_x5fGainRF_fGain_x5fcompression_x5fdata_x5fpoints_x5fvs_x5finput_x5fpower", 
	"Gain compression data points vs input power",
	0,
	"7",
	"Gain compression data points vs input power");
create_form_set("_n_x5fGainRF_fGCTypeSet",
	"_n_x5fGainRF_fnone",
	"_n_x5fGainRF_fTOI",
	"_n_x5fGainRF_fdBc1",
	"_n_x5fGainRF_fTOI_x5fdBc1",
	"_n_x5fGainRF_fPSat_x5fGCSat_x5fTOI",
	"_n_x5fGainRF_fPSat_x5fGCSat_x5fdBc1",
	"_n_x5fGainRF_fPSat_x5fGCSat_x5fTOI_x5fdBc1",
	"_n_x5fGainRF_fGain_x5fcompression_x5fdata_x5fpoints_x5fvs_x5finput_x5fpower",
	"StdForm");
create_item ("_GainRF","Complex gain with gain compression",
	"G",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_GainRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fGainRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_GainRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Gain","Complex voltage gain; with form re+j*im; to specify gain in dB use dbpolar( dB, degree)",
		PARM_COMPLEX,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("NoiseFigure","input noise figure, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("GCType","Gain compression type",
		PARM_INT,
		"_n_x5fGainRF_fGCTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fGainRF_fnone","none")),
	create_parm ("TOIout","Third order intercept power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","3")),
	create_parm ("dBc1out","1 dB gain compression power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1")),
	create_parm ("PSat","Saturation power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1")),
	create_parm ("GCSat","Gain compression at saturation; dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("GComp","Array of triple values for large signal gain change vs signal power",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0  0  0\"")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_GainRF");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_GainRF");

create_constant_form ("_nGainRF_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_nGainRF_fTOI", 
	"TOI",
	0,
	"1",
	"TOI");
create_constant_form ("_nGainRF_fdBc1", 
	"dBc1",
	0,
	"2",
	"dBc1");
create_constant_form ("_nGainRF_fTOI_x5fdBc1", 
	"TOI+dBc1",
	0,
	"3",
	"TOI+dBc1");
create_constant_form ("_nGainRF_fPSat_x5fGCSat_x5fTOI", 
	"PSat+GCSat+TOI",
	0,
	"4",
	"PSat+GCSat+TOI");
create_constant_form ("_nGainRF_fPSat_x5fGCSat_x5fdBc1", 
	"PSat+GCSat+dBc1",
	0,
	"5",
	"PSat+GCSat+dBc1");
create_constant_form ("_nGainRF_fPSat_x5fGCSat_x5fTOI_x5fdBc1", 
	"PSat+GCSat+TOI+dBc1",
	0,
	"6",
	"PSat+GCSat+TOI+dBc1");
create_constant_form ("_nGainRF_fGain_x5fcompression_x5fdata_x5fpoints_x5fvs_x5finput_x5fpower", 
	"Gain compression data points vs input power",
	0,
	"7",
	"Gain compression data points vs input power");
create_form_set("_nGainRF_fGCTypeSet",
	"_nGainRF_fnone",
	"_nGainRF_fTOI",
	"_nGainRF_fdBc1",
	"_nGainRF_fTOI_x5fdBc1",
	"_nGainRF_fPSat_x5fGCSat_x5fTOI",
	"_nGainRF_fPSat_x5fGCSat_x5fdBc1",
	"_nGainRF_fPSat_x5fGCSat_x5fTOI_x5fdBc1",
	"_nGainRF_fGain_x5fcompression_x5fdata_x5fpoints_x5fvs_x5finput_x5fpower",
	"StdForm");
create_item ("GainRF","Complex gain with gain compression",
	"G",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_GainRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"GainRF",
	SPDesignAnnotFmt,
	"SYM_DSN_GainRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Gain","Complex voltage gain; with form re+j*im; to specify gain in dB use dbpolar( dB, degree)",
		PARM_COMPLEX,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("NoiseFigure","input noise figure, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("GCType","Gain compression type",
		PARM_INT,
		"_nGainRF_fGCTypeSet",
		UNITLESS_UNIT,
		prm("_nGainRF_fnone","none")),
	create_parm ("TOIout","Third order intercept power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","3")),
	create_parm ("dBc1out","1 dB gain compression power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1")),
	create_parm ("PSat","Saturation power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1")),
	create_parm ("GCSat","Gain compression at saturation; dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("GComp","Array of triple values for large signal gain change vs signal power",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0  0  0\"")));
library_group("Timed, Nonlinear","Timed, Nonlinear","GainRF");
palette_group("Timed, Nonlinear","Timed, Nonlinear","GainRF");

create_constant_form ("_n_x5fFreqMultiplier_ffull_x5fsignal", 
	"full signal",
	0,
	"0",
	"full signal");
create_constant_form ("_n_x5fFreqMultiplier_fRF_x5fphase_x5fonly", 
	"RF phase only",
	0,
	"1",
	"RF phase only");
create_form_set("_n_x5fFreqMultiplier_fTypeSet",
	"_n_x5fFreqMultiplier_ffull_x5fsignal",
	"_n_x5fFreqMultiplier_fRF_x5fphase_x5fonly",
	"StdForm");
create_item ("_FreqMultiplier","Signal frequency multiplier",
	"F",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_FreqMultiplier",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fFreqMultiplier_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_FreqMultiplier",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("X","frequency multiplication factor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Type","multiplier type",
		PARM_INT,
		"_n_x5fFreqMultiplier_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fFreqMultiplier_ffull_x5fsignal","full_signal")));
library_group("Timed, Nonlinear","Timed, Nonlinear","_FreqMultiplier");
palette_group("Timed, Nonlinear","Timed, Nonlinear","_FreqMultiplier");

create_constant_form ("_nFreqMultiplier_ffull_x5fsignal", 
	"full signal",
	0,
	"0",
	"full signal");
create_constant_form ("_nFreqMultiplier_fRF_x5fphase_x5fonly", 
	"RF phase only",
	0,
	"1",
	"RF phase only");
create_form_set("_nFreqMultiplier_fTypeSet",
	"_nFreqMultiplier_ffull_x5fsignal",
	"_nFreqMultiplier_fRF_x5fphase_x5fonly",
	"StdForm");
create_item ("FreqMultiplier","Signal frequency multiplier",
	"F",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_FreqMultiplier",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"FreqMultiplier",
	SPDesignAnnotFmt,
	"SYM_DSN_FreqMultiplier",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("X","frequency multiplication factor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Type","multiplier type",
		PARM_INT,
		"_nFreqMultiplier_fTypeSet",
		UNITLESS_UNIT,
		prm("_nFreqMultiplier_ffull_x5fsignal","full_signal")));
library_group("Timed, Nonlinear","Timed, Nonlinear","FreqMultiplier");
palette_group("Timed, Nonlinear","Timed, Nonlinear","FreqMultiplier");

create_item ("_FcTrackSecondary","Track input signal characterization frequency",
	"F",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_FcTrackSecondary",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fFcTrackSecondary_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_FcTrackSecondary",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Bandwidth","bandwidth of bandpass filter centered at FcOut (used when input fc=0)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","_FcTrackSecondary");
palette_group("Timed, Linear","Timed, Linear","_FcTrackSecondary");

create_item ("FcTrackSecondary","Track input signal characterization frequency",
	"F",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_FcTrackSecondary",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"FcTrackSecondary",
	SPDesignAnnotFmt,
	"SYM_DSN_FcTrackSecondary",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Bandwidth","bandwidth of bandpass filter centered at FcOut (used when input fc=0)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","FcTrackSecondary");
palette_group("Timed, Linear","Timed, Linear","FcTrackSecondary");

create_item ("_FcChange","Signal characterization frequency change",
	"F",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_FcChange",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fFcChange_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_FcChange",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FcOut","new characterization frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0")),
	create_parm ("Bandwidth","bandwidth of bandpass filter centered at FcOut (used when input fc=0)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","_FcChange");
palette_group("Timed, Linear","Timed, Linear","_FcChange");

create_item ("FcChange","Signal characterization frequency change",
	"F",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_FcChange",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"FcChange",
	SPDesignAnnotFmt,
	"SYM_DSN_FcChange",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FcOut","new characterization frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0")),
	create_parm ("Bandwidth","bandwidth of bandpass filter centered at FcOut (used when input fc=0)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","FcChange");
palette_group("Timed, Linear","Timed, Linear","FcChange");

create_item ("_FM_Mod","Frequency modulator with internal oscillator",
	"F",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_FM_Mod",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fFM_x5fMod_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_FM_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Sensitivity","frequency deviation sensitivity, Hz/volts",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","phase reference in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","_FM_Mod");
palette_group("Timed, Modem","Timed, Modem","_FM_Mod");

create_item ("FM_Mod","Frequency modulator with internal oscillator",
	"F",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_FM_Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"FM_Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_FM_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Sensitivity","frequency deviation sensitivity, Hz/volts",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","phase reference in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","FM_Mod");
palette_group("Timed, Modem","Timed, Modem","FM_Mod");

create_item ("_FM_DemodExtOsc","Frequency demodulator with external reference oscillator",
	"F",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_FM_DemodExtOsc",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fFM_x5fDemodExtOsc_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_FM_DemodExtOsc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Modem","Timed, Modem","_FM_DemodExtOsc");
palette_group("Timed, Modem","Timed, Modem","_FM_DemodExtOsc");

create_item ("FM_DemodExtOsc","Frequency demodulator with external reference oscillator",
	"F",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_FM_DemodExtOsc",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"FM_DemodExtOsc",
	SPDesignAnnotFmt,
	"SYM_DSN_FM_DemodExtOsc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Modem","Timed, Modem","FM_DemodExtOsc");
palette_group("Timed, Modem","Timed, Modem","FM_DemodExtOsc");

create_item ("_FM_Demod","Frequency demodulator with internal oscillator",
	"F",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_FM_Demod",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fFM_x5fDemod_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_FM_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","initial phase of carrier, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.")));
library_group("Timed, Modem","Timed, Modem","_FM_Demod");
palette_group("Timed, Modem","Timed, Modem","_FM_Demod");

create_item ("FM_Demod","Frequency demodulator with internal oscillator",
	"F",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_FM_Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"FM_Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_FM_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","initial phase of carrier, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.")));
library_group("Timed, Modem","Timed, Modem","FM_Demod");
palette_group("Timed, Modem","Timed, Modem","FM_Demod");

create_item ("_FM","Frequency modulated carrier with single modulating tone",
	"F",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_FM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fFM_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_FM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Phase","unmodulated carrier phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Sensitivity","modulator sensitivity in Hz/V",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1000")),
	create_parm ("FSignal","modulation signal frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")),
	create_parm ("VPeak","peak modulation voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Sources","Timed, Sources","_FM");
palette_group("Timed, Sources","Timed, Sources","_FM");

create_item ("FM","Frequency modulated carrier with single modulating tone",
	"F",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_FM",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"FM",
	SPDesignAnnotFmt,
	"SYM_DSN_FM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Phase","unmodulated carrier phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Sensitivity","modulator sensitivity in Hz/V",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1000")),
	create_parm ("FSignal","modulation signal frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")),
	create_parm ("VPeak","peak modulation voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Sources","Timed, Sources","FM");
palette_group("Timed, Sources","Timed, Sources","FM");

create_constant_form ("_n_x5fEncoderIQClocked_fUncoded", 
	"Uncoded",
	0,
	"0",
	"Uncoded");
create_constant_form ("_n_x5fEncoderIQClocked_fDQPSK", 
	"DQPSK",
	0,
	"1",
	"DQPSK");
create_constant_form ("_n_x5fEncoderIQClocked_fPI_x5f4_x5fDQPSK", 
	"PI/4 DQPSK",
	0,
	"2",
	"PI/4 DQPSK");
create_form_set("_n_x5fEncoderIQClocked_fTypeSet",
	"_n_x5fEncoderIQClocked_fUncoded",
	"_n_x5fEncoderIQClocked_fDQPSK",
	"_n_x5fEncoderIQClocked_fPI_x5f4_x5fDQPSK",
	"StdForm");
create_item ("_EncoderIQClocked","Encoder for IQ Data with clock input",
	"E",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_EncoderIQClocked",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fEncoderIQClocked_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_EncoderIQClocked",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Type","type of IQ data encoder",
		PARM_INT,
		"_n_x5fEncoderIQClocked_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fEncoderIQClocked_fUncoded","Uncoded")));
library_group("Timed, Data Processing","Timed, Data Processing","_EncoderIQClocked");
palette_group("Timed, Data Processing","Timed, Data Processing","_EncoderIQClocked");

create_constant_form ("_nEncoderIQClocked_fUncoded", 
	"Uncoded",
	0,
	"0",
	"Uncoded");
create_constant_form ("_nEncoderIQClocked_fDQPSK", 
	"DQPSK",
	0,
	"1",
	"DQPSK");
create_constant_form ("_nEncoderIQClocked_fPI_x5f4_x5fDQPSK", 
	"PI/4 DQPSK",
	0,
	"2",
	"PI/4 DQPSK");
create_form_set("_nEncoderIQClocked_fTypeSet",
	"_nEncoderIQClocked_fUncoded",
	"_nEncoderIQClocked_fDQPSK",
	"_nEncoderIQClocked_fPI_x5f4_x5fDQPSK",
	"StdForm");
create_item ("EncoderIQClocked","Encoder for IQ Data with clock input",
	"E",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_EncoderIQClocked",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"EncoderIQClocked",
	SPDesignAnnotFmt,
	"SYM_DSN_EncoderIQClocked",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Type","type of IQ data encoder",
		PARM_INT,
		"_nEncoderIQClocked_fTypeSet",
		UNITLESS_UNIT,
		prm("_nEncoderIQClocked_fUncoded","Uncoded")));
library_group("Timed, Data Processing","Timed, Data Processing","EncoderIQClocked");
palette_group("Timed, Data Processing","Timed, Data Processing","EncoderIQClocked");

create_constant_form ("_n_x5fEncoderIQ_fUncoded", 
	"Uncoded",
	0,
	"0",
	"Uncoded");
create_constant_form ("_n_x5fEncoderIQ_fDQPSK", 
	"DQPSK",
	0,
	"1",
	"DQPSK");
create_constant_form ("_n_x5fEncoderIQ_fPI_x5f4_x5fDQPSK", 
	"PI/4 DQPSK",
	0,
	"2",
	"PI/4 DQPSK");
create_form_set("_n_x5fEncoderIQ_fTypeSet",
	"_n_x5fEncoderIQ_fUncoded",
	"_n_x5fEncoderIQ_fDQPSK",
	"_n_x5fEncoderIQ_fPI_x5f4_x5fDQPSK",
	"StdForm");
create_item ("_EncoderIQ","Encoder for IQ data",
	"E",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_EncoderIQ",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fEncoderIQ_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_EncoderIQ",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","time delay from t=0 for start of integrate and dump detection of input data stream, Delay = -1 for auto synchronization",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("Type","type of IQ data encoder",
		PARM_INT,
		"_n_x5fEncoderIQ_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fEncoderIQ_fUncoded","Uncoded")));
library_group("Timed, Data Processing","Timed, Data Processing","_EncoderIQ");
palette_group("Timed, Data Processing","Timed, Data Processing","_EncoderIQ");

create_constant_form ("_nEncoderIQ_fUncoded", 
	"Uncoded",
	0,
	"0",
	"Uncoded");
create_constant_form ("_nEncoderIQ_fDQPSK", 
	"DQPSK",
	0,
	"1",
	"DQPSK");
create_constant_form ("_nEncoderIQ_fPI_x5f4_x5fDQPSK", 
	"PI/4 DQPSK",
	0,
	"2",
	"PI/4 DQPSK");
create_form_set("_nEncoderIQ_fTypeSet",
	"_nEncoderIQ_fUncoded",
	"_nEncoderIQ_fDQPSK",
	"_nEncoderIQ_fPI_x5f4_x5fDQPSK",
	"StdForm");
create_item ("EncoderIQ","Encoder for IQ data",
	"E",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_EncoderIQ",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"EncoderIQ",
	SPDesignAnnotFmt,
	"SYM_DSN_EncoderIQ",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","time delay from t=0 for start of integrate and dump detection of input data stream, Delay = -1 for auto synchronization",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("Type","type of IQ data encoder",
		PARM_INT,
		"_nEncoderIQ_fTypeSet",
		UNITLESS_UNIT,
		prm("_nEncoderIQ_fUncoded","Uncoded")));
library_group("Timed, Data Processing","Timed, Data Processing","EncoderIQ");
palette_group("Timed, Data Processing","Timed, Data Processing","EncoderIQ");

create_constant_form ("_n_x5fDetectorRF_fRectified_x5fenvelope", 
	"Rectified envelope",
	0,
	"0",
	"Rectified envelope");
create_constant_form ("_n_x5fDetectorRF_fInphase_x5fenvelope", 
	"Inphase envelope",
	0,
	"1",
	"Inphase envelope");
create_constant_form ("_n_x5fDetectorRF_fQuadrature_x5fenvelope", 
	"Quadrature envelope",
	0,
	"2",
	"Quadrature envelope");
create_form_set("_n_x5fDetectorRF_fTypeSet",
	"_n_x5fDetectorRF_fRectified_x5fenvelope",
	"_n_x5fDetectorRF_fInphase_x5fenvelope",
	"_n_x5fDetectorRF_fQuadrature_x5fenvelope",
	"StdForm");
create_item ("_DetectorRF","RF envelope detector with internal oscillator",
	"D",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_DetectorRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fDetectorRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_DetectorRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Type","detector type",
		PARM_INT,
		"_n_x5fDetectorRF_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fDetectorRF_fRectified_x5fenvelope","Rectified_envelope")));
library_group("Timed, Modem","Timed, Modem","_DetectorRF");
palette_group("Timed, Modem","Timed, Modem","_DetectorRF");

create_constant_form ("_nDetectorRF_fRectified_x5fenvelope", 
	"Rectified envelope",
	0,
	"0",
	"Rectified envelope");
create_constant_form ("_nDetectorRF_fInphase_x5fenvelope", 
	"Inphase envelope",
	0,
	"1",
	"Inphase envelope");
create_constant_form ("_nDetectorRF_fQuadrature_x5fenvelope", 
	"Quadrature envelope",
	0,
	"2",
	"Quadrature envelope");
create_form_set("_nDetectorRF_fTypeSet",
	"_nDetectorRF_fRectified_x5fenvelope",
	"_nDetectorRF_fInphase_x5fenvelope",
	"_nDetectorRF_fQuadrature_x5fenvelope",
	"StdForm");
create_item ("DetectorRF","RF envelope detector with internal oscillator",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DetectorRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DetectorRF",
	SPDesignAnnotFmt,
	"SYM_DSN_DetectorRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Type","detector type",
		PARM_INT,
		"_nDetectorRF_fTypeSet",
		UNITLESS_UNIT,
		prm("_nDetectorRF_fRectified_x5fenvelope","Rectified_envelope")));
library_group("Timed, Modem","Timed, Modem","DetectorRF");
palette_group("Timed, Modem","Timed, Modem","DetectorRF");

create_constant_form ("_n_x5fDelayRF_x5fH_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_n_x5fDelayRF_x5fH_flinear", 
	"linear",
	0,
	"1",
	"linear");
create_constant_form ("_n_x5fDelayRF_x5fH_fLagrange", 
	"Lagrange",
	0,
	"2",
	"Lagrange");
create_form_set("_n_x5fDelayRF_x5fH_fInterpolationMethodSet",
	"_n_x5fDelayRF_x5fH_fnone",
	"_n_x5fDelayRF_x5fH_flinear",
	"_n_x5fDelayRF_x5fH_fLagrange",
	"StdForm");
create_constant_form ("_n_x5fDelayRF_x5fH_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_n_x5fDelayRF_x5fH_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_n_x5fDelayRF_x5fH_fIncludeCarrierPhaseShiftSet",
	"_n_x5fDelayRF_x5fH_fNo",
	"_n_x5fDelayRF_x5fH_fYes",
	"StdForm");
create_item ("_DelayRF_H","Time delay",
	"D",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_DelayRF_H",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fDelayRF_x5fH_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_DelayRF_H",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Delay","time delay, must be >= Tstep; set to -1 for one TStep delay",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","-1")),
	create_parm ("InterpolationMethod","signal interpolation method",
		PARM_INT,
		"_n_x5fDelayRF_x5fH_fInterpolationMethodSet",
		UNITLESS_UNIT,
		prm("_n_x5fDelayRF_x5fH_fnone","none")),
	create_parm ("IncludeCarrierPhaseShift","include RF carrier phase shift",
		PARM_INT,
		"_n_x5fDelayRF_x5fH_fIncludeCarrierPhaseShiftSet",
		UNITLESS_UNIT,
		prm("_n_x5fDelayRF_x5fH_fYes","Yes")));
library_group("Testing (for development use only)","Testing (for development use only)","_DelayRF_H");
palette_group("Testing (for development use only)","Testing (for development use only)","_DelayRF_H");

create_constant_form ("_nDelayRF_x5fH_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_nDelayRF_x5fH_flinear", 
	"linear",
	0,
	"1",
	"linear");
create_constant_form ("_nDelayRF_x5fH_fLagrange", 
	"Lagrange",
	0,
	"2",
	"Lagrange");
create_form_set("_nDelayRF_x5fH_fInterpolationMethodSet",
	"_nDelayRF_x5fH_fnone",
	"_nDelayRF_x5fH_flinear",
	"_nDelayRF_x5fH_fLagrange",
	"StdForm");
create_constant_form ("_nDelayRF_x5fH_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_nDelayRF_x5fH_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_nDelayRF_x5fH_fIncludeCarrierPhaseShiftSet",
	"_nDelayRF_x5fH_fNo",
	"_nDelayRF_x5fH_fYes",
	"StdForm");
create_item ("DelayRF_H","Time delay",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DelayRF_H",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DelayRF_H",
	SPDesignAnnotFmt,
	"SYM_DSN_DelayRF_H",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Delay","time delay, must be >= Tstep; set to -1 for one TStep delay",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","-1")),
	create_parm ("InterpolationMethod","signal interpolation method",
		PARM_INT,
		"_nDelayRF_x5fH_fInterpolationMethodSet",
		UNITLESS_UNIT,
		prm("_nDelayRF_x5fH_fnone","none")),
	create_parm ("IncludeCarrierPhaseShift","include RF carrier phase shift",
		PARM_INT,
		"_nDelayRF_x5fH_fIncludeCarrierPhaseShiftSet",
		UNITLESS_UNIT,
		prm("_nDelayRF_x5fH_fYes","Yes")));
library_group("Testing (for development use only)","Testing (for development use only)","DelayRF_H");
palette_group("Testing (for development use only)","Testing (for development use only)","DelayRF_H");

create_constant_form ("_n_x5fDelayRF_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_n_x5fDelayRF_flinear", 
	"linear",
	0,
	"1",
	"linear");
create_constant_form ("_n_x5fDelayRF_fLagrange", 
	"Lagrange",
	0,
	"2",
	"Lagrange");
create_form_set("_n_x5fDelayRF_fInterpolationMethodSet",
	"_n_x5fDelayRF_fnone",
	"_n_x5fDelayRF_flinear",
	"_n_x5fDelayRF_fLagrange",
	"StdForm");
create_constant_form ("_n_x5fDelayRF_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_n_x5fDelayRF_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_n_x5fDelayRF_fIncludeCarrierPhaseShiftSet",
	"_n_x5fDelayRF_fNo",
	"_n_x5fDelayRF_fYes",
	"StdForm");
create_item ("_DelayRF","Time Delay",
	"D",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_DelayRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fDelayRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_DelayRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Delay","Time delay; set to -1 for a delay of one simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","-1")),
	create_parm ("InterpolationMethod","Signal interpolation method",
		PARM_INT,
		"_n_x5fDelayRF_fInterpolationMethodSet",
		UNITLESS_UNIT,
		prm("_n_x5fDelayRF_fnone","none")),
	create_parm ("IncludeCarrierPhaseShift","Include RF carrier phase shift",
		PARM_INT,
		"_n_x5fDelayRF_fIncludeCarrierPhaseShiftSet",
		UNITLESS_UNIT,
		prm("_n_x5fDelayRF_fYes","Yes")));
library_group("Timed, Linear","Timed, Linear","_DelayRF");
palette_group("Timed, Linear","Timed, Linear","_DelayRF");

create_constant_form ("_nDelayRF_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_nDelayRF_flinear", 
	"linear",
	0,
	"1",
	"linear");
create_constant_form ("_nDelayRF_fLagrange", 
	"Lagrange",
	0,
	"2",
	"Lagrange");
create_form_set("_nDelayRF_fInterpolationMethodSet",
	"_nDelayRF_fnone",
	"_nDelayRF_flinear",
	"_nDelayRF_fLagrange",
	"StdForm");
create_constant_form ("_nDelayRF_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_nDelayRF_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_nDelayRF_fIncludeCarrierPhaseShiftSet",
	"_nDelayRF_fNo",
	"_nDelayRF_fYes",
	"StdForm");
create_item ("DelayRF","Time Delay",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DelayRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DelayRF",
	SPDesignAnnotFmt,
	"SYM_DSN_DelayRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Delay","Time delay; set to -1 for a delay of one simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","-1")),
	create_parm ("InterpolationMethod","Signal interpolation method",
		PARM_INT,
		"_nDelayRF_fInterpolationMethodSet",
		UNITLESS_UNIT,
		prm("_nDelayRF_fnone","none")),
	create_parm ("IncludeCarrierPhaseShift","Include RF carrier phase shift",
		PARM_INT,
		"_nDelayRF_fIncludeCarrierPhaseShiftSet",
		UNITLESS_UNIT,
		prm("_nDelayRF_fYes","Yes")));
library_group("Timed, Linear","Timed, Linear","DelayRF");
palette_group("Timed, Linear","Timed, Linear","DelayRF");

create_item ("_DcShift","DC shift",
	"D",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_DcShift",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fDcShift_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_DcShift",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Vdc","voltage level offset added to input signal",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","_DcShift");
palette_group("Timed, Linear","Timed, Linear","_DcShift");

create_item ("DcShift","DC shift",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DcShift",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DcShift",
	SPDesignAnnotFmt,
	"SYM_DSN_DcShift",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Vdc","voltage level offset added to input signal",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Linear","Timed, Linear","DcShift");
palette_group("Timed, Linear","Timed, Linear","DcShift");

create_constant_form ("_n_x5fData_fRandom", 
	"Random",
	0,
	"0",
	"Random");
create_constant_form ("_n_x5fData_fPrbs", 
	"Prbs",
	0,
	"1",
	"Prbs");
create_form_set("_n_x5fData_fTypeSet",
	"_n_x5fData_fRandom",
	"_n_x5fData_fPrbs",
	"StdForm");
create_constant_form ("_n_x5fData_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_n_x5fData_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_n_x5fData_fRepeatSet",
	"_n_x5fData_fNo",
	"_n_x5fData_fYes",
	"StdForm");
create_item ("_Data","Data generator",
	"D",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Data",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fData_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Data",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("BitTime","Time interval for one bit",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("UserPattern","user specified bit pattern in binary (prefix %), octal (prefix 0), or hex (prefix 0x)",
		PARM_STRINGARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("Type","Data sequence type random or prbs",
		PARM_INT,
		"_n_x5fData_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fData_fPrbs","Prbs")),
	create_parm ("SequencePattern","sequence pattern",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("Repeat","Yes or No to define sequence as time periodic signal",
		PARM_INT,
		"_n_x5fData_fRepeatSet",
		UNITLESS_UNIT,
		prm("_n_x5fData_fYes","Yes")));
library_group("Timed, Sources","Timed, Sources","_Data");
palette_group("Timed, Sources","Timed, Sources","_Data");

create_constant_form ("_nData_fRandom", 
	"Random",
	0,
	"0",
	"Random");
create_constant_form ("_nData_fPrbs", 
	"Prbs",
	0,
	"1",
	"Prbs");
create_form_set("_nData_fTypeSet",
	"_nData_fRandom",
	"_nData_fPrbs",
	"StdForm");
create_constant_form ("_nData_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_nData_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_nData_fRepeatSet",
	"_nData_fNo",
	"_nData_fYes",
	"StdForm");
create_item ("Data","Data generator",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Data",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Data",
	SPDesignAnnotFmt,
	"SYM_DSN_Data",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("BitTime","Time interval for one bit",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("UserPattern","user specified bit pattern in binary (prefix %), octal (prefix 0), or hex (prefix 0x)",
		PARM_STRINGARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("Type","Data sequence type random or prbs",
		PARM_INT,
		"_nData_fTypeSet",
		UNITLESS_UNIT,
		prm("_nData_fPrbs","Prbs")),
	create_parm ("SequencePattern","sequence pattern",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("Repeat","Yes or No to define sequence as time periodic signal",
		PARM_INT,
		"_nData_fRepeatSet",
		UNITLESS_UNIT,
		prm("_nData_fYes","Yes")));
library_group("Timed, Sources","Timed, Sources","Data");
palette_group("Timed, Sources","Timed, Sources","Data");

create_constant_form ("_n_x5fDSampleRF_fOff", 
	"Off",
	0,
	"0",
	"Off");
create_constant_form ("_n_x5fDSampleRF_fOn", 
	"On",
	0,
	"1",
	"On");
create_form_set("_n_x5fDSampleRF_fAntiAliasingFilterSet",
	"_n_x5fDSampleRF_fOff",
	"_n_x5fDSampleRF_fOn",
	"StdForm");
create_item ("_DSampleRF","Down sampler for time domain signals",
	"D",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_DSampleRF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fDSampleRF_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_DSampleRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Ratio","downsampling ratio",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("Phase","downsampling phase",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("AntiAliasingFilter","turn off/on anti-aliasing filter before downsampling",
		PARM_INT,
		"_n_x5fDSampleRF_fAntiAliasingFilterSet",
		UNITLESS_UNIT,
		prm("_n_x5fDSampleRF_fOff","Off")),
	create_parm ("ExcessBW","excess bandwidth of raised cosine anti-aliasing filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Linear","Timed, Linear","_DSampleRF");
palette_group("Timed, Linear","Timed, Linear","_DSampleRF");

create_constant_form ("_nDSampleRF_fOff", 
	"Off",
	0,
	"0",
	"Off");
create_constant_form ("_nDSampleRF_fOn", 
	"On",
	0,
	"1",
	"On");
create_form_set("_nDSampleRF_fAntiAliasingFilterSet",
	"_nDSampleRF_fOff",
	"_nDSampleRF_fOn",
	"StdForm");
create_item ("DSampleRF","Down sampler for time domain signals",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DSampleRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DSampleRF",
	SPDesignAnnotFmt,
	"SYM_DSN_DSampleRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Ratio","downsampling ratio",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("Phase","downsampling phase",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("AntiAliasingFilter","turn off/on anti-aliasing filter before downsampling",
		PARM_INT,
		"_nDSampleRF_fAntiAliasingFilterSet",
		UNITLESS_UNIT,
		prm("_nDSampleRF_fOff","Off")),
	create_parm ("ExcessBW","excess bandwidth of raised cosine anti-aliasing filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Linear","Timed, Linear","DSampleRF");
palette_group("Timed, Linear","Timed, Linear","DSampleRF");

create_item ("_DAC_Timed","Digital-to-analog converter with integral and differential nonlinearities",
	"D",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_DAC_Timed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fDAC_x5fTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_DAC_Timed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","output time step; TStep=0 results in use of externally set TStep",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("NBits","number of bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("VRef","reference voltage for output analog signal A: -VRef<=A<=VRef",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("INL","integral nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DNL","differential nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("UpSampleRatio","output upsampling ratio",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Data Processing","Timed, Data Processing","_DAC_Timed");
palette_group("Timed, Data Processing","Timed, Data Processing","_DAC_Timed");

create_item ("DAC_Timed","Digital-to-analog converter with integral and differential nonlinearities",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DAC_Timed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DAC_Timed",
	SPDesignAnnotFmt,
	"SYM_DSN_DAC_Timed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","output time step; TStep=0 results in use of externally set TStep",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("NBits","number of bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("VRef","reference voltage for output analog signal A: -VRef<=A<=VRef",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("INL","integral nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DNL","differential nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("UpSampleRatio","output upsampling ratio",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Data Processing","Timed, Data Processing","DAC_Timed");
palette_group("Timed, Data Processing","Timed, Data Processing","DAC_Timed");

create_item ("_Clock","Clock generator",
	"C",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_Clock",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fClock_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_Clock",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("Period","clock time period",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm",".0006")),
	create_parm ("Delay","time delay before turn on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm",".0002")),
	create_parm ("DutyCycle","clock duty cycle",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Sources","Timed, Sources","_Clock");
palette_group("Timed, Sources","Timed, Sources","_Clock");

create_item ("Clock","Clock generator",
	"C",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Clock",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Clock",
	SPDesignAnnotFmt,
	"SYM_DSN_Clock",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("Period","clock time period",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm",".0006")),
	create_parm ("Delay","time delay before turn on",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm",".0002")),
	create_parm ("DutyCycle","clock duty cycle",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Sources","Timed, Sources","Clock");
palette_group("Timed, Sources","Timed, Sources","Clock");

create_item ("_BinaryCombinerClocked","Binary data combiner with clock input",
	"B",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_BinaryCombinerClocked",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fBinaryCombinerClocked_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_BinaryCombinerClocked",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")));
library_group("Timed, Data Processing","Timed, Data Processing","_BinaryCombinerClocked");
palette_group("Timed, Data Processing","Timed, Data Processing","_BinaryCombinerClocked");

create_item ("BinaryCombinerClocked","Binary data combiner with clock input",
	"B",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_BinaryCombinerClocked",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"BinaryCombinerClocked",
	SPDesignAnnotFmt,
	"SYM_DSN_BinaryCombinerClocked",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")));
library_group("Timed, Data Processing","Timed, Data Processing","BinaryCombinerClocked");
palette_group("Timed, Data Processing","Timed, Data Processing","BinaryCombinerClocked");

create_item ("_BinaryCombiner","Binary data combiner",
	"B",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_BinaryCombiner",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fBinaryCombiner_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_BinaryCombiner",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","data input time delay from t=0 for start of data stream",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")));
library_group("Timed, Data Processing","Timed, Data Processing","_BinaryCombiner");
palette_group("Timed, Data Processing","Timed, Data Processing","_BinaryCombiner");

create_item ("BinaryCombiner","Binary data combiner",
	"B",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_BinaryCombiner",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"BinaryCombiner",
	SPDesignAnnotFmt,
	"SYM_DSN_BinaryCombiner",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Delay","data input time delay from t=0 for start of data stream",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")));
library_group("Timed, Data Processing","Timed, Data Processing","BinaryCombiner");
palette_group("Timed, Data Processing","Timed, Data Processing","BinaryCombiner");

create_constant_form ("_n_x5fBinaryCoder_fDifferential_x5fdata_x5fencoder", 
	"Differential data encoder",
	0,
	"0",
	"Differential data encoder");
create_constant_form ("_n_x5fBinaryCoder_fDifferential_x5fdata_x5fdecoder", 
	"Differential data decoder",
	0,
	"1",
	"Differential data decoder");
create_form_set("_n_x5fBinaryCoder_fTypeSet",
	"_n_x5fBinaryCoder_fDifferential_x5fdata_x5fencoder",
	"_n_x5fBinaryCoder_fDifferential_x5fdata_x5fdecoder",
	"StdForm");
create_item ("_BinaryCoder","Binary data coder",
	"B",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_BinaryCoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fBinaryCoder_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_BinaryCoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Type","differential data coding type",
		PARM_INT,
		"_n_x5fBinaryCoder_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fBinaryCoder_fDifferential_x5fdata_x5fencoder","Differential_data_encoder")));
library_group("Timed, Data Processing","Timed, Data Processing","_BinaryCoder");
palette_group("Timed, Data Processing","Timed, Data Processing","_BinaryCoder");

create_constant_form ("_nBinaryCoder_fDifferential_x5fdata_x5fencoder", 
	"Differential data encoder",
	0,
	"0",
	"Differential data encoder");
create_constant_form ("_nBinaryCoder_fDifferential_x5fdata_x5fdecoder", 
	"Differential data decoder",
	0,
	"1",
	"Differential data decoder");
create_form_set("_nBinaryCoder_fTypeSet",
	"_nBinaryCoder_fDifferential_x5fdata_x5fencoder",
	"_nBinaryCoder_fDifferential_x5fdata_x5fdecoder",
	"StdForm");
create_item ("BinaryCoder","Binary data coder",
	"B",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_BinaryCoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"BinaryCoder",
	SPDesignAnnotFmt,
	"SYM_DSN_BinaryCoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Type","differential data coding type",
		PARM_INT,
		"_nBinaryCoder_fTypeSet",
		UNITLESS_UNIT,
		prm("_nBinaryCoder_fDifferential_x5fdata_x5fencoder","Differential_data_encoder")));
library_group("Timed, Data Processing","Timed, Data Processing","BinaryCoder");
palette_group("Timed, Data Processing","Timed, Data Processing","BinaryCoder");

create_item ("_AddNDensity","Add noise density to input signal",
	"A",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_AddNDensity",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fAddNDensity_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_AddNDensity",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("NDensity","noise spectral density at output, in dBm/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-173.975")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","_AddNDensity");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","_AddNDensity");

create_item ("AddNDensity","Add noise density to input signal",
	"A",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_AddNDensity",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"AddNDensity",
	SPDesignAnnotFmt,
	"SYM_DSN_AddNDensity",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("NDensity","noise spectral density at output, in dBm/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-173.975")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","AddNDensity");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","AddNDensity");

create_constant_form ("_n_x5fAM_x5fMod_fConventional_x5fAm", 
	"Conventional Am",
	0,
	"0",
	"Conventional Am");
create_constant_form ("_n_x5fAM_x5fMod_fDSB_x5fSC_x5fAm", 
	"DSB SC Am",
	0,
	"1",
	"DSB SC Am");
create_form_set("_n_x5fAM_x5fMod_fTypeSet",
	"_n_x5fAM_x5fMod_fConventional_x5fAm",
	"_n_x5fAM_x5fMod_fDSB_x5fSC_x5fAm",
	"StdForm");
create_item ("_AM_Mod","Amplitude modulator with internal oscillator",
	"A",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_AM_Mod",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fAM_x5fMod_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_AM_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("VRef","modulated voltage reference level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("Type","modulation type",
		PARM_INT,
		"_n_x5fAM_x5fMod_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fAM_x5fMod_fConventional_x5fAm","Conventional_Am")));
library_group("Timed, Modem","Timed, Modem","_AM_Mod");
palette_group("Timed, Modem","Timed, Modem","_AM_Mod");

create_constant_form ("_nAM_x5fMod_fConventional_x5fAm", 
	"Conventional Am",
	0,
	"0",
	"Conventional Am");
create_constant_form ("_nAM_x5fMod_fDSB_x5fSC_x5fAm", 
	"DSB SC Am",
	0,
	"1",
	"DSB SC Am");
create_form_set("_nAM_x5fMod_fTypeSet",
	"_nAM_x5fMod_fConventional_x5fAm",
	"_nAM_x5fMod_fDSB_x5fSC_x5fAm",
	"StdForm");
create_item ("AM_Mod","Amplitude modulator with internal oscillator",
	"A",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_AM_Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"AM_Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_AM_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("VRef","modulated voltage reference level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("Type","modulation type",
		PARM_INT,
		"_nAM_x5fMod_fTypeSet",
		UNITLESS_UNIT,
		prm("_nAM_x5fMod_fConventional_x5fAm","Conventional_Am")));
library_group("Timed, Modem","Timed, Modem","AM_Mod");
palette_group("Timed, Modem","Timed, Modem","AM_Mod");

create_item ("_AM_DemodExtOsc","Amplitude demodulator with external reference oscillator",
	"A",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_AM_DemodExtOsc",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fAM_x5fDemodExtOsc_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_AM_DemodExtOsc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Modem","Timed, Modem","_AM_DemodExtOsc");
palette_group("Timed, Modem","Timed, Modem","_AM_DemodExtOsc");

create_item ("AM_DemodExtOsc","Amplitude demodulator with external reference oscillator",
	"A",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_AM_DemodExtOsc",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"AM_DemodExtOsc",
	SPDesignAnnotFmt,
	"SYM_DSN_AM_DemodExtOsc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Timed, Modem","Timed, Modem","AM_DemodExtOsc");
palette_group("Timed, Modem","Timed, Modem","AM_DemodExtOsc");

create_item ("_AM_Demod","Amplitude demodulator with internal oscillator",
	"A",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_AM_Demod",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fAM_x5fDemod_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_AM_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","reference phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","_AM_Demod");
palette_group("Timed, Modem","Timed, Modem","_AM_Demod");

create_item ("AM_Demod","Amplitude demodulator with internal oscillator",
	"A",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_AM_Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"AM_Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_AM_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","reference phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","AM_Demod");
palette_group("Timed, Modem","Timed, Modem","AM_Demod");

create_constant_form ("_n_x5fAM_fConventional_x5fAm", 
	"Conventional Am",
	0,
	"0",
	"Conventional Am");
create_constant_form ("_n_x5fAM_fDSB_x5fSC_x5fAm", 
	"DSB SC Am",
	0,
	"1",
	"DSB SC Am");
create_form_set("_n_x5fAM_fTypeSet",
	"_n_x5fAM_fConventional_x5fAm",
	"_n_x5fAM_fDSB_x5fSC_x5fAm",
	"StdForm");
create_item ("_AM","Amplitude modulated carrier with single modulating tone",
	"A",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_AM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fAM_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_AM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("Type","type of AM",
		PARM_INT,
		"_n_x5fAM_fTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fAM_fConventional_x5fAm","Conventional_Am")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm",".010")),
	create_parm ("Phase","unmodulated carrier phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VRef","modulator reference voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("FSignal","modulation signal frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")),
	create_parm ("VPeak","peak modulation voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Sources","Timed, Sources","_AM");
palette_group("Timed, Sources","Timed, Sources","_AM");

create_constant_form ("_nAM_fConventional_x5fAm", 
	"Conventional Am",
	0,
	"0",
	"Conventional Am");
create_constant_form ("_nAM_fDSB_x5fSC_x5fAm", 
	"DSB SC Am",
	0,
	"1",
	"DSB SC Am");
create_form_set("_nAM_fTypeSet",
	"_nAM_fConventional_x5fAm",
	"_nAM_fDSB_x5fSC_x5fAm",
	"StdForm");
create_item ("AM","Amplitude modulated carrier with single modulating tone",
	"A",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_AM",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"AM",
	SPDesignAnnotFmt,
	"SYM_DSN_AM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("Type","type of AM",
		PARM_INT,
		"_nAM_fTypeSet",
		UNITLESS_UNIT,
		prm("_nAM_fConventional_x5fAm","Conventional_Am")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("Power","unmodulated carrier power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm",".010")),
	create_parm ("Phase","unmodulated carrier phase, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VRef","modulator reference voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("FSignal","modulation signal frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")),
	create_parm ("VPeak","peak modulation voltage level",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Sources","Timed, Sources","AM");
palette_group("Timed, Sources","Timed, Sources","AM");

create_item ("_ADC_Timed","Analog-to-digital converter with RF clock for analog input sample-and-hold",
	"A",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_ADC_Timed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fADC_x5fTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_ADC_Timed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("NBits","number of bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("VRef","reference voltage, -VRef<=input<=VRef",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("INL","integral nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DNL","differential nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Data Processing","Timed, Data Processing","_ADC_Timed");
palette_group("Timed, Data Processing","Timed, Data Processing","_ADC_Timed");

create_item ("ADC_Timed","Analog-to-digital converter with RF clock for analog input sample-and-hold",
	"A",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_ADC_Timed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"ADC_Timed",
	SPDesignAnnotFmt,
	"SYM_DSN_ADC_Timed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("NBits","number of bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("VRef","reference voltage, -VRef<=input<=VRef",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("INL","integral nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("DNL","differential nonlinearity relative to least significant bit (LSB)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Data Processing","Timed, Data Processing","ADC_Timed");
palette_group("Timed, Data Processing","Timed, Data Processing","ADC_Timed");

create_item ("TimedToInt","Timed to Integer",
	"T",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_TimedToInt",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nTimedToInt_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_TimedToInt",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Signal Converters","Signal Converters","TimedToInt");
palette_group("Signal Converters","Signal Converters","TimedToInt");

create_item ("TimedToFloat","Timed to Floating-Point",
	"T",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_TimedToFloat",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nTimedToFloat_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_TimedToFloat",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Signal Converters","Signal Converters","TimedToFloat");
palette_group("Signal Converters","Signal Converters","TimedToFloat");

create_item ("TimedToData","Timed to data: i, q, time, fc",
	"T",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_TimedToData",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nTimedToData_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_TimedToData",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Signal Converters","Signal Converters","TimedToData");
palette_group("Signal Converters","Signal Converters","TimedToData");

create_item ("TimedToCx","Timed to Complex",
	"T",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_TimedToCx",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nTimedToCx_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_TimedToCx",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Signal Converters","Signal Converters","TimedToCx");
palette_group("Signal Converters","Signal Converters","TimedToCx");

create_item ("TimedIQToFloatIQ","baseband timed I and Q to floating-point I and Q",
	"T",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_TimedIQToFloatIQ",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nTimedIQToFloatIQ_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_TimedIQToFloatIQ",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Signal Converters","Signal Converters","TimedIQToFloatIQ");
palette_group("Signal Converters","Signal Converters","TimedIQToFloatIQ");

create_item ("TimedIQToCx","baseband timed I and Q to complex",
	"T",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_TimedIQToCx",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nTimedIQToCx_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_TimedIQToCx",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Signal Converters","Signal Converters","TimedIQToCx");
palette_group("Signal Converters","Signal Converters","TimedIQToCx");

create_item ("SetFc","Format Specific Output Data File",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SetFc",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nSetFc_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_SetFc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("OutFc","Output Carrier Frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")));
library_group("Testing (for development use only)","Testing (for development use only)","SetFc");
palette_group("Testing (for development use only)","Testing (for development use only)","SetFc");

create_item ("ResistorNetwork","Format Specific Output Data File",
	"R",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_ResistorNetwork",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nResistorNetwork_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_ResistorNetwork",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("rs","rs",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		RESISTANCE_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("rstemp","rstemp",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		TEMPERATURE_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("rp","rp",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		RESISTANCE_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("rptemp","rptemp",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		TEMPERATURE_UNIT,
		prm("StringAndReference","\"\"")));
library_group("Testing (for development use only)","Testing (for development use only)","ResistorNetwork");
palette_group("Testing (for development use only)","Testing (for development use only)","ResistorNetwork");

create_item ("NewFc","Integer to Timed",
	"N",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_NewFc",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nNewFc_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_NewFc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("OutFc","Output Carrier Frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")));
library_group("Testing (for development use only)","Testing (for development use only)","NewFc");
palette_group("Testing (for development use only)","Testing (for development use only)","NewFc");

create_item ("IntToTimed","Integer to Timed",
	"I",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_IntToTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nIntToTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_IntToTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TStep","output time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Signal Converters","Signal Converters","IntToTimed");
palette_group("Signal Converters","Signal Converters","IntToTimed");

create_item ("FloatToTimed","Floating-Point to Timed",
	"F",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_FloatToTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nFloatToTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_FloatToTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TStep","output time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Signal Converters","Signal Converters","FloatToTimed");
palette_group("Signal Converters","Signal Converters","FloatToTimed");

create_item ("FloatIQToTimedIQ","floating-point I and Q to baseband timed I and Q",
	"F",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_FloatIQToTimedIQ",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nFloatIQToTimedIQ_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_FloatIQToTimedIQ",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TStep","output time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Signal Converters","Signal Converters","FloatIQToTimedIQ");
palette_group("Signal Converters","Signal Converters","FloatIQToTimedIQ");

create_constant_form ("_nFakeTimedSource_fBaseBand", 
	"BaseBand",
	0,
	"0",
	"BaseBand");
create_constant_form ("_nFakeTimedSource_fComplexEnv", 
	"ComplexEnv",
	0,
	"1",
	"ComplexEnv");
create_form_set("_nFakeTimedSource_fFlavorSet",
	"_nFakeTimedSource_fBaseBand",
	"_nFakeTimedSource_fComplexEnv",
	"StdForm");
create_item ("FakeTimedSource","Timed Data Collector",
	"F",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_FakeTimedSource",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nFakeTimedSource_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_FakeTimedSource",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("I","Inphase componenet of complex envelope",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("Q","Quadrature componenet of complex envelope",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Fc","Carrier frequency in Hertz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1000.0")),
	create_parm ("TimeStep","Time step of the output porthole",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.E-3")),
	create_parm ("Flavor","type of time domain particle the star produces",
		PARM_INT,
		"_nFakeTimedSource_fFlavorSet",
		UNITLESS_UNIT,
		prm("_nFakeTimedSource_fBaseBand","BaseBand")));
library_group("Testing (for development use only)","Testing (for development use only)","FakeTimedSource");
palette_group("Testing (for development use only)","Testing (for development use only)","FakeTimedSource");

create_item ("CxToTimedIQ","complex to baseband timed I and Q",
	"C",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_CxToTimedIQ",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nCxToTimedIQ_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_CxToTimedIQ",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TStep","output time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Signal Converters","Signal Converters","CxToTimedIQ");
palette_group("Signal Converters","Signal Converters","CxToTimedIQ");

create_item ("CxToTimed","Complex to Timed",
	"C",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_CxToTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nCxToTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_CxToTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TStep","output time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("FCarrier","output carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1.0e9")));
library_group("Signal Converters","Signal Converters","CxToTimed");
palette_group("Signal Converters","Signal Converters","CxToTimed");

create_item ("ConstTimed","Constant timed signal generator",
	"C",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_ConstTimed",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nConstTimed_ltsdfstars",
	SPComponentAnnotFmt,
	"SYM_ConstTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TStep","simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0001")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Value","signal value",
		PARM_COMPLEX,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, Sources","Timed, Sources","ConstTimed");
palette_group("Timed, Sources","Timed, Sources","ConstTimed");

