set_design_type( sigproc_net );
create_item ("HSUPA_BS_RX_FRC8_DemodulationInfo","BS_RX_Demodulation Information for FRC8",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_BS_RX_FRC8_DemodulationInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_BS_RX_FRC8_DemodulationInfo",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_BS_RX_FRC8_DemodulationInfo");
palette_group("InformationComponent","InformationComponent","HSUPA_BS_RX_FRC8_DemodulationInfo");

create_constant_form ("_nHSUPA_x5fEVM_x5fold_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nHSUPA_x5fEVM_x5fold_fLinkDirSet",
	"_nHSUPA_x5fEVM_x5fold_fDownlink",
	"_nHSUPA_x5fEVM_x5fold_fUplink",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fLONG", 
	"LONG",
	0,
	"0",
	"Long");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fSHORT", 
	"SHORT",
	0,
	"1",
	"Short");
create_form_set("_nHSUPA_x5fEVM_x5fold_fULScrambleTypeSet",
	"_nHSUPA_x5fEVM_x5fold_fLONG",
	"_nHSUPA_x5fEVM_x5fold_fSHORT",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fnormal", 
	"normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fright", 
	"right",
	0,
	"1",
	"Right Alternate");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fleft", 
	"left",
	0,
	"2",
	"Left Alternate");
create_form_set("_nHSUPA_x5fEVM_x5fold_fDLScrambleTypeSet",
	"_nHSUPA_x5fEVM_x5fold_fnormal",
	"_nHSUPA_x5fEVM_x5fold_fright",
	"_nHSUPA_x5fEVM_x5fold_fleft",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fCoherent", 
	"Coherent",
	0,
	"0",
	"Coherent");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fNonCoherent", 
	"NonCoherent",
	0,
	"1",
	"NonCoherent");
create_form_set("_nHSUPA_x5fEVM_x5fold_fCorrelatorSet",
	"_nHSUPA_x5fEVM_x5fold_fCoherent",
	"_nHSUPA_x5fEVM_x5fold_fNonCoherent",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fON", 
	"ON",
	0,
	"1",
	"ON");
create_form_set("_nHSUPA_x5fEVM_x5fold_fSCHSet",
	"_nHSUPA_x5fEVM_x5fold_fOFF",
	"_nHSUPA_x5fEVM_x5fold_fON",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fON", 
	"ON",
	0,
	"1",
	"ON");
create_form_set("_nHSUPA_x5fEVM_x5fold_fCPICHSet",
	"_nHSUPA_x5fEVM_x5fold_fOFF",
	"_nHSUPA_x5fEVM_x5fold_fON",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fEVM_x5fRatio", 
	"EVM_Ratio",
	0,
	"0",
	"EVM as ratio");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fEVM_x5fPercent", 
	"EVM_Percent",
	0,
	"1",
	"EVM as percent");
create_form_set("_nHSUPA_x5fEVM_x5fold_fEVMValueSet",
	"_nHSUPA_x5fEVM_x5fold_fEVM_x5fRatio",
	"_nHSUPA_x5fEVM_x5fold_fEVM_x5fPercent",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fEVM_x5fold_fCorrect_x5fIQ_x5fOffsetSet",
	"_nHSUPA_x5fEVM_x5fold_fNO",
	"_nHSUPA_x5fEVM_x5fold_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fEVM_x5fold_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fEVM_x5fold_fExcludeTransitionSet",
	"_nHSUPA_x5fEVM_x5fold_fNO",
	"_nHSUPA_x5fEVM_x5fold_fYES",
	"StdForm");
create_item ("HSUPA_EVM_old","EVM and Phase Discontinuity Measurements",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_EVM_old",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_EVM_old",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_EVM_old",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fold_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fold_fUplink","Uplink")),
	create_parm ("SlotFormat","slot format",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleCode","index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ULScrambleType","uplink scramble code type",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fold_fULScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fold_fLONG","LONG")),
	create_parm ("ScrambleOffset","scramble code offset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DLScrambleType","downlink scramble code type",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fold_fDLScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fold_fnormal","normal")),
	create_parm ("SpreadCode","index of spread code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SampleRate","sample rate",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("StartSlot","number of slot to be ignored",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SlotNum","slot number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Correlator","correlator method",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fold_fCorrelatorSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fold_fCoherent","Coherent")),
	create_parm ("SCH","switch for SCH",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fold_fSCHSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fold_fON","ON")),
	create_parm ("CPICH","switch for CPICH",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fold_fCPICHSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fold_fOFF","OFF")),
	create_parm ("EVMValue","EVM value expression options",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fold_fEVMValueSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fold_fEVM_x5fPercent","EVM_Percent")),
	create_parm ("Correct_IQ_Offset","switch for IQ offset correction",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fold_fCorrect_x5fIQ_x5fOffsetSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fold_fYES","YES")),
	create_parm ("DUT_DelayBound","DUT delay bound",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.00001 sec")),
	create_parm ("ExcludeTransition","select YES for predictable power changes",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fold_fExcludeTransitionSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fold_fYES","YES")));
library_group("HSUPA, Measurement","HSUPA, Measurement","HSUPA_EVM_old");
palette_group("HSUPA, Measurement","HSUPA, Measurement","HSUPA_EVM_old");

create_item ("HSUPA_UE_TX_Info","UE_TX Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UE_TX_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UE_TX_Info",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_UE_TX_Info");
palette_group("InformationComponent","InformationComponent","HSUPA_UE_TX_Info");

create_item ("HSUPA_UE_Tx_ACLR_Info","UE_Tx_ACLR Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UE_Tx_ACLR_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UE_Tx_ACLR_Info",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_UE_Tx_ACLR_Info");
palette_group("InformationComponent","InformationComponent","HSUPA_UE_Tx_ACLR_Info");

create_item ("HSUPA_UE_Tx_CCDF_Info","UE_Tx_CCDF Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UE_Tx_CCDF_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UE_Tx_CCDF_Info",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_UE_Tx_CCDF_Info");
palette_group("InformationComponent","InformationComponent","HSUPA_UE_Tx_CCDF_Info");

create_item ("HSUPA_UE_Tx_EVM_Info","UE_Tx_EVM Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UE_Tx_EVM_Info",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UE_Tx_EVM_Info",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_UE_Tx_EVM_Info");
palette_group("InformationComponent","InformationComponent","HSUPA_UE_Tx_EVM_Info");

create_item ("HSUPA_UE_Tx_Max_PowerInfo","UE_Tx_Max_Power Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UE_Tx_Max_PowerInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UE_Tx_Max_PowerInfo",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_UE_Tx_Max_PowerInfo");
palette_group("InformationComponent","InformationComponent","HSUPA_UE_Tx_Max_PowerInfo");

create_item ("HSUPA_UE_Tx_SpecEmissionsInfo","UE_Tx_SpecEmissions Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UE_Tx_SpecEmissionsInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UE_Tx_SpecEmissionsInfo",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_UE_Tx_SpecEmissionsInfo");
palette_group("InformationComponent","InformationComponent","HSUPA_UE_Tx_SpecEmissionsInfo");

create_item ("HSUPA_UE_Rx_EHICH_DetectionInfo","UE_Rx_EHICH_Detection Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UE_Rx_EHICH_DetectionInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UE_Rx_EHICH_DetectionInfo",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_UE_Rx_EHICH_DetectionInfo");
palette_group("InformationComponent","InformationComponent","HSUPA_UE_Rx_EHICH_DetectionInfo");

create_item ("HSUPA_UE_Rx_ERGCH_DetectionInfo","UE_Rx_ERGCH_Detection Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UE_Rx_ERGCH_DetectionInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UE_Rx_ERGCH_DetectionInfo",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_UE_Rx_ERGCH_DetectionInfo");
palette_group("InformationComponent","InformationComponent","HSUPA_UE_Rx_ERGCH_DetectionInfo");

create_item ("HSUPA_UE_Rx_EAGCH_DemodulationInfo","UE_Rx_EAGCH_Demodulation Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UE_Rx_EAGCH_DemodulationInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UE_Rx_EAGCH_DemodulationInfo",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_UE_Rx_EAGCH_DemodulationInfo");
palette_group("InformationComponent","InformationComponent","HSUPA_UE_Rx_EAGCH_DemodulationInfo");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fDL_x5fReceiver_fTTISet",
	"_nHSUPA_x5fDL_x5fReceiver_fTTI_x5f2ms",
	"_nHSUPA_x5fDL_x5fReceiver_fTTI_x5f10ms",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fnormal", 
	"normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fright", 
	"right",
	0,
	"1",
	"Right Alternate");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fleft", 
	"left",
	0,
	"2",
	"Left Alternate");
create_form_set("_nHSUPA_x5fDL_x5fReceiver_fScrambleTypeSet",
	"_nHSUPA_x5fDL_x5fReceiver_fnormal",
	"_nHSUPA_x5fDL_x5fReceiver_fright",
	"_nHSUPA_x5fDL_x5fReceiver_fleft",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fCH_x5fGAUSSIAN", 
	"CH_GAUSSIAN",
	0,
	"0",
	"Gaussian");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fCH_x5fFADING", 
	"CH_FADING",
	0,
	"1",
	"Fading");
create_form_set("_nHSUPA_x5fDL_x5fReceiver_fChannelTypeSet",
	"_nHSUPA_x5fDL_x5fReceiver_fCH_x5fGAUSSIAN",
	"_nHSUPA_x5fDL_x5fReceiver_fCH_x5fFADING",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fKnown", 
	"Known",
	0,
	"0",
	"Known");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fEstimated", 
	"Estimated",
	0,
	"1",
	"Estimated");
create_form_set("_nHSUPA_x5fDL_x5fReceiver_fChannelInfoSet",
	"_nHSUPA_x5fDL_x5fReceiver_fKnown",
	"_nHSUPA_x5fDL_x5fReceiver_fEstimated",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fEverySlot", 
	"EverySlot",
	0,
	"0",
	"EverySlot");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fOnce", 
	"Once",
	0,
	"1",
	"Once");
create_form_set("_nHSUPA_x5fDL_x5fReceiver_fPathSearchSet",
	"_nHSUPA_x5fDL_x5fReceiver_fEverySlot",
	"_nHSUPA_x5fDL_x5fReceiver_fOnce",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fCoherent", 
	"Coherent",
	0,
	"0",
	"Coherent");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fNonCoherent", 
	"NonCoherent",
	0,
	"1",
	"NonCoherent");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fCombined", 
	"Combined",
	0,
	"2",
	"Combined");
create_form_set("_nHSUPA_x5fDL_x5fReceiver_fSearchMethodSet",
	"_nHSUPA_x5fDL_x5fReceiver_fCoherent",
	"_nHSUPA_x5fDL_x5fReceiver_fNonCoherent",
	"_nHSUPA_x5fDL_x5fReceiver_fCombined",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fON", 
	"ON",
	0,
	"1",
	"ON");
create_form_set("_nHSUPA_x5fDL_x5fReceiver_fRxEHICH_x5fERGCHSet",
	"_nHSUPA_x5fDL_x5fReceiver_fOFF",
	"_nHSUPA_x5fDL_x5fReceiver_fON",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");
create_constant_form ("_nHSUPA_x5fDL_x5fReceiver_fON", 
	"ON",
	0,
	"1",
	"ON");
create_form_set("_nHSUPA_x5fDL_x5fReceiver_fRxEAGCHSet",
	"_nHSUPA_x5fDL_x5fReceiver_fOFF",
	"_nHSUPA_x5fDL_x5fReceiver_fON",
	"StdForm");
create_item ("HSUPA_DL_Receiver","HSUPA downlink receiver",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_DL_Receiver",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_DL_Receiver",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_DL_Receiver",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiver_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiver_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("EHICH_SqnIdx","Signature sequence index of EHICH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ERGCH_SqnIdx","Signature sequence index of ERGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("EHI_ERG_SpreadCode","Spreading code for E-HICH and E-RGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("EAGCH_SpreadCode","Spreading code for E-AGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("ERNTI","E-DCH radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("ScrambleOffset","Scramble code offset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleType","Scramble code type",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiver_fScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiver_fnormal","normal")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SamplesPerChip","Samples per chip",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("MaxDelaySample","Maximum delay boundary, in terms of samples",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChannelType","Select the channel type to be processed",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiver_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiver_fCH_x5fGAUSSIAN","CH_GAUSSIAN")),
	create_parm ("ChannelInfo","Fading channel information source",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiver_fChannelInfoSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiver_fKnown","Known")),
	create_parm ("ChannelInfoOffset","Offset between spread code and channel information in terms of sample",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PathSearch","Path search frequency",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiver_fPathSearchSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiver_fOnce","Once")),
	create_parm ("SearchMethod","Path search method",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiver_fSearchMethodSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiver_fCoherent","Coherent")),
	create_parm ("SearchSlotsNum","Number of slots for path search",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PathNum","Number of Rake fingers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PathDelaySample","Delay for each finger, in terms of samples",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0\"")),
	create_parm ("RxEHICH_ERGCH","Switch of EHICH and/or ERGCH demodulation",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiver_fRxEHICH_x5fERGCHSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiver_fON","ON")),
	create_parm ("RxEAGCH","Switch of EAGCH demodulation",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiver_fRxEAGCHSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiver_fON","ON")),
	create_parm ("Threshold_EHICH","Threshold for decoding E-HICH",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-32")),
	create_parm ("Threshold_ERGCH","Threshold for decoding E-RGCH",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-20")));
library_group("HSUPA, Receivers","HSUPA, Receivers","HSUPA_DL_Receiver");
palette_group("HSUPA, Receivers","HSUPA, Receivers","HSUPA_DL_Receiver");

create_constant_form ("_nHSUPA_x5fEAGCH_x5fDecode_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fEAGCH_x5fDecode_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fEAGCH_x5fDecode_fTTISet",
	"_nHSUPA_x5fEAGCH_x5fDecode_fTTI_x5f2ms",
	"_nHSUPA_x5fEAGCH_x5fDecode_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_EAGCH_Decode","Channel decoder of E-DCH absolute grant channel",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_EAGCH_Decode",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_EAGCH_Decode",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_EAGCH_Decode",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fEAGCH_x5fDecode_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEAGCH_x5fDecode_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("ERNTI","E-DCH radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")));
library_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_EAGCH_Decode");
palette_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_EAGCH_Decode");

create_constant_form ("_nHSUPA_x5fDL_x5fSource_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fDL_x5fSource_fTTISet",
	"_nHSUPA_x5fDL_x5fSource_fTTI_x5f2ms",
	"_nHSUPA_x5fDL_x5fSource_fTTI_x5f10ms",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fnormal", 
	"normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fright", 
	"right",
	0,
	"1",
	"Right Alternate");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fleft", 
	"left",
	0,
	"2",
	"Left Alternate");
create_form_set("_nHSUPA_x5fDL_x5fSource_fScrambleTypeSet",
	"_nHSUPA_x5fDL_x5fSource_fnormal",
	"_nHSUPA_x5fDL_x5fSource_fright",
	"_nHSUPA_x5fDL_x5fSource_fleft",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDL_x5fREF_x5f12_x5f2", 
	"DL_REF_12_2",
	0,
	"0",
	"12_2 kbps");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDL_x5fREF_x5f64", 
	"DL_REF_64",
	0,
	"1",
	"64 kbps");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDL_x5fREF_x5f144", 
	"DL_REF_144",
	0,
	"2",
	"144 kbps");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDL_x5fREF_x5f384", 
	"DL_REF_384",
	0,
	"3",
	"384 kbps");
create_form_set("_nHSUPA_x5fDL_x5fSource_fRefChSet",
	"_nHSUPA_x5fDL_x5fSource_fDL_x5fREF_x5f12_x5f2",
	"_nHSUPA_x5fDL_x5fSource_fDL_x5fREF_x5f64",
	"_nHSUPA_x5fDL_x5fSource_fDL_x5fREF_x5f144",
	"_nHSUPA_x5fDL_x5fSource_fDL_x5fREF_x5f384",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDTCH_x5frandom", 
	"DTCH_random",
	0,
	"0",
	"Random");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDTCH_x5fPN9", 
	"DTCH_PN9",
	0,
	"1",
	"PN9");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDTCH_x5fPN15", 
	"DTCH_PN15",
	0,
	"2",
	"PN15");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDTCH_x5fbits_x5frepeat", 
	"DTCH_bits_repeat",
	0,
	"3",
	"Repeat Bits");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDTCH_x5fuser_x5ffile", 
	"DTCH_user_file",
	0,
	"4",
	"UserFile");
create_form_set("_nHSUPA_x5fDL_x5fSource_fDTCHDataPatternSet",
	"_nHSUPA_x5fDL_x5fSource_fDTCH_x5frandom",
	"_nHSUPA_x5fDL_x5fSource_fDTCH_x5fPN9",
	"_nHSUPA_x5fDL_x5fSource_fDTCH_x5fPN15",
	"_nHSUPA_x5fDL_x5fSource_fDTCH_x5fbits_x5frepeat",
	"_nHSUPA_x5fDL_x5fSource_fDTCH_x5fuser_x5ffile",
	"StdForm");
create_text_form ("_nHSUPA_x5fDL_x5fSource_ftxt_x5ffile", 
	"File with txt extension",
	"ReadFileForm", 0, "%v", "%v", get_file_name_list_with_ext, NULL,
	list("DATA_FILES", "txt"), prefix_path_to_data_file);
create_form_set ( "_nHSUPA_x5fDL_x5fSource_fDTCHUserFileName_x5fFileSet",
	"_nHSUPA_x5fDL_x5fSource_ftxt_x5ffile");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDCCH_x5frandom", 
	"DCCH_random",
	0,
	"0",
	"Random");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDCCH_x5fPN9", 
	"DCCH_PN9",
	0,
	"1",
	"PN9");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDCCH_x5fPN15", 
	"DCCH_PN15",
	0,
	"2",
	"PN15");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDCCH_x5fbits_x5frepeat", 
	"DCCH_bits_repeat",
	0,
	"3",
	"Repeat Bits");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fDCCH_x5fuser_x5ffile", 
	"DCCH_user_file",
	0,
	"4",
	"UserFile");
create_form_set("_nHSUPA_x5fDL_x5fSource_fDCCHDataPatternSet",
	"_nHSUPA_x5fDL_x5fSource_fDCCH_x5frandom",
	"_nHSUPA_x5fDL_x5fSource_fDCCH_x5fPN9",
	"_nHSUPA_x5fDL_x5fSource_fDCCH_x5fPN15",
	"_nHSUPA_x5fDL_x5fSource_fDCCH_x5fbits_x5frepeat",
	"_nHSUPA_x5fDL_x5fSource_fDCCH_x5fuser_x5ffile",
	"StdForm");
create_text_form ("_nHSUPA_x5fDL_x5fSource_ftxt_x5ffile", 
	"File with txt extension",
	"ReadFileForm", 0, "%v", "%v", get_file_name_list_with_ext, NULL,
	list("DATA_FILES", "txt"), prefix_path_to_data_file);
create_form_set ( "_nHSUPA_x5fDL_x5fSource_fDCCHUserFileName_x5fFileSet",
	"_nHSUPA_x5fDL_x5fSource_ftxt_x5ffile");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fTPC_x5frandom", 
	"TPC_random",
	0,
	"0",
	"Random");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fTPC_x5fPN9", 
	"TPC_PN9",
	0,
	"1",
	"PN9");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fTPC_x5fPN15", 
	"TPC_PN15",
	0,
	"2",
	"PN15");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fTPC_x5fbits_x5frepeat", 
	"TPC_bits_repeat",
	0,
	"3",
	"Repeat Bits");
create_constant_form ("_nHSUPA_x5fDL_x5fSource_fTPC_x5fuser_x5ffile", 
	"TPC_user_file",
	0,
	"4",
	"UserFile");
create_form_set("_nHSUPA_x5fDL_x5fSource_fTPCDataPatternSet",
	"_nHSUPA_x5fDL_x5fSource_fTPC_x5frandom",
	"_nHSUPA_x5fDL_x5fSource_fTPC_x5fPN9",
	"_nHSUPA_x5fDL_x5fSource_fTPC_x5fPN15",
	"_nHSUPA_x5fDL_x5fSource_fTPC_x5fbits_x5frepeat",
	"_nHSUPA_x5fDL_x5fSource_fTPC_x5fuser_x5ffile",
	"StdForm");
create_text_form ("_nHSUPA_x5fDL_x5fSource_ftxt_x5ffile", 
	"File with txt extension",
	"ReadFileForm", 0, "%v", "%v", get_file_name_list_with_ext, NULL,
	list("DATA_FILES", "txt"), prefix_path_to_data_file);
create_form_set ( "_nHSUPA_x5fDL_x5fSource_fTPCUserFileName_x5fFileSet",
	"_nHSUPA_x5fDL_x5fSource_ftxt_x5ffile");
create_item ("HSUPA_DL_Source","HSUPA downlink source",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_DL_Source",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_DL_Source",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_DL_Source",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fSource_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSource_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("EHICH_SgnlPttrn","E-HICH signal pattern",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"1.0\"")),
	create_parm ("ERGCH_SgnlPttrn","E-RGCH signal pattern",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"1.0\"")),
	create_parm ("EHICH_SqnIdx","Signature sequence index of EHICH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ERGCH_SqnIdx","Signature sequence index of ERGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("EHI_ERG_SpreadCode","Spreading code for E-HICH and E-RGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("EAGCH_SpreadCode","Spreading code for E-AGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("ERNTI","E-DCH radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("EHICH_GainFactor","EHICH power gain in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("ERGCH_GainFactor","ERGCH power gain in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("EAGCH_GainFactor","EAGCH power gain in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("ScrambleOffset","Scramble code offset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleType","Scramble code type",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fSource_fScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSource_fnormal","normal")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RefCh","Reference measurement channel",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSource_fRefChSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSource_fDL_x5fREF_x5f12_x5f2","DL_REF_12_2")),
	create_parm ("DPCH_SpreadCode","Spread code index of DPCH",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","127")),
	create_parm ("CPICH_SpreadCode","Spread code index of CPICH",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PICH_SpreadCode","Spread code index of PICH",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("SCCPCH_SlotFormat","SCCPCH slot format",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SCCPCH_SpreadCode","Spread code index of SCCPCH",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("DPCH_GainFactor","DPCH Ec over Ior in dB, valid only if PowerReference is Ior",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("P_CPICH_GainFactor","Primary CPICH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("S_CPICH_GainFactor","Secondary CPICH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("PCCPCH_GainFactor","PCCPCH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("SCCPCH_GainFactor","SCCPCH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("P_SCH_GainFactor","Primary SCH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("S_SCH_GainFactor","Secondary SCH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("PICH_GainFactor","PICH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("OCNS_GainFactor","OCNS gain in dB, valid only if PowerReference is DPCH_Ec",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("OCNS_ChannelNum","OCNS channel number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("OCNS_PowerArray","OCNS channel power array in dB",
		PARM_REALARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"-1 -3 -3 -5 -2 -4 -8 -7 -4 -6 -5 -9 -10 -8 -6 0\"")),
	create_parm ("OCNS_SpreadFactorArray","OCNS spread factor array",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128\"")),
	create_parm ("OCNS_SpreadCodeArray","OCNS spread code array",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"2 11 17 23 31 38 47 55 62 69 78 85 94 125 113 119\"")),
	create_parm ("OCNS_DataPatternArray","OCNS data pattern array: 0-random, 1-PN9, 2-PN15, 3-Repeat Bits",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"")),
	create_parm ("OCNS_RepBitValueArray","OCNS repeat bit value array",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"")),
	create_parm ("OCNS_tOffsetArray","OCNS time offset in terms of 256 chips",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"")),
	create_parm ("DTCHDataPattern","DTCH source data pattern",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSource_fDTCHDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSource_fDTCH_x5frandom","DTCH_random")),
	create_parm ("DTCHRepBitValue","DTCH repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0xff")),
	create_parm ("DTCHUserFileName","DTCH user-defined data file name",
		PARM_STRING | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSource_fDTCHUserFileName_x5fFileSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSource_ftxt_x5ffile","\"datafile.txt\"")),
	create_parm ("DCCHDataPattern","DCCH source data pattern",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSource_fDCCHDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSource_fDCCH_x5frandom","DCCH_random")),
	create_parm ("DCCHRepBitValue","DCCH repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0xff")),
	create_parm ("DCCHUserFileName","DCCH user-defined data file name",
		PARM_STRING | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSource_fDCCHUserFileName_x5fFileSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSource_ftxt_x5ffile","\"datafile.txt\"")),
	create_parm ("TPCDataPattern","Source data pattern",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSource_fTPCDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSource_fTPC_x5frandom","TPC_random")),
	create_parm ("TPCRepBitValue","TPC repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0xff")),
	create_parm ("TPCUserFileName","TPC user-defined data file name",
		PARM_STRING | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSource_fTPCUserFileName_x5fFileSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSource_ftxt_x5ffile","\"datafile.txt\"")));
library_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_DL_Source");
palette_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_DL_Source");

create_constant_form ("_nHSUPA_x5fEAGCH_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fEAGCH_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fEAGCH_fTTISet",
	"_nHSUPA_x5fEAGCH_fTTI_x5f2ms",
	"_nHSUPA_x5fEAGCH_fTTI_x5f10ms",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEAGCH_fnormal", 
	"normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nHSUPA_x5fEAGCH_fright", 
	"right",
	0,
	"1",
	"Right Alternate");
create_constant_form ("_nHSUPA_x5fEAGCH_fleft", 
	"left",
	0,
	"2",
	"Left Alternate");
create_form_set("_nHSUPA_x5fEAGCH_fScrambleTypeSet",
	"_nHSUPA_x5fEAGCH_fnormal",
	"_nHSUPA_x5fEAGCH_fright",
	"_nHSUPA_x5fEAGCH_fleft",
	"StdForm");
create_item ("HSUPA_EAGCH","E-DCH absolute grant channel",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_EAGCH",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_EAGCH",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_EAGCH",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fEAGCH_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEAGCH_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("EAGCH_SpreadCode","Spreading code for E-AGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("ERNTI","E-DCH radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("ScrambleOffset","Scramble code offset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleType","Scramble code type",
		PARM_INT,
		"_nHSUPA_x5fEAGCH_fScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEAGCH_fnormal","normal")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_EAGCH");
palette_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_EAGCH");

create_constant_form ("_nHSUPA_x5fEHICH_x5fERGCH_fnormal", 
	"normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nHSUPA_x5fEHICH_x5fERGCH_fright", 
	"right",
	0,
	"1",
	"Right Alternate");
create_constant_form ("_nHSUPA_x5fEHICH_x5fERGCH_fleft", 
	"left",
	0,
	"2",
	"Left Alternate");
create_form_set("_nHSUPA_x5fEHICH_x5fERGCH_fScrambleTypeSet",
	"_nHSUPA_x5fEHICH_x5fERGCH_fnormal",
	"_nHSUPA_x5fEHICH_x5fERGCH_fright",
	"_nHSUPA_x5fEHICH_x5fERGCH_fleft",
	"StdForm");
create_item ("HSUPA_EHICH_ERGCH","E-DCH HARQ ACK indicator channel or E-DCH relative grant channel",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_EHICH_ERGCH",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_EHICH_ERGCH",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_EHICH_ERGCH",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SequenceIndex","Signature sequence index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("EHI_ERG_SpreadCode","Spreading code for E-HICH and E-RGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("ScrambleOffset","Scramble code offset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleType","Scramble code type",
		PARM_INT,
		"_nHSUPA_x5fEHICH_x5fERGCH_fScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEHICH_x5fERGCH_fnormal","normal")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_EHICH_ERGCH");
palette_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_EHICH_ERGCH");

create_item ("HSUPA_BS_RX_DemodulationInfo","BS_RX_Demodulation Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_BS_RX_DemodulationInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_BS_RX_DemodulationInfo",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_BS_RX_DemodulationInfo");
palette_group("InformationComponent","InformationComponent","HSUPA_BS_RX_DemodulationInfo");

create_item ("HSUPA_BS_RX_FalseAlarmInfo","BS_RX_FalseAlarm Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_BS_RX_FalseAlarmInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_BS_RX_FalseAlarmInfo",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_BS_RX_FalseAlarmInfo");
palette_group("InformationComponent","InformationComponent","HSUPA_BS_RX_FalseAlarmInfo");

create_item ("HSUPA_BS_RX_MIssedDetectionInfo","BS_RX_MIssedDetection Information",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_BS_RX_MIssedDetectionInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_BS_RX_MIssedDetectionInfo",
	SPDesignAnnotFmt,
	"SYM_HSUPA_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","HSUPA_BS_RX_MIssedDetectionInfo");
palette_group("InformationComponent","InformationComponent","HSUPA_BS_RX_MIssedDetectionInfo");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fFRC1", 
	"FRC1",
	0,
	"0",
	"FRC1");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fFRC2", 
	"FRC2",
	0,
	"1",
	"FRC2");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fFRC3", 
	"FRC3",
	0,
	"2",
	"FRC3");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fFRC4", 
	"FRC4",
	0,
	"3",
	"FRC4");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fFRC5", 
	"FRC5",
	0,
	"4",
	"FRC5");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fFRC6", 
	"FRC6",
	0,
	"5",
	"FRC6");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fFRC7", 
	"FRC7",
	0,
	"6",
	"FRC7");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fFRC8", 
	"FRC8",
	0,
	"7",
	"FRC8");
create_form_set("_nHSUPA_x5fFRC_x5fReceiver_fFRCSet",
	"_nHSUPA_x5fFRC_x5fReceiver_fFRC1",
	"_nHSUPA_x5fFRC_x5fReceiver_fFRC2",
	"_nHSUPA_x5fFRC_x5fReceiver_fFRC3",
	"_nHSUPA_x5fFRC_x5fReceiver_fFRC4",
	"_nHSUPA_x5fFRC_x5fReceiver_fFRC5",
	"_nHSUPA_x5fFRC_x5fReceiver_fFRC6",
	"_nHSUPA_x5fFRC_x5fReceiver_fFRC7",
	"_nHSUPA_x5fFRC_x5fReceiver_fFRC8",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fFRC_x5fReceiver_fDPDCH_x5fConfiguredSet",
	"_nHSUPA_x5fFRC_x5fReceiver_fNO",
	"_nHSUPA_x5fFRC_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fFRC_x5fReceiver_fHSDPCCH_x5fConfiguredSet",
	"_nHSUPA_x5fFRC_x5fReceiver_fNO",
	"_nHSUPA_x5fFRC_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fLONG", 
	"LONG",
	0,
	"0",
	"Long");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fSHORT", 
	"SHORT",
	0,
	"1",
	"Short");
create_form_set("_nHSUPA_x5fFRC_x5fReceiver_fScrambleSet",
	"_nHSUPA_x5fFRC_x5fReceiver_fLONG",
	"_nHSUPA_x5fFRC_x5fReceiver_fSHORT",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fCH_x5fGAUSSIAN", 
	"CH_GAUSSIAN",
	0,
	"0",
	"Gaussian");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fCH_x5fFADING", 
	"CH_FADING",
	0,
	"1",
	"Fading");
create_form_set("_nHSUPA_x5fFRC_x5fReceiver_fChannelTypeSet",
	"_nHSUPA_x5fFRC_x5fReceiver_fCH_x5fGAUSSIAN",
	"_nHSUPA_x5fFRC_x5fReceiver_fCH_x5fFADING",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fKnown", 
	"Known",
	0,
	"0",
	"Known");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fEstimated", 
	"Estimated",
	0,
	"1",
	"Estimated");
create_form_set("_nHSUPA_x5fFRC_x5fReceiver_fChannelInfoSet",
	"_nHSUPA_x5fFRC_x5fReceiver_fKnown",
	"_nHSUPA_x5fFRC_x5fReceiver_fEstimated",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fFRC_x5fReceiver_fUseMovingEstWindowSet",
	"_nHSUPA_x5fFRC_x5fReceiver_fNO",
	"_nHSUPA_x5fFRC_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fEverySlot", 
	"EverySlot",
	0,
	"0",
	"EverySlot");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fOnce", 
	"Once",
	0,
	"1",
	"Once");
create_form_set("_nHSUPA_x5fFRC_x5fReceiver_fPathSearchSet",
	"_nHSUPA_x5fFRC_x5fReceiver_fEverySlot",
	"_nHSUPA_x5fFRC_x5fReceiver_fOnce",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fCoherent", 
	"Coherent",
	0,
	"0",
	"Coherent");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fNonCoherent", 
	"NonCoherent",
	0,
	"1",
	"NonCoherent");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fCombined", 
	"Combined",
	0,
	"2",
	"Combined");
create_form_set("_nHSUPA_x5fFRC_x5fReceiver_fSearchMethodSet",
	"_nHSUPA_x5fFRC_x5fReceiver_fCoherent",
	"_nHSUPA_x5fFRC_x5fReceiver_fNonCoherent",
	"_nHSUPA_x5fFRC_x5fReceiver_fCombined",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fFRC_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fFRC_x5fReceiver_fUsePastSearchSet",
	"_nHSUPA_x5fFRC_x5fReceiver_fNO",
	"_nHSUPA_x5fFRC_x5fReceiver_fYES",
	"StdForm");
create_item ("HSUPA_FRC_Receiver","HSUPA receiver for fixed reference channel",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_FRC_Receiver",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_FRC_Receiver",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_FRC_Receiver",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FRC","Fixed reference channel",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiver_fFRCSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiver_fFRC1","FRC1")),
	create_parm ("DPDCH_Configured","Setting to YES if DPDCH is configured, otherwise NO",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_x5fReceiver_fDPDCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiver_fNO","NO")),
	create_parm ("HSDPCCH_Configured","Setting to YES if HS-DPCCH is configured, otherwise NO",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_x5fReceiver_fHSDPCCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiver_fNO","NO")),
	create_parm ("Scramble","scramble code type",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiver_fScrambleSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiver_fLONG","LONG")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SamplesPerChip","Samples per chip",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("MaxDelaySample","Maximum delay boundary, in terms of samples",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChannelType","Select the channel type to be processed",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiver_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiver_fCH_x5fGAUSSIAN","CH_GAUSSIAN")),
	create_parm ("ChannelInfo","Fading channel information source",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiver_fChannelInfoSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiver_fKnown","Known")),
	create_parm ("ChannelInfoOffset","Offset between spread code and channel information in terms of sample",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("EstSlotsNum","Number of slots for channel estimation",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("UseMovingEstWindow","If use moving window in channel estimation",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_x5fReceiver_fUseMovingEstWindowSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiver_fNO","NO")),
	create_parm ("PathSearch","Path search frequency",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiver_fPathSearchSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiver_fOnce","Once")),
	create_parm ("SearchMethod","Path search method",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiver_fSearchMethodSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiver_fCoherent","Coherent")),
	create_parm ("SearchSlotsNum","Number of slots for path search",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PathNum","Number of Rake fingers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("UsePastSearch","If use past samples for path search",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_x5fReceiver_fUsePastSearchSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiver_fNO","NO")),
	create_parm ("PathDelaySample","Delay for each finger, in terms of samples",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0\"")),
	create_parm ("TC_Iteration","Turbo code decoder iteration number",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("TC_Alfa","Alfa of lowpass filter",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.4")),
	create_parm ("Threshold_EDPCCH","Threshold for decoding E-DPCCH",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-23.6")));
library_group("HSUPA, Receivers","HSUPA, Receivers","HSUPA_FRC_Receiver");
palette_group("HSUPA, Receivers","HSUPA, Receivers","HSUPA_FRC_Receiver");

create_constant_form ("_nHSUPA_x5fUL_x5fSource_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fUL_x5fSource_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fUL_x5fSource_fCategory_x5f1",
	"_nHSUPA_x5fUL_x5fSource_fCategory_x5f2",
	"_nHSUPA_x5fUL_x5fSource_fCategory_x5f3",
	"_nHSUPA_x5fUL_x5fSource_fCategory_x5f4",
	"_nHSUPA_x5fUL_x5fSource_fCategory_x5f5",
	"_nHSUPA_x5fUL_x5fSource_fCategory_x5f6",
	"_nHSUPA_x5fUL_x5fSource_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fUL_x5fSource_fTTISet",
	"_nHSUPA_x5fUL_x5fSource_fTTI_x5f2ms",
	"_nHSUPA_x5fUL_x5fSource_fTTI_x5f10ms",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fCalculated_x5fusing_x5fRSN", 
	"Calculated using RSN",
	0,
	"0",
	"Calculated using RSN");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fOnly_x5findex_x5f0", 
	"Only index 0",
	0,
	"1",
	"Only index 0");
create_form_set("_nHSUPA_x5fUL_x5fSource_fRV_x5fModeSet",
	"_nHSUPA_x5fUL_x5fSource_fCalculated_x5fusing_x5fRSN",
	"_nHSUPA_x5fUL_x5fSource_fOnly_x5findex_x5f0",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fDepending_x5fon_x5fTTI", 
	"Depending on TTI",
	0,
	"0",
	"Depending on TTI");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fUser_x5fdefined", 
	"User defined",
	0,
	"1",
	"User defined");
create_form_set("_nHSUPA_x5fUL_x5fSource_fHARQ_x5fPrcssModeSet",
	"_nHSUPA_x5fUL_x5fSource_fDepending_x5fon_x5fTTI",
	"_nHSUPA_x5fUL_x5fSource_fUser_x5fdefined",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fRandom", 
	"Random",
	0,
	"0",
	"Random");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fPN9", 
	"PN9",
	0,
	"1",
	"PN9");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fPN15", 
	"PN15",
	0,
	"2",
	"PN15");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fRepeat_x5fBits", 
	"Repeat Bits",
	0,
	"3",
	"Repeat Bits");
create_form_set("_nHSUPA_x5fUL_x5fSource_fDataPatternSet",
	"_nHSUPA_x5fUL_x5fSource_fRandom",
	"_nHSUPA_x5fUL_x5fSource_fPN9",
	"_nHSUPA_x5fUL_x5fSource_fPN15",
	"_nHSUPA_x5fUL_x5fSource_fRepeat_x5fBits",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fUL_x5fSource_fDPDCH_x5fConfiguredSet",
	"_nHSUPA_x5fUL_x5fSource_fNO",
	"_nHSUPA_x5fUL_x5fSource_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fUL_x5fSource_fHSDPCCH_x5fConfiguredSet",
	"_nHSUPA_x5fUL_x5fSource_fNO",
	"_nHSUPA_x5fUL_x5fSource_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fLONG", 
	"LONG",
	0,
	"0",
	"Long");
create_constant_form ("_nHSUPA_x5fUL_x5fSource_fSHORT", 
	"SHORT",
	0,
	"1",
	"Short");
create_form_set("_nHSUPA_x5fUL_x5fSource_fScrambleSet",
	"_nHSUPA_x5fUL_x5fSource_fLONG",
	"_nHSUPA_x5fUL_x5fSource_fSHORT",
	"StdForm");
create_item ("HSUPA_UL_Source","HSUPA uplink signal source",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UL_Source",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UL_Source",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_UL_Source",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSource_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSource_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSource_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSource_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("PuncLimit","Puncturing limit for uplink",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.468")),
	create_parm ("RV_Mode","Redundancy version mode",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSource_fRV_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSource_fCalculated_x5fusing_x5fRSN","Calculated_using_RSN")),
	create_parm ("MaxRSN","Maximum retransmission sequence number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("HARQ_PrcssMode","Way to setting number of HARQ",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUL_x5fSource_fHARQ_x5fPrcssModeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSource_fDepending_x5fon_x5fTTI","Depending_on_TTI")),
	create_parm ("NumHARQ","Number of HARQ processes",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("DataPattern","Source data pattern",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSource_fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSource_fRandom","Random")),
	create_parm ("RepeatBitValue","Repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0x0001")),
	create_parm ("RepeatBitPeriod","Repeating data period",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("DPDCH_Configured","Setting to YES if DPDCH is configured, otherwise NO",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUL_x5fSource_fDPDCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSource_fNO","NO")),
	create_parm ("HSDPCCH_Configured","Setting to YES if HS-DPCCH is configured, otherwise NO",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUL_x5fSource_fHSDPCCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSource_fNO","NO")),
	create_parm ("GainD","channel gain of DPDCH over DPCCH",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-300")),
	create_parm ("GainED","channel gain of E-DPDCH over DPCCH",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		DB_GAIN_UNIT,
		prm("StringAndReference","\"12.04\"")),
	create_parm ("GainEC","channel gain of E-DPCCH over DPCCH",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		DB_GAIN_UNIT,
		prm("StringAndReference","\"6.02\"")),
	create_parm ("GainHS","channel gain of HS-DPCCH over DPCCH",
		PARM_REALARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		DB_GAIN_UNIT,
		prm("StringAndReference","\"-300\"")),
	create_parm ("SlotF_DPDCH","slot format index of DPDCH",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("Scramble","scramble code type",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSource_fScrambleSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSource_fLONG","LONG")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_UL_Source");
palette_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_UL_Source");

create_constant_form ("_nHSUPA_x5fFRC_fFRC1", 
	"FRC1",
	0,
	"0",
	"FRC1");
create_constant_form ("_nHSUPA_x5fFRC_fFRC2", 
	"FRC2",
	0,
	"1",
	"FRC2");
create_constant_form ("_nHSUPA_x5fFRC_fFRC3", 
	"FRC3",
	0,
	"2",
	"FRC3");
create_constant_form ("_nHSUPA_x5fFRC_fFRC4", 
	"FRC4",
	0,
	"3",
	"FRC4");
create_constant_form ("_nHSUPA_x5fFRC_fFRC5", 
	"FRC5",
	0,
	"4",
	"FRC5");
create_constant_form ("_nHSUPA_x5fFRC_fFRC6", 
	"FRC6",
	0,
	"5",
	"FRC6");
create_constant_form ("_nHSUPA_x5fFRC_fFRC7", 
	"FRC7",
	0,
	"6",
	"FRC7");
create_constant_form ("_nHSUPA_x5fFRC_fFRC8", 
	"FRC8",
	0,
	"7",
	"FRC8");
create_form_set("_nHSUPA_x5fFRC_fFRCSet",
	"_nHSUPA_x5fFRC_fFRC1",
	"_nHSUPA_x5fFRC_fFRC2",
	"_nHSUPA_x5fFRC_fFRC3",
	"_nHSUPA_x5fFRC_fFRC4",
	"_nHSUPA_x5fFRC_fFRC5",
	"_nHSUPA_x5fFRC_fFRC6",
	"_nHSUPA_x5fFRC_fFRC7",
	"_nHSUPA_x5fFRC_fFRC8",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_fE_x5fDPDCH_x5ftesting", 
	"E-DPDCH testing",
	0,
	"0",
	"E-DPDCH testing");
create_constant_form ("_nHSUPA_x5fFRC_fE_x5fDPCCH_x5fmissed_x5fdetection_x5ftesting", 
	"E-DPCCH missed detection testing",
	0,
	"1",
	"E-DPCCH missed detection testing");
create_constant_form ("_nHSUPA_x5fFRC_fE_x5fDPCCH_x5ffalse_x5falarm_x5ftesting", 
	"E-DPCCH false alarm testing",
	0,
	"2",
	"E-DPCCH false alarm testing");
create_form_set("_nHSUPA_x5fFRC_fTestCaseSet",
	"_nHSUPA_x5fFRC_fE_x5fDPDCH_x5ftesting",
	"_nHSUPA_x5fFRC_fE_x5fDPCCH_x5fmissed_x5fdetection_x5ftesting",
	"_nHSUPA_x5fFRC_fE_x5fDPCCH_x5ffalse_x5falarm_x5ftesting",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_fRandom", 
	"Random",
	0,
	"0",
	"Random");
create_constant_form ("_nHSUPA_x5fFRC_fPN9", 
	"PN9",
	0,
	"1",
	"PN9");
create_constant_form ("_nHSUPA_x5fFRC_fPN15", 
	"PN15",
	0,
	"2",
	"PN15");
create_constant_form ("_nHSUPA_x5fFRC_fRepeat_x5fBits", 
	"Repeat Bits",
	0,
	"3",
	"Repeat Bits");
create_form_set("_nHSUPA_x5fFRC_fDataPatternSet",
	"_nHSUPA_x5fFRC_fRandom",
	"_nHSUPA_x5fFRC_fPN9",
	"_nHSUPA_x5fFRC_fPN15",
	"_nHSUPA_x5fFRC_fRepeat_x5fBits",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_fLONG", 
	"LONG",
	0,
	"0",
	"Long");
create_constant_form ("_nHSUPA_x5fFRC_fSHORT", 
	"SHORT",
	0,
	"1",
	"Short");
create_form_set("_nHSUPA_x5fFRC_fScrambleSet",
	"_nHSUPA_x5fFRC_fLONG",
	"_nHSUPA_x5fFRC_fSHORT",
	"StdForm");
create_constant_form ("_nHSUPA_x5fFRC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fFRC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fFRC_fEDPCCH_x5fBoostingSet",
	"_nHSUPA_x5fFRC_fNO",
	"_nHSUPA_x5fFRC_fYES",
	"StdForm");
create_item ("HSUPA_FRC","HSUPA fixed reference channel",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_FRC",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_FRC",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_FRC",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FRC","Fixed reference channel",
		PARM_INT,
		"_nHSUPA_x5fFRC_fFRCSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_fFRC1","FRC1")),
	create_parm ("TestCase","Test case",
		PARM_INT,
		"_nHSUPA_x5fFRC_fTestCaseSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_fE_x5fDPDCH_x5ftesting","E_DPDCH_testing")),
	create_parm ("DataPattern","Source data pattern",
		PARM_INT,
		"_nHSUPA_x5fFRC_fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_fRandom","Random")),
	create_parm ("RepeatBitValue","Repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0x0001")),
	create_parm ("RepeatBitPeriod","Repeating data period",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("Scramble","scramble code type",
		PARM_INT,
		"_nHSUPA_x5fFRC_fScrambleSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_fLONG","LONG")),
	create_parm ("EDPCCH_Boosting","Setting to YES if E-DPCCH_Boosting is configured, otherwise NO",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_fEDPCCH_x5fBoostingSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_fNO","NO")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_FRC");
palette_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_FRC");

