set_design_type( sigproc_net );
create_constant_form ("_nHSPA_x5fChannel_x5fH_fBand_x5fI_x5fII_x5fIII_x5fIV", 
	"Band I II III IV",
	0,
	"0",
	"Band I II III IV");
create_constant_form ("_nHSPA_x5fChannel_x5fH_fBand_x5fV_x5fVI", 
	"Band V VI",
	0,
	"1",
	"Band V VI");
create_form_set("_nHSPA_x5fChannel_x5fH_fFreqBandSet",
	"_nHSPA_x5fChannel_x5fH_fBand_x5fI_x5fII_x5fIII_x5fIV",
	"_nHSPA_x5fChannel_x5fH_fBand_x5fV_x5fVI",
	"StdForm");
create_constant_form ("_nHSPA_x5fChannel_x5fH_fPA3", 
	"PA3",
	0,
	"0",
	"PA3");
create_constant_form ("_nHSPA_x5fChannel_x5fH_fPB3", 
	"PB3",
	0,
	"1",
	"PB3");
create_constant_form ("_nHSPA_x5fChannel_x5fH_fVA30", 
	"VA30",
	0,
	"2",
	"VA30");
create_constant_form ("_nHSPA_x5fChannel_x5fH_fVA120", 
	"VA120",
	0,
	"3",
	"VA120");
create_constant_form ("_nHSPA_x5fChannel_x5fH_fCase_x5f8_x5ffor_x5fHSDPA_x5fCQI_x5fTest", 
	"Case 8 for HSDPA CQI Test",
	0,
	"4",
	"Case 8 for HSDPA CQI Test");
create_form_set("_nHSPA_x5fChannel_x5fH_fChProfileSet",
	"_nHSPA_x5fChannel_x5fH_fPA3",
	"_nHSPA_x5fChannel_x5fH_fPB3",
	"_nHSPA_x5fChannel_x5fH_fVA30",
	"_nHSPA_x5fChannel_x5fH_fVA120",
	"_nHSPA_x5fChannel_x5fH_fCase_x5f8_x5ffor_x5fHSDPA_x5fCQI_x5fTest",
	"StdForm");
create_constant_form ("_nHSPA_x5fChannel_x5fH_fFollow_x5fChProfile", 
	"Follow ChProfile",
	0,
	"0",
	"Follow ChProfile");
create_constant_form ("_nHSPA_x5fChannel_x5fH_fUser_x5fdefined", 
	"User defined",
	0,
	"1",
	"User defined");
create_form_set("_nHSPA_x5fChannel_x5fH_fVelocitySettingSet",
	"_nHSPA_x5fChannel_x5fH_fFollow_x5fChProfile",
	"_nHSPA_x5fChannel_x5fH_fUser_x5fdefined",
	"StdForm");
create_constant_form ("_nHSPA_x5fChannel_x5fH_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSPA_x5fChannel_x5fH_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSPA_x5fChannel_x5fH_fPathLossSet",
	"_nHSPA_x5fChannel_x5fH_fNO",
	"_nHSPA_x5fChannel_x5fH_fYES",
	"StdForm");
create_item ("HSPA_Channel_H","HSPA fading channel model",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSPA_Channel_H",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dTSDF_nHSPA_x5fChannel_x5fH_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSPA_Channel_H",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FreqBand","Frequency band",
		PARM_INT,
		"_nHSPA_x5fChannel_x5fH_fFreqBandSet",
		UNITLESS_UNIT,
		prm("_nHSPA_x5fChannel_x5fH_fBand_x5fI_x5fII_x5fIII_x5fIV","Band_I_II_III_IV")),
	create_parm ("ChProfile","Channel profile",
		PARM_INT,
		"_nHSPA_x5fChannel_x5fH_fChProfileSet",
		UNITLESS_UNIT,
		prm("_nHSPA_x5fChannel_x5fH_fVA30","VA30")),
	create_parm ("VelocitySetting","Velocity setting",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSPA_x5fChannel_x5fH_fVelocitySettingSet",
		UNITLESS_UNIT,
		prm("_nHSPA_x5fChannel_x5fH_fFollow_x5fChProfile","Follow_ChProfile")),
	create_parm ("Velocity","Mobile velocity in km/hour",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","30")),
	create_parm ("PathLoss","Option for inclusion of large-scale pathloss",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSPA_x5fChannel_x5fH_fPathLossSet",
		UNITLESS_UNIT,
		prm("_nHSPA_x5fChannel_x5fH_fNO","NO")),
	create_parm ("PropDistance","Propagation distance",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DISTANCE_UNIT,
		prm("StdForm","2000")));
library_group("Testing (for development use only)","Testing (for development use only)","HSPA_Channel_H");
palette_group("Testing (for development use only)","Testing (for development use only)","HSPA_Channel_H");

create_constant_form ("_n_x5fHSUPA_x5fEVM_fDPCCH", 
	"DPCCH",
	0,
	"0",
	"DPCCH");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fPRACH_x5fMESSAGE", 
	"PRACH_MESSAGE",
	0,
	"1",
	"PRACH_MESSAGE");
create_form_set("_n_x5fHSUPA_x5fEVM_fsyncModeSelectionSet",
	"_n_x5fHSUPA_x5fEVM_fDPCCH",
	"_n_x5fHSUPA_x5fEVM_fPRACH_x5fMESSAGE",
	"StdForm");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fI", 
	"I",
	0,
	"0",
	"I");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fQ", 
	"Q",
	0,
	"1",
	"Q");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fIQ", 
	"IQ",
	0,
	"2",
	"IQ");
create_form_set("_n_x5fHSUPA_x5fEVM_fAnalysisIQPartSet",
	"_n_x5fHSUPA_x5fEVM_fI",
	"_n_x5fHSUPA_x5fEVM_fQ",
	"_n_x5fHSUPA_x5fEVM_fIQ",
	"StdForm");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fAutoDetect", 
	"AutoDetect",
	0,
	"0",
	"AutoDetect");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fBPSK", 
	"BPSK",
	0,
	"1",
	"BPSK");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fPAM4", 
	"PAM4",
	0,
	"2",
	"PAM4");
create_form_set("_n_x5fHSUPA_x5fEVM_fModSchemeSet",
	"_n_x5fHSUPA_x5fEVM_fAutoDetect",
	"_n_x5fHSUPA_x5fEVM_fBPSK",
	"_n_x5fHSUPA_x5fEVM_fPAM4",
	"StdForm");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fFullSlot", 
	"FullSlot",
	0,
	"0",
	"FullSlot");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fFirstHalfSlot", 
	"FirstHalfSlot",
	0,
	"1",
	"FirstHalfSlot");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fSecondHalfSlot", 
	"SecondHalfSlot",
	0,
	"2",
	"SecondHalfSlot");
create_form_set("_n_x5fHSUPA_x5fEVM_fEVMLengthInSlotSet",
	"_n_x5fHSUPA_x5fEVM_fFullSlot",
	"_n_x5fHSUPA_x5fEVM_fFirstHalfSlot",
	"_n_x5fHSUPA_x5fEVM_fSecondHalfSlot",
	"StdForm");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fHSUPA_x5fEVM_fExcludeTransientSet",
	"_n_x5fHSUPA_x5fEVM_fNO",
	"_n_x5fHSUPA_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fHSUPA_x5fEVM_fMirrorSpectrumSet",
	"_n_x5fHSUPA_x5fEVM_fNO",
	"_n_x5fHSUPA_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fHSUPA_x5fEVM_fEVMIncludeIQOffsetSet",
	"_n_x5fHSUPA_x5fEVM_fNO",
	"_n_x5fHSUPA_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fHSUPA_x5fEVM_fDTXDetectionSet",
	"_n_x5fHSUPA_x5fEVM_fNO",
	"_n_x5fHSUPA_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fHSUPA_x5fEVM_fMultiChannelEstimatorSet",
	"_n_x5fHSUPA_x5fEVM_fNO",
	"_n_x5fHSUPA_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fRMS_x5f_x5fVideo_x5f", 
	"RMS (Video)",
	0,
	"1",
	"RMS (Video)");
create_form_set("_n_x5fHSUPA_x5fEVM_fAverageTypeSet",
	"_n_x5fHSUPA_x5fEVM_fOFF",
	"_n_x5fHSUPA_x5fEVM_fRMS_x5f_x5fVideo_x5f",
	"StdForm");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fHSUPA_x5fEVM_fBypassRRCFilterSet",
	"_n_x5fHSUPA_x5fEVM_fNO",
	"_n_x5fHSUPA_x5fEVM_fYES",
	"StdForm");
create_item ("_HSUPA_EVM","HSUPA EVM measurement",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_EVM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fHSUPA_x5fEVM_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_EVM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RLoad","load resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","physical temperature, in degrees C, of load resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1.9 GHz")),
	create_parm ("ChipRate","symbol rate",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","3840000")),
	create_parm ("alpha","specify the alpha for 3GPP root raised cosine filtering",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.22")),
	create_parm ("LongScrambleCodeNum","index of Long Scramble Code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("syncModeSelection","Sync mode selection",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fsyncModeSelectionSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fDPCCH","DPCCH")),
	create_parm ("DPCCHSlotFormat","the slot format for DPCCH, used for synchronization",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("AnalysisCodeLevel","specifies the channel level that Channel EVM with be calculated for",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("AnalysisCodeIndex","specifies the channel index that Channel EVM with be calculated for",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("AnalysisIQPart","For symbol EVM, choose IQ part for which you would like calculate EVM for",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fAnalysisIQPartSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fI","I")),
	create_parm ("ModScheme","modulation scheme for selected AnalysisCodeLevel and AnalysisCodeIndex",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fModSchemeSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fAutoDetect","AutoDetect")),
	create_parm ("EVMLengthInSlot","This variable sets chip interval of the EVM window in a slot, this feature was added to implement half slot EVM",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fEVMLengthInSlotSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fFullSlot","FullSlot")),
	create_parm ("ExcludeTransient","EVM metrics will exclude first/last 96 chips from the calculation length (normally 1 slot)",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fExcludeTransientSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fNO","NO")),
	create_parm ("MirrorSpectrum","Mirror spectrum about carrier?",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fNO","NO")),
	create_parm ("EVMIncludeIQOffset","selection of calculating EVM pre-compensating for IQ origin offset",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fEVMIncludeIQOffsetSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fNO","NO")),
	create_parm ("DTXDetection","Discontinuous Transmission channels detection",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fDTXDetectionSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fNO","NO")),
	create_parm ("MultiChannelEstimator","When set to TRUE, channel-by-channel timing estimation and compensation",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fMultiChannelEstimatorSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fNO","NO")),
	create_parm ("Start","start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("AverageType","average type",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fAverageTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fOFF","OFF")),
	create_parm ("SlotsToAverage","number of slots that will be averaged if AverageType is RMS (Video)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("BypassRRCFilter","by pass the root raised cosine filter or not",
		PARM_INT,
		"_n_x5fHSUPA_x5fEVM_fBypassRRCFilterSet",
		UNITLESS_UNIT,
		prm("_n_x5fHSUPA_x5fEVM_fNO","NO")));
library_group("HSUPA, Measurement","HSUPA, Measurement","_HSUPA_EVM");
palette_group("HSUPA, Measurement","HSUPA, Measurement","_HSUPA_EVM");

create_constant_form ("_nHSUPA_x5fEVM_fDPCCH", 
	"DPCCH",
	0,
	"0",
	"DPCCH");
create_constant_form ("_nHSUPA_x5fEVM_fPRACH_x5fMESSAGE", 
	"PRACH_MESSAGE",
	0,
	"1",
	"PRACH_MESSAGE");
create_form_set("_nHSUPA_x5fEVM_fsyncModeSelectionSet",
	"_nHSUPA_x5fEVM_fDPCCH",
	"_nHSUPA_x5fEVM_fPRACH_x5fMESSAGE",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_fI", 
	"I",
	0,
	"0",
	"I");
create_constant_form ("_nHSUPA_x5fEVM_fQ", 
	"Q",
	0,
	"1",
	"Q");
create_constant_form ("_nHSUPA_x5fEVM_fIQ", 
	"IQ",
	0,
	"2",
	"IQ");
create_form_set("_nHSUPA_x5fEVM_fAnalysisIQPartSet",
	"_nHSUPA_x5fEVM_fI",
	"_nHSUPA_x5fEVM_fQ",
	"_nHSUPA_x5fEVM_fIQ",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_fAutoDetect", 
	"AutoDetect",
	0,
	"0",
	"AutoDetect");
create_constant_form ("_nHSUPA_x5fEVM_fBPSK", 
	"BPSK",
	0,
	"1",
	"BPSK");
create_constant_form ("_nHSUPA_x5fEVM_fPAM4", 
	"PAM4",
	0,
	"2",
	"PAM4");
create_form_set("_nHSUPA_x5fEVM_fModSchemeSet",
	"_nHSUPA_x5fEVM_fAutoDetect",
	"_nHSUPA_x5fEVM_fBPSK",
	"_nHSUPA_x5fEVM_fPAM4",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_fFullSlot", 
	"FullSlot",
	0,
	"0",
	"FullSlot");
create_constant_form ("_nHSUPA_x5fEVM_fFirstHalfSlot", 
	"FirstHalfSlot",
	0,
	"1",
	"FirstHalfSlot");
create_constant_form ("_nHSUPA_x5fEVM_fSecondHalfSlot", 
	"SecondHalfSlot",
	0,
	"2",
	"SecondHalfSlot");
create_form_set("_nHSUPA_x5fEVM_fEVMLengthInSlotSet",
	"_nHSUPA_x5fEVM_fFullSlot",
	"_nHSUPA_x5fEVM_fFirstHalfSlot",
	"_nHSUPA_x5fEVM_fSecondHalfSlot",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fEVM_fExcludeTransientSet",
	"_nHSUPA_x5fEVM_fNO",
	"_nHSUPA_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fEVM_fMirrorSpectrumSet",
	"_nHSUPA_x5fEVM_fNO",
	"_nHSUPA_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fEVM_fEVMIncludeIQOffsetSet",
	"_nHSUPA_x5fEVM_fNO",
	"_nHSUPA_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fEVM_fDTXDetectionSet",
	"_nHSUPA_x5fEVM_fNO",
	"_nHSUPA_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fEVM_fMultiChannelEstimatorSet",
	"_nHSUPA_x5fEVM_fNO",
	"_nHSUPA_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");
create_constant_form ("_nHSUPA_x5fEVM_fRMS_x5f_x5fVideo_x5f", 
	"RMS (Video)",
	0,
	"1",
	"RMS (Video)");
create_form_set("_nHSUPA_x5fEVM_fAverageTypeSet",
	"_nHSUPA_x5fEVM_fOFF",
	"_nHSUPA_x5fEVM_fRMS_x5f_x5fVideo_x5f",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fEVM_fBypassRRCFilterSet",
	"_nHSUPA_x5fEVM_fNO",
	"_nHSUPA_x5fEVM_fYES",
	"StdForm");
create_item ("HSUPA_EVM","HSUPA EVM measurement",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_EVM",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_EVM",
	SPDesignAnnotFmt,
	"SYM_HSUPA_EVM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RLoad","load resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","physical temperature, in degrees C, of load resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1.9 GHz")),
	create_parm ("ChipRate","symbol rate",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","3840000")),
	create_parm ("alpha","specify the alpha for 3GPP root raised cosine filtering",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.22")),
	create_parm ("LongScrambleCodeNum","index of Long Scramble Code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("syncModeSelection","Sync mode selection",
		PARM_INT,
		"_nHSUPA_x5fEVM_fsyncModeSelectionSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fDPCCH","DPCCH")),
	create_parm ("DPCCHSlotFormat","the slot format for DPCCH, used for synchronization",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("AnalysisCodeLevel","specifies the channel level that Channel EVM with be calculated for",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("AnalysisCodeIndex","specifies the channel index that Channel EVM with be calculated for",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("AnalysisIQPart","For symbol EVM, choose IQ part for which you would like calculate EVM for",
		PARM_INT,
		"_nHSUPA_x5fEVM_fAnalysisIQPartSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fI","I")),
	create_parm ("ModScheme","modulation scheme for selected AnalysisCodeLevel and AnalysisCodeIndex",
		PARM_INT,
		"_nHSUPA_x5fEVM_fModSchemeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fAutoDetect","AutoDetect")),
	create_parm ("EVMLengthInSlot","This variable sets chip interval of the EVM window in a slot, this feature was added to implement half slot EVM",
		PARM_INT,
		"_nHSUPA_x5fEVM_fEVMLengthInSlotSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fFullSlot","FullSlot")),
	create_parm ("ExcludeTransient","EVM metrics will exclude first/last 96 chips from the calculation length (normally 1 slot)",
		PARM_INT,
		"_nHSUPA_x5fEVM_fExcludeTransientSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fNO","NO")),
	create_parm ("MirrorSpectrum","Mirror spectrum about carrier?",
		PARM_INT,
		"_nHSUPA_x5fEVM_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fNO","NO")),
	create_parm ("EVMIncludeIQOffset","selection of calculating EVM pre-compensating for IQ origin offset",
		PARM_INT,
		"_nHSUPA_x5fEVM_fEVMIncludeIQOffsetSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fNO","NO")),
	create_parm ("DTXDetection","Discontinuous Transmission channels detection",
		PARM_INT,
		"_nHSUPA_x5fEVM_fDTXDetectionSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fNO","NO")),
	create_parm ("MultiChannelEstimator","When set to TRUE, channel-by-channel timing estimation and compensation",
		PARM_INT,
		"_nHSUPA_x5fEVM_fMultiChannelEstimatorSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fNO","NO")),
	create_parm ("Start","start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("AverageType","average type",
		PARM_INT,
		"_nHSUPA_x5fEVM_fAverageTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fOFF","OFF")),
	create_parm ("SlotsToAverage","number of slots that will be averaged if AverageType is RMS (Video)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("BypassRRCFilter","by pass the root raised cosine filter or not",
		PARM_INT,
		"_nHSUPA_x5fEVM_fBypassRRCFilterSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_fNO","NO")));
library_group("HSUPA, Measurement","HSUPA, Measurement","HSUPA_EVM");
palette_group("HSUPA, Measurement","HSUPA, Measurement","HSUPA_EVM");

create_constant_form ("_nHSUPA_x5fEVM_x5fH_fEVM_x5fRatio", 
	"EVM_Ratio",
	0,
	"0",
	"EVM as ratio");
create_constant_form ("_nHSUPA_x5fEVM_x5fH_fEVM_x5fPercent", 
	"EVM_Percent",
	0,
	"1",
	"EVM as percent");
create_form_set("_nHSUPA_x5fEVM_x5fH_fEVMValueSet",
	"_nHSUPA_x5fEVM_x5fH_fEVM_x5fRatio",
	"_nHSUPA_x5fEVM_x5fH_fEVM_x5fPercent",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_x5fH_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fEVM_x5fH_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fEVM_x5fH_fCorrect_x5fIQ_x5fOffsetSet",
	"_nHSUPA_x5fEVM_x5fH_fNO",
	"_nHSUPA_x5fEVM_x5fH_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fEVM_x5fH_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fEVM_x5fH_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fEVM_x5fH_fExcludeTransitionSet",
	"_nHSUPA_x5fEVM_x5fH_fNO",
	"_nHSUPA_x5fEVM_x5fH_fYES",
	"StdForm");
create_item ("HSUPA_EVM_H","3GPP FDD EVM measurement",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_EVM_H",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nHSUPA_x5fEVM_x5fH_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_EVM_H",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("StartSym","start symbol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SymBurstLen","burst length in term of symbol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2560")),
	create_parm ("BurstNum","burst number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("EVMValue","EVM value expression options",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fH_fEVMValueSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fH_fEVM_x5fPercent","EVM_Percent")),
	create_parm ("Correct_IQ_Offset","switch for IQ offset correction",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fH_fCorrect_x5fIQ_x5fOffsetSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fH_fYES","YES")),
	create_parm ("MaxDelayRefSample","maximum delay boundary, in terms of samples",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RefSampleRate","reference signal sample rate",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("TestSampleRate","tested signal sample rate",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","128")),
	create_parm ("ExcludeTransition","select YES for predictable power changes",
		PARM_INT,
		"_nHSUPA_x5fEVM_x5fH_fExcludeTransitionSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEVM_x5fH_fYES","YES")));
library_group("Testing (for development use only)","Testing (for development use only)","HSUPA_EVM_H");
palette_group("Testing (for development use only)","Testing (for development use only)","HSUPA_EVM_H");

create_constant_form ("_nHSUPA_x5fOCNS_fnormal", 
	"normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nHSUPA_x5fOCNS_fright", 
	"right",
	0,
	"1",
	"Right Alternate");
create_constant_form ("_nHSUPA_x5fOCNS_fleft", 
	"left",
	0,
	"2",
	"Left Alternate");
create_form_set("_nHSUPA_x5fOCNS_fScrambleTypeSet",
	"_nHSUPA_x5fOCNS_fnormal",
	"_nHSUPA_x5fOCNS_fright",
	"_nHSUPA_x5fOCNS_fleft",
	"StdForm");
create_item ("HSUPA_OCNS","Flexible OCNS generator",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_OCNS",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fOCNS_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_OCNS",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("DPCHNum","downlink DPCH number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("ScrambleCode","index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleOffset","scramble code offset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleType","scramble code type",
		PARM_INT,
		"_nHSUPA_x5fOCNS_fScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fOCNS_fnormal","normal")),
	create_parm ("SpreadCodeArray","index array of spread codes",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"2 11 17 23 31 38 47 55 62 69 78 85 94 125 113 119\"")),
	create_parm ("DataPatternArray","data pattern array: 0-random, 1-PN9, 2-PN15, 3-Repeat Bits",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"")),
	create_parm ("RepBitValueArray","bits value array to be filled in data sequence",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"")),
	create_parm ("PowerArray","channel power array in decibels",
		PARM_REALARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"-1 -3 -3 -5 -2 -4 -8 -7 -4 -6 -5 -9 -10 -8 -6 0\"")),
	create_parm ("tDPCHOffsetArray","DPCH channel offset array",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"86 134 52 45 143 112 59 23 1 88 30 18 30 61 128 143\"")),
	create_parm ("SpreadFactorArray","orthogonal channel spread factor array",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128\"")));
library_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_OCNS");
palette_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_OCNS");

create_item ("HSUPA_DC_CubicMetric","3GPP signal cubic metric calculator",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_DC_CubicMetric",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fDC_x5fCubicMetric_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_DC_CubicMetric",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("StartSym","Start symbol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("BurstLen","Length of input signal burst",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","20480")),
	create_parm ("BurstNum","Number of bursts",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Testing (for development use only)","Testing (for development use only)","HSUPA_DC_CubicMetric");
palette_group("Testing (for development use only)","Testing (for development use only)","HSUPA_DC_CubicMetric");

create_item ("HSUPA_CubicMetric","3GPP signal cubic metric calculator",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_CubicMetric",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fCubicMetric_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_CubicMetric",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CM_k","Slope factor for calculating cubic metric",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.56")),
	create_parm ("StartSym","Start symbol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("BurstLen","Length of input signal burst",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","20480")),
	create_parm ("BurstNum","Number of bursts",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("Testing (for development use only)","Testing (for development use only)","HSUPA_CubicMetric");
palette_group("Testing (for development use only)","Testing (for development use only)","HSUPA_CubicMetric");

create_constant_form ("_nHSUPA_x5fBits_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fBits_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fBits_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fBits_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fBits_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fBits_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fBits_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fBits_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fBits_fCategory_x5f1",
	"_nHSUPA_x5fBits_fCategory_x5f2",
	"_nHSUPA_x5fBits_fCategory_x5f3",
	"_nHSUPA_x5fBits_fCategory_x5f4",
	"_nHSUPA_x5fBits_fCategory_x5f5",
	"_nHSUPA_x5fBits_fCategory_x5f6",
	"_nHSUPA_x5fBits_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fBits_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fBits_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fBits_fTTISet",
	"_nHSUPA_x5fBits_fTTI_x5f2ms",
	"_nHSUPA_x5fBits_fTTI_x5f10ms",
	"StdForm");
create_constant_form ("_nHSUPA_x5fBits_fDepending_x5fon_x5fTTI", 
	"Depending on TTI",
	0,
	"0",
	"Depending on TTI");
create_constant_form ("_nHSUPA_x5fBits_fUser_x5fdefined", 
	"User defined",
	0,
	"1",
	"User defined");
create_form_set("_nHSUPA_x5fBits_fHARQ_x5fPrcssModeSet",
	"_nHSUPA_x5fBits_fDepending_x5fon_x5fTTI",
	"_nHSUPA_x5fBits_fUser_x5fdefined",
	"StdForm");
create_constant_form ("_nHSUPA_x5fBits_fRandom", 
	"Random",
	0,
	"0",
	"Random");
create_constant_form ("_nHSUPA_x5fBits_fPN9", 
	"PN9",
	0,
	"1",
	"PN9");
create_constant_form ("_nHSUPA_x5fBits_fPN15", 
	"PN15",
	0,
	"2",
	"PN15");
create_constant_form ("_nHSUPA_x5fBits_fRepeat_x5fBits", 
	"Repeat Bits",
	0,
	"3",
	"Repeat Bits");
create_form_set("_nHSUPA_x5fBits_fDataPatternSet",
	"_nHSUPA_x5fBits_fRandom",
	"_nHSUPA_x5fBits_fPN9",
	"_nHSUPA_x5fBits_fPN15",
	"_nHSUPA_x5fBits_fRepeat_x5fBits",
	"StdForm");
create_item ("HSUPA_Bits","HSUPA information bit generator",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_Bits",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fBits_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_Bits",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fBits_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fBits_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fBits_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fBits_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("MaxRSN","Maximum retransmission sequence number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("HARQ_PrcssMode","Way to setting number of HARQ",
		PARM_INT,
		"_nHSUPA_x5fBits_fHARQ_x5fPrcssModeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fBits_fDepending_x5fon_x5fTTI","Depending_on_TTI")),
	create_parm ("NumHARQ","Number of HARQ processes",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("DataPattern","Source data pattern",
		PARM_INT,
		"_nHSUPA_x5fBits_fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fBits_fRandom","Random")),
	create_parm ("RepeatBitValue","Repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0x0001")),
	create_parm ("RepeatBitPeriod","Repeating data period",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")));
library_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_Bits");
palette_group("HSUPA, Signal Sources","HSUPA, Signal Sources","HSUPA_Bits");

create_constant_form ("_nHSUPA_x5fEHICH_x5fERGCH_x5fDecode_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fEHICH_x5fERGCH_x5fDecode_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fEHICH_x5fERGCH_x5fDecode_fTTISet",
	"_nHSUPA_x5fEHICH_x5fERGCH_x5fDecode_fTTI_x5f2ms",
	"_nHSUPA_x5fEHICH_x5fERGCH_x5fDecode_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_EHICH_ERGCH_Decode","Decoder of HSUPA EHICH or ERGCH",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_EHICH_ERGCH_Decode",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fEHICH_x5fERGCH_x5fDecode_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_EHICH_ERGCH_Decode",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SequenceIndex","Signature sequence index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fEHICH_x5fERGCH_x5fDecode_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEHICH_x5fERGCH_x5fDecode_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("TransBlockIgnored","Transport block Ignored due to system delay",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Threshold","Threshold",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-32")));
library_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_EHICH_ERGCH_Decode");
palette_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_EHICH_ERGCH_Decode");

create_constant_form ("_nHSUPA_x5fDL_x5fRake_fnormal", 
	"normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fright", 
	"right",
	0,
	"1",
	"Right Alternate");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fleft", 
	"left",
	0,
	"2",
	"Left Alternate");
create_form_set("_nHSUPA_x5fDL_x5fRake_fScrambleTypeSet",
	"_nHSUPA_x5fDL_x5fRake_fnormal",
	"_nHSUPA_x5fDL_x5fRake_fright",
	"_nHSUPA_x5fDL_x5fRake_fleft",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fCH_x5fGAUSSIAN", 
	"CH_GAUSSIAN",
	0,
	"0",
	"Gaussian");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fCH_x5fFADING", 
	"CH_FADING",
	0,
	"1",
	"Fading");
create_form_set("_nHSUPA_x5fDL_x5fRake_fChannelTypeSet",
	"_nHSUPA_x5fDL_x5fRake_fCH_x5fGAUSSIAN",
	"_nHSUPA_x5fDL_x5fRake_fCH_x5fFADING",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fKnown", 
	"Known",
	0,
	"0",
	"Known");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fEstimated", 
	"Estimated",
	0,
	"1",
	"Estimated");
create_form_set("_nHSUPA_x5fDL_x5fRake_fChannelInfoSet",
	"_nHSUPA_x5fDL_x5fRake_fKnown",
	"_nHSUPA_x5fDL_x5fRake_fEstimated",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fEverySlot", 
	"EverySlot",
	0,
	"0",
	"EverySlot");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fOnce", 
	"Once",
	0,
	"1",
	"Once");
create_form_set("_nHSUPA_x5fDL_x5fRake_fPathSearchSet",
	"_nHSUPA_x5fDL_x5fRake_fEverySlot",
	"_nHSUPA_x5fDL_x5fRake_fOnce",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fCoherent", 
	"Coherent",
	0,
	"0",
	"Coherent");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fNonCoherent", 
	"NonCoherent",
	0,
	"1",
	"NonCoherent");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fCombined", 
	"Combined",
	0,
	"2",
	"Combined");
create_form_set("_nHSUPA_x5fDL_x5fRake_fSearchMethodSet",
	"_nHSUPA_x5fDL_x5fRake_fCoherent",
	"_nHSUPA_x5fDL_x5fRake_fNonCoherent",
	"_nHSUPA_x5fDL_x5fRake_fCombined",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fON", 
	"ON",
	0,
	"1",
	"ON");
create_form_set("_nHSUPA_x5fDL_x5fRake_fRxEHICH_x5fERGCHSet",
	"_nHSUPA_x5fDL_x5fRake_fOFF",
	"_nHSUPA_x5fDL_x5fRake_fON",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");
create_constant_form ("_nHSUPA_x5fDL_x5fRake_fON", 
	"ON",
	0,
	"1",
	"ON");
create_form_set("_nHSUPA_x5fDL_x5fRake_fRxEAGCHSet",
	"_nHSUPA_x5fDL_x5fRake_fOFF",
	"_nHSUPA_x5fDL_x5fRake_fON",
	"StdForm");
create_item ("HSUPA_DL_Rake","HSUPA downlink Rake receiver",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_DL_Rake",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fDL_x5fRake_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_DL_Rake",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ScrambleCode","index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleOffset","scramble code offset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleType","scramble code type",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fRake_fScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fRake_fnormal","normal")),
	create_parm ("SampleRate","sample rate",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("MaxDelaySample","maximum delay boundary, in terms of samples",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChannelType","select the channel type to be processed",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fRake_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fRake_fCH_x5fGAUSSIAN","CH_GAUSSIAN")),
	create_parm ("ChannelInfo","fading channel information source",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fRake_fChannelInfoSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fRake_fKnown","Known")),
	create_parm ("ChannelInfoOffset","offset between spread code and channel information in terms of sample",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PathSearch","path search frequency",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fRake_fPathSearchSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fRake_fOnce","Once")),
	create_parm ("SearchMethod","path search method",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fRake_fSearchMethodSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fRake_fCoherent","Coherent")),
	create_parm ("SearchSlotsNum","number of slots for path search",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PathNum","number of Rake fingers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PathDelaySample","delay for each finger, in terms of samples",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0\"")),
	create_parm ("EstSlotsNum","Number of slots for channel estimation",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("EHI_ERG_SpreadCode","Spreading code for E-HICH and E-RGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("EAGCH_SpreadCode","Spreading code for E-AGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("RxEHICH_ERGCH","Switch of EHICH and/or ERGCH demodulation",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fRake_fRxEHICH_x5fERGCHSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fRake_fON","ON")),
	create_parm ("RxEAGCH","Switch of EAGCH demodulation",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fRake_fRxEAGCHSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fRake_fON","ON")));
library_group("HSUPA, Receivers","HSUPA, Receivers","HSUPA_DL_Rake");
palette_group("HSUPA, Receivers","HSUPA, Receivers","HSUPA_DL_Rake");

create_item ("HSUPA_SignatureSqn","HSUPA signature sequence generator",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_SignatureSqn",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fSignatureSqn_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_SignatureSqn",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SequenceIndex","Signature sequence index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_SignatureSqn");
palette_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_SignatureSqn");

create_constant_form ("_nHSUPA_x5fUL_x5fRake_fLONG", 
	"LONG",
	0,
	"0",
	"Long");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fSHORT", 
	"SHORT",
	0,
	"1",
	"Short");
create_form_set("_nHSUPA_x5fUL_x5fRake_fScrambleSet",
	"_nHSUPA_x5fUL_x5fRake_fLONG",
	"_nHSUPA_x5fUL_x5fRake_fSHORT",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fCH_x5fGAUSSIAN", 
	"CH_GAUSSIAN",
	0,
	"0",
	"Gaussian");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fCH_x5fFADING", 
	"CH_FADING",
	0,
	"1",
	"Fading");
create_form_set("_nHSUPA_x5fUL_x5fRake_fChannelTypeSet",
	"_nHSUPA_x5fUL_x5fRake_fCH_x5fGAUSSIAN",
	"_nHSUPA_x5fUL_x5fRake_fCH_x5fFADING",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fKnown", 
	"Known",
	0,
	"0",
	"Known");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fEstimated", 
	"Estimated",
	0,
	"1",
	"Estimated");
create_form_set("_nHSUPA_x5fUL_x5fRake_fChannelInfoSet",
	"_nHSUPA_x5fUL_x5fRake_fKnown",
	"_nHSUPA_x5fUL_x5fRake_fEstimated",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fEverySlot", 
	"EverySlot",
	0,
	"0",
	"EverySlot");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fOnce", 
	"Once",
	0,
	"1",
	"Once");
create_form_set("_nHSUPA_x5fUL_x5fRake_fPathSearchSet",
	"_nHSUPA_x5fUL_x5fRake_fEverySlot",
	"_nHSUPA_x5fUL_x5fRake_fOnce",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fCoherent", 
	"Coherent",
	0,
	"0",
	"Coherent");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fNonCoherent", 
	"NonCoherent",
	0,
	"1",
	"NonCoherent");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fCombined", 
	"Combined",
	0,
	"2",
	"Combined");
create_form_set("_nHSUPA_x5fUL_x5fRake_fSearchMethodSet",
	"_nHSUPA_x5fUL_x5fRake_fCoherent",
	"_nHSUPA_x5fUL_x5fRake_fNonCoherent",
	"_nHSUPA_x5fUL_x5fRake_fCombined",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fUL_x5fRake_fUseMovingEstWindowSet",
	"_nHSUPA_x5fUL_x5fRake_fNO",
	"_nHSUPA_x5fUL_x5fRake_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fUL_x5fRake_fUsePastSearchSet",
	"_nHSUPA_x5fUL_x5fRake_fNO",
	"_nHSUPA_x5fUL_x5fRake_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fUL_x5fRake_fTTISet",
	"_nHSUPA_x5fUL_x5fRake_fTTI_x5f2ms",
	"_nHSUPA_x5fUL_x5fRake_fTTI_x5f10ms",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fUL_x5fRake_fDPDCH_x5fConfiguredSet",
	"_nHSUPA_x5fUL_x5fRake_fNO",
	"_nHSUPA_x5fUL_x5fRake_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fUL_x5fRake_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fUL_x5fRake_fHSDPCCH_x5fConfiguredSet",
	"_nHSUPA_x5fUL_x5fRake_fNO",
	"_nHSUPA_x5fUL_x5fRake_fYES",
	"StdForm");
create_item ("HSUPA_UL_Rake","HSUPA uplink receiver",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_UL_Rake",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fUL_x5fRake_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_UL_Rake",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SlotFormat","slot format",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleCode","index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Scramble","scramble code type",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fRake_fScrambleSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fRake_fLONG","LONG")),
	create_parm ("SampleRate","sample rate",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("MaxDelaySample","maximum delay boundary, in terms of samples",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChannelType","select the channel type to be processed",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fRake_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fRake_fCH_x5fGAUSSIAN","CH_GAUSSIAN")),
	create_parm ("ChannelInfo","fading channel information source",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fRake_fChannelInfoSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fRake_fKnown","Known")),
	create_parm ("ChannelInfoOffset","offset between spread code and channel information in terms of sample",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PathSearch","path search frequency",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fRake_fPathSearchSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fRake_fOnce","Once")),
	create_parm ("SearchMethod","path search method",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fRake_fSearchMethodSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fRake_fCoherent","Coherent")),
	create_parm ("SearchSlotsNum","number of slots for path search",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PathNum","number of Rake fingers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PathDelaySample","delay for each finger, in terms of samples",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0\"")),
	create_parm ("EstSlotsNum","Number of slots for channel estimation",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("UseMovingEstWindow","If use moving window in channel estimation",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUL_x5fRake_fUseMovingEstWindowSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fRake_fNO","NO")),
	create_parm ("UsePastSearch","If use past samples for path searching",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUL_x5fRake_fUsePastSearchSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fRake_fNO","NO")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fRake_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fRake_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("DPDCH_Configured","Setting to YES if DPDCH is configured, otherwise NO",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fRake_fDPDCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fRake_fNO","NO")),
	create_parm ("HSDPCCH_Configured","Setting to YES if HS-DPCCH is configured, otherwise NO",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fRake_fHSDPCCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fRake_fNO","NO")));
library_group("HSUPA, Receivers","HSUPA, Receivers","HSUPA_UL_Rake");
palette_group("HSUPA, Receivers","HSUPA, Receivers","HSUPA_UL_Rake");

create_constant_form ("_nHSUPA_x5fSpread_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fSpread_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fSpread_fDPDCH_x5fConfiguredSet",
	"_nHSUPA_x5fSpread_fNO",
	"_nHSUPA_x5fSpread_fYES",
	"StdForm");
create_constant_form ("_nHSUPA_x5fSpread_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fSpread_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fSpread_fHSDPCCH_x5fConfiguredSet",
	"_nHSUPA_x5fSpread_fNO",
	"_nHSUPA_x5fSpread_fYES",
	"StdForm");
create_item ("HSUPA_Spread","HSUPA spreader",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_Spread",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fSpread_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_Spread",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("DPDCH_Configured","Setting to YES if DPDCH is configured, otherwise NO",
		PARM_INT,
		"_nHSUPA_x5fSpread_fDPDCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fSpread_fNO","NO")),
	create_parm ("HSDPCCH_Configured","Setting to YES if HS-DPCCH is configured, otherwise NO",
		PARM_INT,
		"_nHSUPA_x5fSpread_fHSDPCCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fSpread_fNO","NO")));
library_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_Spread");
palette_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_Spread");

create_constant_form ("_nHSUPA_x5fRateMatch_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fRateMatch_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fRateMatch_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fRateMatch_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fRateMatch_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fRateMatch_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fRateMatch_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fRateMatch_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fRateMatch_fCategory_x5f1",
	"_nHSUPA_x5fRateMatch_fCategory_x5f2",
	"_nHSUPA_x5fRateMatch_fCategory_x5f3",
	"_nHSUPA_x5fRateMatch_fCategory_x5f4",
	"_nHSUPA_x5fRateMatch_fCategory_x5f5",
	"_nHSUPA_x5fRateMatch_fCategory_x5f6",
	"_nHSUPA_x5fRateMatch_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fRateMatch_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fRateMatch_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fRateMatch_fTTISet",
	"_nHSUPA_x5fRateMatch_fTTI_x5f2ms",
	"_nHSUPA_x5fRateMatch_fTTI_x5f10ms",
	"StdForm");
create_constant_form ("_nHSUPA_x5fRateMatch_fCalculated_x5fusing_x5fRSN", 
	"Calculated using RSN",
	0,
	"0",
	"Calculated using RSN");
create_constant_form ("_nHSUPA_x5fRateMatch_fOnly_x5findex_x5f0", 
	"Only index 0",
	0,
	"1",
	"Only index 0");
create_form_set("_nHSUPA_x5fRateMatch_fRV_x5fModeSet",
	"_nHSUPA_x5fRateMatch_fCalculated_x5fusing_x5fRSN",
	"_nHSUPA_x5fRateMatch_fOnly_x5findex_x5f0",
	"StdForm");
create_constant_form ("_nHSUPA_x5fRateMatch_fDepending_x5fon_x5fTTI", 
	"Depending on TTI",
	0,
	"0",
	"Depending on TTI");
create_constant_form ("_nHSUPA_x5fRateMatch_fUser_x5fdefined", 
	"User defined",
	0,
	"1",
	"User defined");
create_form_set("_nHSUPA_x5fRateMatch_fHARQ_x5fPrcssModeSet",
	"_nHSUPA_x5fRateMatch_fDepending_x5fon_x5fTTI",
	"_nHSUPA_x5fRateMatch_fUser_x5fdefined",
	"StdForm");
create_item ("HSUPA_RateMatch","EDCH rate matcher",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_RateMatch",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fRateMatch_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_RateMatch",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fRateMatch_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRateMatch_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fRateMatch_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRateMatch_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("PuncLimit","Puncturing limit for uplink",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.468")),
	create_parm ("RV_Mode","Redundancy version mode",
		PARM_INT,
		"_nHSUPA_x5fRateMatch_fRV_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRateMatch_fCalculated_x5fusing_x5fRSN","Calculated_using_RSN")),
	create_parm ("MaxRSN","Maximum retransmission sequence number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("HARQ_PrcssMode","Way to setting number of HARQ",
		PARM_INT,
		"_nHSUPA_x5fRateMatch_fHARQ_x5fPrcssModeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRateMatch_fDepending_x5fon_x5fTTI","Depending_on_TTI")),
	create_parm ("NumHARQ","Number of HARQ processes",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("maxNumElement_Set0","maximum number of element in Set0",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")));
library_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_RateMatch");
palette_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_RateMatch");

create_constant_form ("_nHSUPA_x5fRateDematch_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fRateDematch_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fRateDematch_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fRateDematch_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fRateDematch_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fRateDematch_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fRateDematch_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fRateDematch_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fRateDematch_fCategory_x5f1",
	"_nHSUPA_x5fRateDematch_fCategory_x5f2",
	"_nHSUPA_x5fRateDematch_fCategory_x5f3",
	"_nHSUPA_x5fRateDematch_fCategory_x5f4",
	"_nHSUPA_x5fRateDematch_fCategory_x5f5",
	"_nHSUPA_x5fRateDematch_fCategory_x5f6",
	"_nHSUPA_x5fRateDematch_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fRateDematch_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fRateDematch_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fRateDematch_fTTISet",
	"_nHSUPA_x5fRateDematch_fTTI_x5f2ms",
	"_nHSUPA_x5fRateDematch_fTTI_x5f10ms",
	"StdForm");
create_constant_form ("_nHSUPA_x5fRateDematch_fCalculated_x5fusing_x5fRSN", 
	"Calculated using RSN",
	0,
	"0",
	"Calculated using RSN");
create_constant_form ("_nHSUPA_x5fRateDematch_fOnly_x5findex_x5f0", 
	"Only index 0",
	0,
	"1",
	"Only index 0");
create_form_set("_nHSUPA_x5fRateDematch_fRV_x5fModeSet",
	"_nHSUPA_x5fRateDematch_fCalculated_x5fusing_x5fRSN",
	"_nHSUPA_x5fRateDematch_fOnly_x5findex_x5f0",
	"StdForm");
create_constant_form ("_nHSUPA_x5fRateDematch_fDepending_x5fon_x5fTTI", 
	"Depending on TTI",
	0,
	"0",
	"Depending on TTI");
create_constant_form ("_nHSUPA_x5fRateDematch_fUser_x5fdefined", 
	"User defined",
	0,
	"1",
	"User defined");
create_form_set("_nHSUPA_x5fRateDematch_fHARQ_x5fPrcssModeSet",
	"_nHSUPA_x5fRateDematch_fDepending_x5fon_x5fTTI",
	"_nHSUPA_x5fRateDematch_fUser_x5fdefined",
	"StdForm");
create_constant_form ("_nHSUPA_x5fRateDematch_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nHSUPA_x5fRateDematch_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nHSUPA_x5fRateDematch_fLLR_x5fBypassSet",
	"_nHSUPA_x5fRateDematch_fNO",
	"_nHSUPA_x5fRateDematch_fYES",
	"StdForm");
create_item ("HSUPA_RateDematch","EDCH rate dematcher",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_RateDematch",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fRateDematch_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_RateDematch",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fRateDematch_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRateDematch_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fRateDematch_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRateDematch_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("PuncLimit","Puncturing limit for uplink",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.468")),
	create_parm ("RV_Mode","Redundancy version mode",
		PARM_INT,
		"_nHSUPA_x5fRateDematch_fRV_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRateDematch_fCalculated_x5fusing_x5fRSN","Calculated_using_RSN")),
	create_parm ("MaxRSN","Maximum retransmission sequence number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("HARQ_PrcssMode","Way to setting number of HARQ",
		PARM_INT,
		"_nHSUPA_x5fRateDematch_fHARQ_x5fPrcssModeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRateDematch_fDepending_x5fon_x5fTTI","Depending_on_TTI")),
	create_parm ("NumHARQ","Number of HARQ processes",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("maxNumElement_Set0","maximum number of element in Set0",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("TransBlockIgnored","Transport block Ignored due to system delay",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("LLR_Bypass","Bypass LLR Combination or not",
		PARM_INT,
		"_nHSUPA_x5fRateDematch_fLLR_x5fBypassSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRateDematch_fNO","NO")));
library_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_RateDematch");
palette_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_RateDematch");

create_constant_form ("_nHSUPA_x5fParamCalc_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fParamCalc_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fParamCalc_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fParamCalc_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fParamCalc_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fParamCalc_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fParamCalc_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fParamCalc_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fParamCalc_fCategory_x5f1",
	"_nHSUPA_x5fParamCalc_fCategory_x5f2",
	"_nHSUPA_x5fParamCalc_fCategory_x5f3",
	"_nHSUPA_x5fParamCalc_fCategory_x5f4",
	"_nHSUPA_x5fParamCalc_fCategory_x5f5",
	"_nHSUPA_x5fParamCalc_fCategory_x5f6",
	"_nHSUPA_x5fParamCalc_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fParamCalc_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fParamCalc_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fParamCalc_fTTISet",
	"_nHSUPA_x5fParamCalc_fTTI_x5f2ms",
	"_nHSUPA_x5fParamCalc_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_ParamCalc","EDCH parameter calculator",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_ParamCalc",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fParamCalc_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_ParamCalc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fParamCalc_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fParamCalc_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fParamCalc_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fParamCalc_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("PuncLimit","Puncturing limit for uplink",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.468")),
	create_parm ("maxNumElement_Set0","maximum number of element in Set0",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")));
library_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_ParamCalc");
palette_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_ParamCalc");

create_constant_form ("_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fPhCH_x5fMap_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f1",
	"_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f2",
	"_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f3",
	"_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f4",
	"_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f5",
	"_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f6",
	"_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fPhCH_x5fMap_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fPhCH_x5fMap_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fPhCH_x5fMap_fTTISet",
	"_nHSUPA_x5fPhCH_x5fMap_fTTI_x5f2ms",
	"_nHSUPA_x5fPhCH_x5fMap_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_PhCH_Map","EDCH physical channel mapper",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_PhCH_Map",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fPhCH_x5fMap_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_PhCH_Map",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fPhCH_x5fMap_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fPhCH_x5fMap_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fPhCH_x5fMap_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fPhCH_x5fMap_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("PuncLimit","Puncturing limit for uplink",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.468")),
	create_parm ("maxNumElement_Set0","maximum number of element in Set0",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")));
library_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_PhCH_Map");
palette_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_PhCH_Map");

create_constant_form ("_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fPhCH_x5fDemap_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f1",
	"_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f2",
	"_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f3",
	"_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f4",
	"_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f5",
	"_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f6",
	"_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fPhCH_x5fDemap_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fPhCH_x5fDemap_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fPhCH_x5fDemap_fTTISet",
	"_nHSUPA_x5fPhCH_x5fDemap_fTTI_x5f2ms",
	"_nHSUPA_x5fPhCH_x5fDemap_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_PhCH_Demap","EDCH physical channel demapper",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_PhCH_Demap",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fPhCH_x5fDemap_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_PhCH_Demap",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fPhCH_x5fDemap_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fPhCH_x5fDemap_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fPhCH_x5fDemap_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fPhCH_x5fDemap_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("PuncLimit","Puncturing limit for uplink",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.468")),
	create_parm ("maxNumElement_Set0","maximum number of element in Set0",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")));
library_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_PhCH_Demap");
palette_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_PhCH_Demap");

create_constant_form ("_nHSUPA_x5fInterleaver_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fInterleaver_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fInterleaver_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fInterleaver_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fInterleaver_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fInterleaver_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fInterleaver_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fInterleaver_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fInterleaver_fCategory_x5f1",
	"_nHSUPA_x5fInterleaver_fCategory_x5f2",
	"_nHSUPA_x5fInterleaver_fCategory_x5f3",
	"_nHSUPA_x5fInterleaver_fCategory_x5f4",
	"_nHSUPA_x5fInterleaver_fCategory_x5f5",
	"_nHSUPA_x5fInterleaver_fCategory_x5f6",
	"_nHSUPA_x5fInterleaver_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fInterleaver_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fInterleaver_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fInterleaver_fTTISet",
	"_nHSUPA_x5fInterleaver_fTTI_x5f2ms",
	"_nHSUPA_x5fInterleaver_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_Interleaver","EDCH interleaver",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_Interleaver",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fInterleaver_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_Interleaver",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fInterleaver_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fInterleaver_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fInterleaver_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fInterleaver_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("PuncLimit","Puncturing limit for uplink",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.468")),
	create_parm ("maxNumElement_Set0","maximum number of element in Set0",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")));
library_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_Interleaver");
palette_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_Interleaver");

create_item ("HSUPA_EDPCCH_ChEncode","HSUPA E-DPCCH channel encoder",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_EDPCCH_ChEncode",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fEDPCCH_x5fChEncode_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_EDPCCH_ChEncode",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_EDPCCH_ChEncode");
palette_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_EDPCCH_ChEncode");

create_constant_form ("_nHSUPA_x5fEDPCCH_x5fChDecode_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fEDPCCH_x5fChDecode_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fEDPCCH_x5fChDecode_fTTISet",
	"_nHSUPA_x5fEDPCCH_x5fChDecode_fTTI_x5f2ms",
	"_nHSUPA_x5fEDPCCH_x5fChDecode_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_EDPCCH_ChDecode","HSUPA E-DPCCH channel decoder",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_EDPCCH_ChDecode",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fEDPCCH_x5fChDecode_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_EDPCCH_ChDecode",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fEDPCCH_x5fChDecode_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fEDPCCH_x5fChDecode_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("Threshold","Threshold",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-23.6")));
library_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_EDPCCH_ChDecode");
palette_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_EDPCCH_ChDecode");

create_item ("HSUPA_EAGCH_RM","HSUPA E-AGCH rate matcher",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_EAGCH_RM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fEAGCH_x5fRM_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_EAGCH_RM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_EAGCH_RM");
palette_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_EAGCH_RM");

create_item ("HSUPA_EAGCH_DeRM","HSUPA E-AGCH rate dematcher",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_EAGCH_DeRM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fEAGCH_x5fDeRM_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_EAGCH_DeRM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_EAGCH_DeRM");
palette_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_EAGCH_DeRM");

create_constant_form ("_nHSUPA_x5fDeinterleaver_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fDeinterleaver_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fDeinterleaver_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fDeinterleaver_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fDeinterleaver_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fDeinterleaver_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fDeinterleaver_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fDeinterleaver_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fDeinterleaver_fCategory_x5f1",
	"_nHSUPA_x5fDeinterleaver_fCategory_x5f2",
	"_nHSUPA_x5fDeinterleaver_fCategory_x5f3",
	"_nHSUPA_x5fDeinterleaver_fCategory_x5f4",
	"_nHSUPA_x5fDeinterleaver_fCategory_x5f5",
	"_nHSUPA_x5fDeinterleaver_fCategory_x5f6",
	"_nHSUPA_x5fDeinterleaver_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fDeinterleaver_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fDeinterleaver_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fDeinterleaver_fTTISet",
	"_nHSUPA_x5fDeinterleaver_fTTI_x5f2ms",
	"_nHSUPA_x5fDeinterleaver_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_Deinterleaver","EDCH deinterleaver",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_Deinterleaver",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fDeinterleaver_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_Deinterleaver",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fDeinterleaver_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDeinterleaver_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fDeinterleaver_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDeinterleaver_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("PuncLimit","Puncturing limit for uplink",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.468")),
	create_parm ("maxNumElement_Set0","maximum number of element in Set0",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")));
library_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_Deinterleaver");
palette_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_Deinterleaver");

create_constant_form ("_nHSUPA_x5fCodeBlkSeg_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fCodeBlkSeg_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fCodeBlkSeg_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fCodeBlkSeg_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fCodeBlkSeg_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fCodeBlkSeg_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fCodeBlkSeg_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fCodeBlkSeg_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fCodeBlkSeg_fCategory_x5f1",
	"_nHSUPA_x5fCodeBlkSeg_fCategory_x5f2",
	"_nHSUPA_x5fCodeBlkSeg_fCategory_x5f3",
	"_nHSUPA_x5fCodeBlkSeg_fCategory_x5f4",
	"_nHSUPA_x5fCodeBlkSeg_fCategory_x5f5",
	"_nHSUPA_x5fCodeBlkSeg_fCategory_x5f6",
	"_nHSUPA_x5fCodeBlkSeg_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fCodeBlkSeg_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fCodeBlkSeg_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fCodeBlkSeg_fTTISet",
	"_nHSUPA_x5fCodeBlkSeg_fTTI_x5f2ms",
	"_nHSUPA_x5fCodeBlkSeg_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_CodeBlkSeg","EDCH code block segmentation",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_CodeBlkSeg",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fCodeBlkSeg_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_CodeBlkSeg",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fCodeBlkSeg_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fCodeBlkSeg_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fCodeBlkSeg_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fCodeBlkSeg_fTTI_x5f2ms","TTI_2ms")));
library_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_CodeBlkSeg");
palette_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_CodeBlkSeg");

create_constant_form ("_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fCodeBlkDeseg_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f1",
	"_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f2",
	"_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f3",
	"_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f4",
	"_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f5",
	"_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f6",
	"_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fCodeBlkDeseg_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fCodeBlkDeseg_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fCodeBlkDeseg_fTTISet",
	"_nHSUPA_x5fCodeBlkDeseg_fTTI_x5f2ms",
	"_nHSUPA_x5fCodeBlkDeseg_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_CodeBlkDeseg","EDCH code block desegmentation",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_CodeBlkDeseg",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fCodeBlkDeseg_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_CodeBlkDeseg",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fCodeBlkDeseg_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fCodeBlkDeseg_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fCodeBlkDeseg_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fCodeBlkDeseg_fTTI_x5f2ms","TTI_2ms")));
library_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_CodeBlkDeseg");
palette_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_CodeBlkDeseg");

create_constant_form ("_nHSUPA_x5fChEncode_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fChEncode_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fChEncode_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fChEncode_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fChEncode_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fChEncode_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fChEncode_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fChEncode_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fChEncode_fCategory_x5f1",
	"_nHSUPA_x5fChEncode_fCategory_x5f2",
	"_nHSUPA_x5fChEncode_fCategory_x5f3",
	"_nHSUPA_x5fChEncode_fCategory_x5f4",
	"_nHSUPA_x5fChEncode_fCategory_x5f5",
	"_nHSUPA_x5fChEncode_fCategory_x5f6",
	"_nHSUPA_x5fChEncode_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fChEncode_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fChEncode_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fChEncode_fTTISet",
	"_nHSUPA_x5fChEncode_fTTI_x5f2ms",
	"_nHSUPA_x5fChEncode_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_ChEncode","EDCH turbo encoder",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_ChEncode",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fChEncode_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_ChEncode",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fChEncode_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fChEncode_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fChEncode_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fChEncode_fTTI_x5f2ms","TTI_2ms")));
library_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_ChEncode");
palette_group("HSUPA, Multiplexers & Coders","HSUPA, Multiplexers & Coders","HSUPA_ChEncode");

create_constant_form ("_nHSUPA_x5fChDecode_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fChDecode_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fChDecode_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fChDecode_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fChDecode_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fChDecode_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fChDecode_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fChDecode_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fChDecode_fCategory_x5f1",
	"_nHSUPA_x5fChDecode_fCategory_x5f2",
	"_nHSUPA_x5fChDecode_fCategory_x5f3",
	"_nHSUPA_x5fChDecode_fCategory_x5f4",
	"_nHSUPA_x5fChDecode_fCategory_x5f5",
	"_nHSUPA_x5fChDecode_fCategory_x5f6",
	"_nHSUPA_x5fChDecode_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fChDecode_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fChDecode_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fChDecode_fTTISet",
	"_nHSUPA_x5fChDecode_fTTI_x5f2ms",
	"_nHSUPA_x5fChDecode_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_ChDecode","EDCH turbo decoder",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_ChDecode",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fChDecode_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_ChDecode",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fChDecode_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fChDecode_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fChDecode_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fChDecode_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("TC_Iteration","Turbo code decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("TC_Alfa","Alfa of lowpass filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.4")));
library_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_ChDecode");
palette_group("HSUPA, Demultiplexers & Decoders","HSUPA, Demultiplexers & Decoders","HSUPA_ChDecode");

create_constant_form ("_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");
create_constant_form ("_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");
create_constant_form ("_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");
create_form_set("_nHSUPA_x5fBER_x5fThroughput_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f1",
	"_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f2",
	"_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f3",
	"_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f4",
	"_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f5",
	"_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f6",
	"_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f7",
	"StdForm");
create_constant_form ("_nHSUPA_x5fBER_x5fThroughput_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");
create_constant_form ("_nHSUPA_x5fBER_x5fThroughput_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");
create_form_set("_nHSUPA_x5fBER_x5fThroughput_fTTISet",
	"_nHSUPA_x5fBER_x5fThroughput_fTTI_x5f2ms",
	"_nHSUPA_x5fBER_x5fThroughput_fTTI_x5f10ms",
	"StdForm");
create_item ("HSUPA_BER_Throughput","EDCH BER and throughput calculator",
	"H",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_HSUPA_BER_Throughput",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_v_dSDF_nHSUPA_x5fBER_x5fThroughput_lsdfhsupastars",
	SPComponentAnnotFmt,
	"SYM_HSUPA_BER_Throughput",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fBER_x5fThroughput_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fBER_x5fThroughput_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fBER_x5fThroughput_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fBER_x5fThroughput_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("MaxRSN","Maximum retransmission sequence number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("TransBlockIgnored","Transport block Ignored due to system delay",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("HSUPA, Measurement","HSUPA, Measurement","HSUPA_BER_Throughput");
palette_group("HSUPA, Measurement","HSUPA, Measurement","HSUPA_BER_Throughput");

