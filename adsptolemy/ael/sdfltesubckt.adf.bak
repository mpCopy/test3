set_design_type( sigproc_net );
create_constant_form ("_nLTE_x5fChannel_x5fITU_fPedestrian_x5fA", 
	"Pedestrian_A",
	0,
	"0",
	"Pedestrian_A");
create_constant_form ("_nLTE_x5fChannel_x5fITU_fPedestrian_x5fB", 
	"Pedestrian_B",
	0,
	"1",
	"Pedestrian_B");
create_constant_form ("_nLTE_x5fChannel_x5fITU_fVehicular_x5fA", 
	"Vehicular_A",
	0,
	"2",
	"Vehicular_A");
create_constant_form ("_nLTE_x5fChannel_x5fITU_fVehicular_x5fB", 
	"Vehicular_B",
	0,
	"3",
	"Vehicular_B");
create_constant_form ("_nLTE_x5fChannel_x5fITU_fUserDefined", 
	"UserDefined",
	0,
	"4",
	"UserDefined");
create_form_set("_nLTE_x5fChannel_x5fITU_fModelTypeSet",
	"_nLTE_x5fChannel_x5fITU_fPedestrian_x5fA",
	"_nLTE_x5fChannel_x5fITU_fPedestrian_x5fB",
	"_nLTE_x5fChannel_x5fITU_fVehicular_x5fA",
	"_nLTE_x5fChannel_x5fITU_fVehicular_x5fB",
	"_nLTE_x5fChannel_x5fITU_fUserDefined",
	"StdForm");
create_constant_form ("_nLTE_x5fChannel_x5fITU_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fChannel_x5fITU_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fChannel_x5fITU_fPathLossSet",
	"_nLTE_x5fChannel_x5fITU_fNO",
	"_nLTE_x5fChannel_x5fITU_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fChannel_x5fITU_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fChannel_x5fITU_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fChannel_x5fITU_fPwrNormalSet",
	"_nLTE_x5fChannel_x5fITU_fNO",
	"_nLTE_x5fChannel_x5fITU_fYES",
	"StdForm");
create_item ("LTE_Channel_ITU","ITU channel model",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_Channel_ITU",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_Channel_ITU",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_Channel_ITU",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","Input resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("ROut","Output resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("ModelType","the ITU-R M.1225 Channel number or User defined Channel",
		PARM_INT,
		"_nLTE_x5fChannel_x5fITU_fModelTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fChannel_x5fITU_fVehicular_x5fA","Vehicular_A")),
	create_parm ("Delay","the delay of each tap in usec, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		TIME_UNIT,
		prm("StringAndReference","{0.0 , 0.31 , 0.71 , 1.09 , 1.73 , 2.51 }")),
	create_parm ("Power","the power in each tap in dB, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0 dB, -1.0 dB, -9.0 dB, -10.0 dB, -15.0 dB, -20.0 dB}")),
	create_parm ("Ricean_factor","the Ricean K-factor in linear scale of each tap, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("Velocity","the velocity of mobile station",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","120")),
	create_parm ("PathLoss","option for inclusion of large-scale pathloss",
		PARM_INT,
		"_nLTE_x5fChannel_x5fITU_fPathLossSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fChannel_x5fITU_fNO","NO")),
	create_parm ("PropDistance","the distance of BS and UE in meter, effective only when PassLoss is set as YES",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DISTANCE_UNIT,
		prm("StdForm","1000")),
	create_parm ("PwrNormal","option for normalization of the output power",
		PARM_INT,
		"_nLTE_x5fChannel_x5fITU_fPwrNormalSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fChannel_x5fITU_fNO","NO")),
	create_parm ("PwrMeasPeriod","The period of power measurement in order to normalize the output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1 msec")));
library_group("LTE, Channel Model","LTE, Channel Model","LTE_Channel_ITU");
palette_group("LTE, Channel Model","LTE, Channel Model","LTE_Channel_ITU");

create_constant_form ("_nLTE_x5fChannel_fExtended_x5fPedestrian_x5fA", 
	"Extended_Pedestrian_A",
	0,
	"0",
	"EPA");
create_constant_form ("_nLTE_x5fChannel_fExtended_x5fVehicular_x5fA", 
	"Extended_Vehicular_A",
	0,
	"1",
	"EVA");
create_constant_form ("_nLTE_x5fChannel_fExtended_x5fTypicalUrban", 
	"Extended_TypicalUrban",
	0,
	"2",
	"ETU");
create_constant_form ("_nLTE_x5fChannel_fUserDefined", 
	"UserDefined",
	0,
	"3",
	"UserDefined");
create_form_set("_nLTE_x5fChannel_fModelTypeSet",
	"_nLTE_x5fChannel_fExtended_x5fPedestrian_x5fA",
	"_nLTE_x5fChannel_fExtended_x5fVehicular_x5fA",
	"_nLTE_x5fChannel_fExtended_x5fTypicalUrban",
	"_nLTE_x5fChannel_fUserDefined",
	"StdForm");
create_item ("LTE_Channel","LTE channel model",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_Channel",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_Channel",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_Channel",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","Input resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("ROut","Output resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("ModelType","the R4-070872_TR36.803.0.3.0 Channel number or User defined Channel",
		PARM_INT,
		"_nLTE_x5fChannel_fModelTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fChannel_fExtended_x5fVehicular_x5fA","Extended_Vehicular_A")),
	create_parm ("Delay","the delay of each tap in usec, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		TIME_UNIT,
		prm("StringAndReference","{0.0 , 0.03, 0.15, 0.31 ,0.37,  0.71 , 1.09 , 1.73 , 2.51 }")),
	create_parm ("Power","the power in each tap in dB, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0 dB, -1.5 dB, -1.4 dB, -3.6 dB, -0.6 dB, -9.1 dB, -7.0 dB, -12.0 dB, -16.9 dB}")),
	create_parm ("Ricean_factor","the Ricean K-factor in linear scale of each tap, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("Velocity","the velocity of mobile station",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","120")));
library_group("LTE, Channel Model","LTE, Channel Model","LTE_Channel");
palette_group("LTE, Channel Model","LTE, Channel Model","LTE_Channel");

create_item ("LTE_UE_InBandBlockingInfo","LTE UE receiver in-band blocking measurements information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UE_InBandBlockingInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UE_InBandBlockingInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UE_InBandBlockingInfo");
palette_group("InformationComponent","InformationComponent","LTE_UE_InBandBlockingInfo");

create_item ("LTE_UE_AdjacentChannelSelectivityInfo","LTE UE receiver adjacent channel selectivity measurements information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UE_AdjacentChannelSelectivityInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UE_AdjacentChannelSelectivityInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UE_AdjacentChannelSelectivityInfo");
palette_group("InformationComponent","InformationComponent","LTE_UE_AdjacentChannelSelectivityInfo");

create_item ("LTE_UE_ReferenceSensitivityInfo","LTE UE receiver reference sensitivity measurements information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UE_ReferenceSensitivityInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UE_ReferenceSensitivityInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UE_ReferenceSensitivityInfo");
palette_group("InformationComponent","InformationComponent","LTE_UE_ReferenceSensitivityInfo");

create_item ("LTE_BS_OperatingBandEmissionInfo","LTE BS Operating band unwanted emissions test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_BS_OperatingBandEmissionInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_BS_OperatingBandEmissionInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_BS_OperatingBandEmissionInfo");
palette_group("InformationComponent","InformationComponent","LTE_BS_OperatingBandEmissionInfo");

create_item ("LTE_BS_Tx_ACLRInfo","LTE BS Tx ACLR test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_BS_Tx_ACLRInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_BS_Tx_ACLRInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_BS_Tx_ACLRInfo");
palette_group("InformationComponent","InformationComponent","LTE_BS_Tx_ACLRInfo");

create_item ("LTE_BS_Tx_OccupiedBWInfo","LTE BS Tx occupied bandwidth test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_BS_Tx_OccupiedBWInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_BS_Tx_OccupiedBWInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_BS_Tx_OccupiedBWInfo");
palette_group("InformationComponent","InformationComponent","LTE_BS_Tx_OccupiedBWInfo");

create_item ("LTE_BS_Tx_SignalQualityInfo","LTE BS Tx signal quality test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_BS_Tx_SignalQualityInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_BS_Tx_SignalQualityInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_BS_Tx_SignalQualityInfo");
palette_group("InformationComponent","InformationComponent","LTE_BS_Tx_SignalQualityInfo");

create_item ("LTE_BS_Tx_PowerInfo","LTE BS Tx Power test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_BS_Tx_PowerInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_BS_Tx_PowerInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_BS_Tx_PowerInfo");
palette_group("InformationComponent","InformationComponent","LTE_BS_Tx_PowerInfo");

create_item ("LTE_BS_NarrowBandBlockingInfo","LTE BS receiver narrow band blocking measurements information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_BS_NarrowBandBlockingInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_BS_NarrowBandBlockingInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_BS_NarrowBandBlockingInfo");
palette_group("InformationComponent","InformationComponent","LTE_BS_NarrowBandBlockingInfo");

create_item ("LTE_UE_SpectrumEmissionInfo","LTE UE spectrum emission measurements information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UE_SpectrumEmissionInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UE_SpectrumEmissionInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UE_SpectrumEmissionInfo");
palette_group("InformationComponent","InformationComponent","LTE_UE_SpectrumEmissionInfo");

create_item ("LTE_BS_ReferenceSensitivityInfo","LTE BS receiver reference sensitivity measurements information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_BS_ReferenceSensitivityInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_BS_ReferenceSensitivityInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_BS_ReferenceSensitivityInfo");
palette_group("InformationComponent","InformationComponent","LTE_BS_ReferenceSensitivityInfo");

create_item ("LTE_BS_InChannelSelectivityInfo","LTE BS receiver in-channel selectivity measurements information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_BS_InChannelSelectivityInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_BS_InChannelSelectivityInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_BS_InChannelSelectivityInfo");
palette_group("InformationComponent","InformationComponent","LTE_BS_InChannelSelectivityInfo");

create_item ("LTE_BS_AdjacentChannelSelectivityInfo","LTE BS receiver adjacent channel selectivity measurements information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_BS_AdjacentChannelSelectivityInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_BS_AdjacentChannelSelectivityInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_BS_AdjacentChannelSelectivityInfo");
palette_group("InformationComponent","InformationComponent","LTE_BS_AdjacentChannelSelectivityInfo");

create_item ("LTE_UE_OccupiedBandwidthInfo","LTE UE occupied bandwidth measurement test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UE_OccupiedBandwidthInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UE_OccupiedBandwidthInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UE_OccupiedBandwidthInfo");
palette_group("InformationComponent","InformationComponent","LTE_UE_OccupiedBandwidthInfo");

create_item ("LTE_UE_ACLRInfo","LTE UE adjacent channel leakage ratio measurement information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UE_ACLRInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UE_ACLRInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UE_ACLRInfo");
palette_group("InformationComponent","InformationComponent","LTE_UE_ACLRInfo");

create_item ("LTE_UE_InBandEmissionsInfo","LTE UE Transmit Signal in-band emissions measurement information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UE_InBandEmissionsInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UE_InBandEmissionsInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UE_InBandEmissionsInfo");
palette_group("InformationComponent","InformationComponent","LTE_UE_InBandEmissionsInfo");

create_item ("LTE_UE_TransmitSignalEVMInfo","LTE UE Transmit Signal EVM measurement information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UE_TransmitSignalEVMInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UE_TransmitSignalEVMInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UE_TransmitSignalEVMInfo");
palette_group("InformationComponent","InformationComponent","LTE_UE_TransmitSignalEVMInfo");

create_item ("LTE_UE_TransmitPowerInfo","LTE UE Transmit Power measurement information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UE_TransmitPowerInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UE_TransmitPowerInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UE_TransmitPowerInfo");
palette_group("InformationComponent","InformationComponent","LTE_UE_TransmitPowerInfo");

create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fFrameModeSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fFDD",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f0",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f1",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f2",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f3",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f4",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f5",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f7", 
	"Config 7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f8", 
	"Config 8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f0",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f1",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f2",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f3",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f4",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f5",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f6",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f7",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fBandwidthSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fRatio_x5f1",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fRatio_x5f2",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fRatio_x5f4",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNormal",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fHalfCarrierShift_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fDL_x5fNormal", 
	"DL_Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fDL_x5fExtended", 
	"DL_Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fDL_x5fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fDL_x5fNormal",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fDL_x5fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fPUCCH",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fMCS_x5findex", 
	"MCS index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fTransport_x5fblock_x5fsize", 
	"Transport block size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fCode_x5frate", 
	"Code rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fPayload_x5fConfigSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fMCS_x5findex",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fEnable64QAMSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fDFTSwap_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH_x5fHoppingEnableSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_finterSubFrame", 
	"interSubFrame",
	0,
	"0",
	"interSubFrame");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fintraAndInterSubFrame", 
	"intraAndInterSubFrame",
	0,
	"1",
	"intraAndInterSubFrame");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH_x5fHoppingModeSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_finterSubFrame",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fintraAndInterSubFrame",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fzero_x5for_x5fzz", 
	"zero_or_zz",
	0,
	"0",
	"0 or 00");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fone_x5for_x5fzone", 
	"one_or_zone",
	0,
	"1",
	"1 or 01");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fonezero", 
	"onezero",
	0,
	"2",
	"10");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_foneone", 
	"oneone",
	0,
	"3",
	"11");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH_x5fHoppingBitsSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fzero_x5for_x5fzz",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fone_x5for_x5fzone",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fonezero",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_foneone",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fData_x5fOnly",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fStartRB_x5f_x5f_x5fNumRBs", 
	"StartRB + NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fRB_x5findices_x5f_x5f1D_x5f", 
	"RB indices (1D)",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fRB_x5findices_x5f_x5f2D_x5f", 
	"RB indices (2D)",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fStartRB_x5f_x5f_x5fNumRBs",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fRB_x5findices_x5f_x5f1D_x5f",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fRB_x5findices_x5f_x5f2D_x5f",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fGroupHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fSeqHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f1", 
	"Format_1",
	0,
	"0",
	"Format 1");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f1a", 
	"Format_1a",
	0,
	"1",
	"Format 1a");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f1b", 
	"Format_1b",
	0,
	"2",
	"Format 1b");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fShortened_x5f1", 
	"Shortened_1",
	0,
	"3",
	"Shortened 1");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fShortened_x5f1a", 
	"Shortened_1a",
	0,
	"4",
	"Shortened 1a");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fShortened_x5f1b", 
	"Shortened_1b",
	0,
	"5",
	"Shortened 1b");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f2", 
	"Format_2",
	0,
	"6",
	"Format 2");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f2a", 
	"Format_2a",
	0,
	"7",
	"Format 2a");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f2b", 
	"Format_2b",
	0,
	"8",
	"Format 2b");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fPUCCH_x5fFormatSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f1",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f1a",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f1b",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fShortened_x5f1",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fShortened_x5f1a",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fShortened_x5f1b",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f2",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f2a",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f2b",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fPRACH_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fPRACH_x5fHS_x5fflagSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fSRS_x5fMaxUpPtsSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fIQ_x5fOffset_x5fCorrectSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fPreDownsamplingSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fMMSE", 
	"MMSE",
	0,
	"1",
	"MMSE");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fChEstimatorModeSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fLinear",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fMMSE",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fHard", 
	"Hard",
	0,
	"0",
	"Hard");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_x5fRF_fSoft", 
	"Soft",
	0,
	"1",
	"Soft");
create_form_set("_nLTE_x5fUL_x5fReceiver_x5fRF_fDemapperTypeSet",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fHard",
	"_nLTE_x5fUL_x5fReceiver_x5fRF_fSoft",
	"StdForm");
create_item ("LTE_UL_Receiver_RF","Uplink receiver with RF de-modulator",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_Receiver_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_Receiver_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_UL_Receiver_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RF_Parameters","RF parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RIn","source resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("RTemp","temperature",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","- 273.15")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","Reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("GainImbalance","gain imbalance in dB Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","phase imbalance in dB Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SystemParameters","system parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fConfig_x5f4","Config_4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("HalfCarrierShift_Enable","whether or not to enable 1/2 subcarrier shifting",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fHalfCarrierShift_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES","YES")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("DL_CyclicPrefix","type of cyclic prefix in downlink",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fDL_x5fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fDL_x5fNormal","DL_Normal")),
	create_parm ("PUSCH_Parameters","PUSCH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH","PUSCH")),
	create_parm ("Payload_Config","the configuration mode of input data of PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload for PUSCH, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("Enable64QAM","whether 64QAM is allowed in LTE uplink",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES","YES")),
	create_parm ("MappingType","the modulation orders for the PUSCH in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("RV_Idx","Redundancy Version Index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DFTSwap_Enable","PUSCH DFT swap is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fDFTSwap_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES","YES")),
	create_parm ("PUSCH_HoppingEnable","whether PUSCH frequency-hopping is enabled or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH_x5fHoppingEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("PUSCH_HoppingMode","PUSCH frequency hopping mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_finterSubFrame","interSubFrame")),
	create_parm ("PUSCH_HoppingOffset","the offset used for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_Hopping_Nsb","number of sub-bands for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUSCH_HoppingBits","information in hopping bits",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH_x5fHoppingBitsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fzero_x5for_x5fzz","zero_or_zz")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fStartRB_x5f_x5f_x5fNumRBs","StartRB___NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[[SF0 start RB, SF0 number of RBs], ..., [SF9 start RB, SF9 number of RBs]]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("GroupHop_Enable","whether enable group hopping for DMRS on PUCCH and PUSCH or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fGroupHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("SeqHop_Enable","whether enable sequence hopping for DMRS on PUSCH  or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fSeqHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("PUSCH_Delta_ss","used in determining the sequence-shift pattern for PUSCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_n_DMRS1","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUSCH_n_DMRS2","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUCCH_Parameters","PUCCH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUCCH_Format","PUCCH format",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fPUCCH_x5fFormatSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fFormat_x5f1","Format_1")),
	create_parm ("PUCCH_Delta_shift","used to calculate PUCCH cyclic shift Alfa",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("PUCCH_NRB2","number of RBs used for transmisstion PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUCCH_n1","resources used for transmisstion PUCCH format 1/1a/1b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PUCCH_n2","resources used for transmission PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PRACH_Parameters","PRACH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PRACH_PrmbleIndex","preamble indexes, used to select preamble sequences from 64 preambles available in this cell",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_RBOffset","PRACH frequency offset, the first RB available for PRACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_LogicalIndex","logical index of root ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_Ncs","cyclic shifts of ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_HS_flag","high speed flag",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fPRACH_x5fHS_x5fflagSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("SRS_Parameters","SRS parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("SRS_BandwidthConfig","the cell-specific SRS bandwidth configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","7")),
	create_parm ("SRS_SF_Config","the cell-specific SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_MaxUpPts","whether enable the reconfiguration of maximum m_SRS_0 or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fSRS_x5fMaxUpPtsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("SRS_Bandwidth","the UE-specific SRS bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_HoppingBandwidth","the SRS hopping bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SRS_FreqPosition","the SRS frequency domain position",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_ConfigIndex","the UE-specific SRS configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_TransmissionComb","transmission comb",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_CyclicShift","used in computing the cyclic shift of SRS",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUSCH_PwrOffset","the power offset in dB for PUSCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_RS_PwrOffset","the power offset in dB for PUSCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_PwrOffset","the power offset in dB for PUCCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_RS_PwrOffset","the power offset in dB for PUCCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_PwrOffset","the power offset in dB for PRACH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_PwrOffset","the power offset in dB for SRS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ControlInfoParameters","control information parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("HARQACK_NumInfoBits","HARQ-ACK information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("HARQACK_BetaOffsetIndex","HARQ-ACK offset values, used in calculating the number of coded HARQ-ACK symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RxAlgorithmParameters","parameters for LTE uplink receiver algorithm",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("IQ_Offset_Correct","whether or not to correct IQ offset",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fIQ_x5fOffset_x5fCorrectSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fYES","YES")),
	create_parm ("PreDownsampling","pre-downsampling to 1X symbol rate",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fPreDownsamplingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("Sym_StartPos","the start position of the negative offset value to the CP length(without oversampling) to get the OFDM symbol for FFT operation",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-3,-3}")),
	create_parm ("ChEstimatorMode","mode of interpolation algorithm in channel estimator",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fChEstimatorModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fLinear","Linear")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","the maximum delay of multi-path channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 usec")),
	create_parm ("Fmax","the maximum doppler frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")),
	create_parm ("DemapperType","symbol demodulation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_x5fRF_fDemapperTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_x5fRF_fSoft","Soft")),
	create_parm ("DemapperMaxLevel","the maximum level for soft demapping output when DemapperType is Soft or CSI",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("TC_Iteration","Turbo decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("LTE, Receiver","LTE, Receiver","LTE_UL_Receiver_RF");
palette_group("LTE, Receiver","LTE, Receiver","LTE_UL_Receiver_RF");

create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fMirrorSpectrumSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fFrameModeSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fFDD",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f0",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f1",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f2",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f3",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f4",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f5",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f7", 
	"Config 7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f8", 
	"Config 8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f0",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f1",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f2",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f3",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f4",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f5",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f6",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f7",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fBandwidthSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fRatio_x5f1",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fRatio_x5f2",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fRatio_x5f4",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNormal",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fHalfCarrierShift_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fDL_x5fNormal", 
	"DL_Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fDL_x5fExtended", 
	"DL_Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fDL_x5fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fDL_x5fNormal",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fDL_x5fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fPrintf_x5fRB_x5fSF_x5fAllocSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fPUCCH",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fMCS_x5findex", 
	"MCS index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize", 
	"Transport block size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fCode_x5frate", 
	"Code rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fPayload_x5fConfigSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fMCS_x5findex",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fEnable64QAMSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fDFTSwap_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH_x5fHoppingEnableSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_finterSubFrame", 
	"interSubFrame",
	0,
	"0",
	"interSubFrame");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fintraAndInterSubFrame", 
	"intraAndInterSubFrame",
	0,
	"1",
	"intraAndInterSubFrame");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH_x5fHoppingModeSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_finterSubFrame",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fintraAndInterSubFrame",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fzero_x5for_x5fzz", 
	"zero_or_zz",
	0,
	"0",
	"0 or 00");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fone_x5for_x5fzone", 
	"one_or_zone",
	0,
	"1",
	"1 or 01");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fonezero", 
	"onezero",
	0,
	"2",
	"10");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_foneone", 
	"oneone",
	0,
	"3",
	"11");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH_x5fHoppingBitsSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fzero_x5for_x5fzz",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fone_x5for_x5fzone",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fonezero",
	"_nLTE_x5fUL_x5fSrc_x5fRF_foneone",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fData_x5fOnly",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs", 
	"StartRB + NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f1D_x5f", 
	"RB indices (1D)",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f2D_x5f", 
	"RB indices (2D)",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f1D_x5f",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f2D_x5f",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fGroupHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fSeqHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f1", 
	"Format_1",
	0,
	"0",
	"Format 1");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f1a", 
	"Format_1a",
	0,
	"1",
	"Format 1a");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f1b", 
	"Format_1b",
	0,
	"2",
	"Format 1b");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fShortened_x5f1", 
	"Shortened_1",
	0,
	"3",
	"Shortened 1");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fShortened_x5f1a", 
	"Shortened_1a",
	0,
	"4",
	"Shortened 1a");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fShortened_x5f1b", 
	"Shortened_1b",
	0,
	"5",
	"Shortened 1b");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f2", 
	"Format_2",
	0,
	"6",
	"Format 2");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f2a", 
	"Format_2a",
	0,
	"7",
	"Format 2a");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f2b", 
	"Format_2b",
	0,
	"8",
	"Format 2b");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fPUCCH_x5fFormatSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f1",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f1a",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f1b",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fShortened_x5f1",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fShortened_x5f1a",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fShortened_x5f1b",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f2",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f2a",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f2b",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fPRACH_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fPRACH_x5fHS_x5fflagSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fSRS_x5fMaxUpPtsSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fSpectrumShapingTypeSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fTimeWindowing",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fRaised_x5fcosine", 
	"Raised cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fWindowTypeSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fTukey",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fFIR_x5fwithInterpSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fSquare_x5fRoot_x5fRaised_x5fCosine", 
	"Square-Root Raised Cosine",
	0,
	"0",
	"Square-Root Raised Cosine");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fIdeal_x5fLowpass", 
	"Ideal Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fSquare_x5fRoot_x5fRaised_x5fCosine",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fIdeal_x5fLowpass",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fACK_x5fNACK_x5fmultiplexing", 
	"ACK_NACK_multiplexing",
	0,
	"0",
	"ACK/NACK multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fSrc_x5fRF_fACK_x5fNACK_x5fbundling", 
	"ACK_NACK_bundling",
	0,
	"1",
	"ACK/NACK bundling");
create_form_set("_nLTE_x5fUL_x5fSrc_x5fRF_fACK_x5fNACK_x5fFeedbackModeSet",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fACK_x5fNACK_x5fmultiplexing",
	"_nLTE_x5fUL_x5fSrc_x5fRF_fACK_x5fNACK_x5fbundling",
	"StdForm");
create_item ("LTE_UL_Src_RF","Uplink signal source with RF modulator",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_Src_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_Src_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_UL_Src_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RF_Parameters","RF parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("ROut","source resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("RTemp","temperature",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","- 273.15")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("Power","power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm"," 0.01 W ")),
	create_parm ("MirrorSpectrum","indication of mirror spectrum about carrier",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("GainImbalance","gain imbalance in dB Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","phase imbalance in dB Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SystemParameters","system parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fConfig_x5f4","Config_4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("HalfCarrierShift_Enable","whether or not to enable 1/2 subcarrier shifting",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fHalfCarrierShift_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fYES","YES")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("DL_CyclicPrefix","type of cyclic prefix in downlink",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fDL_x5fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fDL_x5fNormal","DL_Normal")),
	create_parm ("Printf_RB_SF_Alloc","print the RB_SF allocation to file",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fPrintf_x5fRB_x5fSF_x5fAllocSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("PUSCH_Parameters","PUSCH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH","PUSCH")),
	create_parm ("Payload_Config","the configuration mode of input data of PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload for PUSCH, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("Enable64QAM","whether 64QAM is allowed in LTE uplink",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fYES","YES")),
	create_parm ("MappingType","the modulation orders for the PUSCH in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("RV_Idx","Redundancy Version Index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DFTSwap_Enable","PUSCH DFT swap is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fDFTSwap_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fYES","YES")),
	create_parm ("PUSCH_HoppingEnable","whether PUSCH frequency-hopping is enabled or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH_x5fHoppingEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("PUSCH_HoppingMode","PUSCH frequency hopping mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_finterSubFrame","interSubFrame")),
	create_parm ("PUSCH_HoppingOffset","the offset used for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_Hopping_Nsb","number of sub-bands for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUSCH_HoppingBits","information in hopping bits",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH_x5fHoppingBitsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fzero_x5for_x5fzz","zero_or_zz")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs","StartRB___NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[[SF0 start RB, SF0 number of RBs], ..., [SF9 start RB, SF9 number of RBs]]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("GroupHop_Enable","whether enable group hopping for DMRS on PUCCH and PUSCH or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fGroupHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("SeqHop_Enable","whether enable sequence hopping for DMRS on PUSCH  or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fSeqHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("PUSCH_Delta_ss","used in determining the sequence-shift pattern for PUSCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_n_DMRS1","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUSCH_n_DMRS2","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUCCH_Parameters","PUCCH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUCCH_Format","PUCCH format",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fPUCCH_x5fFormatSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fFormat_x5f1","Format_1")),
	create_parm ("PUCCH_Delta_shift","used to calculate PUCCH cyclic shift Alfa",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("PUCCH_NRB2","number of RBs used for transmisstion PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUCCH_n1","resources used for transmisstion PUCCH format 1/1a/1b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PUCCH_n2","resources used for transmission PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PRACH_Parameters","PRACH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PRACH_PrmbleIndex","preamble indexes, used to select preamble sequences from 64 preambles available in this cell",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_RBOffset","PRACH frequency offset, the first RB available for PRACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_LogicalIndex","logical index of root ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_Ncs","cyclic shifts of ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_HS_flag","high speed flag",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fPRACH_x5fHS_x5fflagSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("SRS_Parameters","SRS parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("SRS_BandwidthConfig","the cell-specific SRS bandwidth configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","7")),
	create_parm ("SRS_SF_Config","the cell-specific SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_MaxUpPts","whether enable the reconfiguration of maximum m_SRS_0 or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fSRS_x5fMaxUpPtsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("SRS_Bandwidth","the UE-specific SRS bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_HoppingBandwidth","the SRS hopping bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SRS_FreqPosition","the SRS frequency domain position",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_ConfigIndex","the UE-specific SRS configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_TransmissionComb","transmission comb",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_CyclicShift","used in computing the cyclic shift of SRS",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUSCH_PwrOffset","the power offset in dB for PUSCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_RS_PwrOffset","the power offset in dB for PUSCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_PwrOffset","the power offset in dB for PUCCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_RS_PwrOffset","the power offset in dB for PUCCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_PwrOffset","the power offset in dB for PRACH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_PwrOffset","the power offset in dB for SRS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SpectrumShapingParameters","parameters for transmit spectrum shaping",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SpectrumShapingType","spectrum-shaping type",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fFIRFilter","FIRFilter")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent SC-FDMA symbols in unit of chips (without oversampleing)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval(take the start position of CP as origin), indicates the number of samples(without ...(Press Help for more info)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","spectrum-shaping FIR filter with interpolation operation",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fSquare_x5fRoot_x5fRaised_x5fCosine","Square_Root_Raised_Cosine")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.22")),
	create_parm ("ControlInfoParameters","control information parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("HARQACK_NumInfoBits","HARQ-ACK information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("HARQACK_BetaOffsetIndex","HARQ-ACK offset values, used in calculating the number of coded HARQ-ACK symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("ACK_NACK_FeedbackMode","ACK/NACK feedback modes for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_x5fRF_fACK_x5fNACK_x5fFeedbackModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_x5fRF_fACK_x5fNACK_x5fmultiplexing","ACK_NACK_multiplexing")),
	create_parm ("Nbundled","Nbundled for TDD ACK/NACK bundling",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")));
library_group("LTE, Source","LTE, Source","LTE_UL_Src_RF");
palette_group("LTE, Source","LTE, Source","LTE_UL_Src_RF");

create_constant_form ("_nLTE_x5fUL_x5fReceiver_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fReceiver_fFrameModeSet",
	"_nLTE_x5fUL_x5fReceiver_fFDD",
	"_nLTE_x5fUL_x5fReceiver_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fReceiver_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fReceiver_fConfig_x5f0",
	"_nLTE_x5fUL_x5fReceiver_fConfig_x5f1",
	"_nLTE_x5fUL_x5fReceiver_fConfig_x5f2",
	"_nLTE_x5fUL_x5fReceiver_fConfig_x5f3",
	"_nLTE_x5fUL_x5fReceiver_fConfig_x5f4",
	"_nLTE_x5fUL_x5fReceiver_fConfig_x5f5",
	"_nLTE_x5fUL_x5fReceiver_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fUL_x5fReceiver_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fUL_x5fReceiver_fConfig0",
	"_nLTE_x5fUL_x5fReceiver_fConfig1",
	"_nLTE_x5fUL_x5fReceiver_fConfig2",
	"_nLTE_x5fUL_x5fReceiver_fConfig3",
	"_nLTE_x5fUL_x5fReceiver_fConfig4",
	"_nLTE_x5fUL_x5fReceiver_fConfig5",
	"_nLTE_x5fUL_x5fReceiver_fConfig6",
	"_nLTE_x5fUL_x5fReceiver_fConfig7",
	"_nLTE_x5fUL_x5fReceiver_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fReceiver_fBandwidthSet",
	"_nLTE_x5fUL_x5fReceiver_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fReceiver_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fReceiver_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fReceiver_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fReceiver_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fReceiver_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fReceiver_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fReceiver_fRatio_x5f1",
	"_nLTE_x5fUL_x5fReceiver_fRatio_x5f2",
	"_nLTE_x5fUL_x5fReceiver_fRatio_x5f4",
	"_nLTE_x5fUL_x5fReceiver_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fReceiver_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fReceiver_fNormal",
	"_nLTE_x5fUL_x5fReceiver_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fHalfCarrierShift_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fDL_x5fNormal", 
	"DL_Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fDL_x5fExtended", 
	"DL_Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fReceiver_fDL_x5fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fReceiver_fDL_x5fNormal",
	"_nLTE_x5fUL_x5fReceiver_fDL_x5fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fReceiver_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fReceiver_fPUSCH",
	"_nLTE_x5fUL_x5fReceiver_fPUCCH",
	"_nLTE_x5fUL_x5fReceiver_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fUL_x5fReceiver_fPayload_x5fConfigSet",
	"_nLTE_x5fUL_x5fReceiver_fMCS_x5findex",
	"_nLTE_x5fUL_x5fReceiver_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fUL_x5fReceiver_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fEnable64QAMSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fDFTSwap_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fPUSCH_x5fHoppingEnableSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_finterSubFrame", 
	"interSubFrame",
	0,
	"0",
	"interSubFrame");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fintraAndInterSubFrame", 
	"intraAndInterSubFrame",
	0,
	"1",
	"intraAndInterSubFrame");
create_form_set("_nLTE_x5fUL_x5fReceiver_fPUSCH_x5fHoppingModeSet",
	"_nLTE_x5fUL_x5fReceiver_finterSubFrame",
	"_nLTE_x5fUL_x5fReceiver_fintraAndInterSubFrame",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fzero_x5for_x5fzz", 
	"zero_or_zz",
	0,
	"0",
	"0 or 00");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fone_x5for_x5fzone", 
	"one_or_zone",
	0,
	"1",
	"1 or 01");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fonezero", 
	"onezero",
	0,
	"2",
	"10");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_foneone", 
	"oneone",
	0,
	"3",
	"11");
create_form_set("_nLTE_x5fUL_x5fReceiver_fPUSCH_x5fHoppingBitsSet",
	"_nLTE_x5fUL_x5fReceiver_fzero_x5for_x5fzz",
	"_nLTE_x5fUL_x5fReceiver_fone_x5for_x5fzone",
	"_nLTE_x5fUL_x5fReceiver_fonezero",
	"_nLTE_x5fUL_x5fReceiver_foneone",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fUL_x5fReceiver_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fUL_x5fReceiver_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fUL_x5fReceiver_fData_x5fOnly",
	"_nLTE_x5fUL_x5fReceiver_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fReceiver_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fReceiver_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fReceiver_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fReceiver_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fGroupHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fSeqHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fFormat_x5f1", 
	"Format_1",
	0,
	"0",
	"Format 1");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fFormat_x5f1a", 
	"Format_1a",
	0,
	"1",
	"Format 1a");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fFormat_x5f1b", 
	"Format_1b",
	0,
	"2",
	"Format 1b");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fShortened_x5f1", 
	"Shortened_1",
	0,
	"3",
	"Shortened 1");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fShortened_x5f1a", 
	"Shortened_1a",
	0,
	"4",
	"Shortened 1a");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fShortened_x5f1b", 
	"Shortened_1b",
	0,
	"5",
	"Shortened 1b");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fFormat_x5f2", 
	"Format_2",
	0,
	"6",
	"Format 2");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fFormat_x5f2a", 
	"Format_2a",
	0,
	"7",
	"Format 2a");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fFormat_x5f2b", 
	"Format_2b",
	0,
	"8",
	"Format 2b");
create_form_set("_nLTE_x5fUL_x5fReceiver_fPUCCH_x5fFormatSet",
	"_nLTE_x5fUL_x5fReceiver_fFormat_x5f1",
	"_nLTE_x5fUL_x5fReceiver_fFormat_x5f1a",
	"_nLTE_x5fUL_x5fReceiver_fFormat_x5f1b",
	"_nLTE_x5fUL_x5fReceiver_fShortened_x5f1",
	"_nLTE_x5fUL_x5fReceiver_fShortened_x5f1a",
	"_nLTE_x5fUL_x5fReceiver_fShortened_x5f1b",
	"_nLTE_x5fUL_x5fReceiver_fFormat_x5f2",
	"_nLTE_x5fUL_x5fReceiver_fFormat_x5f2a",
	"_nLTE_x5fUL_x5fReceiver_fFormat_x5f2b",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fPRACH_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fPRACH_x5fHS_x5fflagSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fSRS_x5fMaxUpPtsSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fIQ_x5fOffset_x5fCorrectSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fReceiver_fPreDownsamplingSet",
	"_nLTE_x5fUL_x5fReceiver_fNO",
	"_nLTE_x5fUL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fMMSE", 
	"MMSE",
	0,
	"1",
	"MMSE");
create_form_set("_nLTE_x5fUL_x5fReceiver_fChEstimatorModeSet",
	"_nLTE_x5fUL_x5fReceiver_fLinear",
	"_nLTE_x5fUL_x5fReceiver_fMMSE",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fHard", 
	"Hard",
	0,
	"0",
	"Hard");
create_constant_form ("_nLTE_x5fUL_x5fReceiver_fSoft", 
	"Soft",
	0,
	"1",
	"Soft");
create_form_set("_nLTE_x5fUL_x5fReceiver_fDemapperTypeSet",
	"_nLTE_x5fUL_x5fReceiver_fHard",
	"_nLTE_x5fUL_x5fReceiver_fSoft",
	"StdForm");
create_item ("LTE_UL_Receiver","Uplink baseband receiver",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_Receiver",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_Receiver",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_UL_Receiver",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SystemParameters","system parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fConfig4","Config4")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("HalfCarrierShift_Enable","whether or not to enable 1/2 subcarrier shifting",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fHalfCarrierShift_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fYES","YES")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNO","NO")),
	create_parm ("DL_CyclicPrefix","type of cyclic prefix in downlink",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fDL_x5fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fDL_x5fNormal","DL_Normal")),
	create_parm ("PUSCH_Parameters","PUSCH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fPUSCH","PUSCH")),
	create_parm ("Payload_Config","the configuration mode of input data of PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload for PUSCH, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fYES","YES")),
	create_parm ("MappingType","the modulation orders for the PUSCH in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("RV_Idx","Redundancy Version Index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DFTSwap_Enable","PUSCH DFT swap is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fDFTSwap_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNO","NO")),
	create_parm ("PUSCH_HoppingEnable","whether PUSCH frequency-hopping is enabled or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fPUSCH_x5fHoppingEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNO","NO")),
	create_parm ("PUSCH_HoppingMode","PUSCH frequency hopping mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fPUSCH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_finterSubFrame","interSubFrame")),
	create_parm ("PUSCH_HoppingOffset","the offset used for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_Hopping_Nsb","number of sub-bands for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUSCH_HoppingBits","information in hopping bits",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fPUSCH_x5fHoppingBitsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fzero_x5for_x5fzz","zero_or_zz")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs; ...; SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("GroupHop_Enable","whether enable group hopping for DMRS on PUCCH and PUSCH or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fGroupHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNO","NO")),
	create_parm ("SeqHop_Enable","whether enable sequence hopping for DMRS on PUSCH  or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fSeqHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNO","NO")),
	create_parm ("PUSCH_Delta_ss","used in determining the sequence-shift pattern for PUSCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_n_DMRS1","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUSCH_n_DMRS2","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUCCH_Parameters","PUCCH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUCCH_Format","PUCCH format",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fPUCCH_x5fFormatSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fFormat_x5f1","Format_1")),
	create_parm ("PUCCH_Delta_shift","used to calculate PUCCH cyclic shift Alfa",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("PUCCH_NRB2","number of RBs used for transmisstion PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUCCH_n1","resources used for transmisstion PUCCH format 1/1a/1b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PUCCH_n2","resources used for transmission PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PRACH_Parameters","PRACH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_PrmbleIndex","preamble indexes, used to select preamble sequences from 64 preambles available in this cell",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_RBOffset","PRACH frequency offset, the first RB available for PRACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_LogicalIndex","logical index of root ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_Ncs","cyclic shifts of ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_HS_flag","high speed flag",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fPRACH_x5fHS_x5fflagSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNO","NO")),
	create_parm ("SRS_Parameters","SRS parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNO","NO")),
	create_parm ("SRS_BandwidthConfig","the cell-specific SRS bandwidth configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","7")),
	create_parm ("SRS_SF_Config","the cell-specific SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_MaxUpPts","whether enable the reconfiguration of maximum m_SRS_0 or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fSRS_x5fMaxUpPtsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNO","NO")),
	create_parm ("SRS_Bandwidth","the UE-specific SRS bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_HoppingBandwidth","the SRS hopping bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SRS_FreqPosition","the SRS frequency domain position",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_ConfigIndex","the UE-specific SRS configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_TransmissionComb","transmission comb",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_CyclicShift","used in computing the cyclic shift of SRS",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUSCH_PwrOffset","the power offset in dB for PUSCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_RS_PwrOffset","the power offset in dB for PUSCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_PwrOffset","the power offset in dB for PUCCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_RS_PwrOffset","the power offset in dB for PUCCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_PwrOffset","the power offset in dB for PRACH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_PwrOffset","the power offset in dB for SRS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ControlInfoParameters","control information parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("HARQACK_NumInfoBits","HARQ-ACK information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("HARQACK_BetaOffsetIndex","HARQ-ACK offset values, used in calculating the number of coded HARQ-ACK symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RxAlgorithmParameters","parameters for LTE uplink receiver algorithm",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("IQ_Offset_Correct","whether or not to correct IQ offset",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fIQ_x5fOffset_x5fCorrectSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fYES","YES")),
	create_parm ("PreDownsampling","pre-downsampling to 1X symbol rate",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fPreDownsamplingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fNO","NO")),
	create_parm ("Sym_StartPos","the start position of the negative offset value to the CP length(without oversampling) to get the OFDM symbol for FFT operation",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-3,-3}")),
	create_parm ("ChEstimatorMode","mode of interpolation algorithm in channel estimator",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fChEstimatorModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fLinear","Linear")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","the maximum delay of multi-path channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 usec")),
	create_parm ("Fmax","the maximum doppler frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")),
	create_parm ("DemapperType","symbol demodulation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fReceiver_fDemapperTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fReceiver_fSoft","Soft")),
	create_parm ("DemapperMaxLevel","the maximum level for soft demapping output when DemapperType is Soft or CSI",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("TC_Iteration","Turbo decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("LTE, Receiver","LTE, Receiver","LTE_UL_Receiver");
palette_group("LTE, Receiver","LTE, Receiver","LTE_UL_Receiver");

create_constant_form ("_nLTE_x5fUL_x5fSrc_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fSrc_fFrameModeSet",
	"_nLTE_x5fUL_x5fSrc_fFDD",
	"_nLTE_x5fUL_x5fSrc_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fSrc_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fSrc_fConfig_x5f0",
	"_nLTE_x5fUL_x5fSrc_fConfig_x5f1",
	"_nLTE_x5fUL_x5fSrc_fConfig_x5f2",
	"_nLTE_x5fUL_x5fSrc_fConfig_x5f3",
	"_nLTE_x5fUL_x5fSrc_fConfig_x5f4",
	"_nLTE_x5fUL_x5fSrc_fConfig_x5f5",
	"_nLTE_x5fUL_x5fSrc_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fUL_x5fSrc_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fUL_x5fSrc_fConfig0",
	"_nLTE_x5fUL_x5fSrc_fConfig1",
	"_nLTE_x5fUL_x5fSrc_fConfig2",
	"_nLTE_x5fUL_x5fSrc_fConfig3",
	"_nLTE_x5fUL_x5fSrc_fConfig4",
	"_nLTE_x5fUL_x5fSrc_fConfig5",
	"_nLTE_x5fUL_x5fSrc_fConfig6",
	"_nLTE_x5fUL_x5fSrc_fConfig7",
	"_nLTE_x5fUL_x5fSrc_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fSrc_fBandwidthSet",
	"_nLTE_x5fUL_x5fSrc_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fSrc_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fSrc_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fSrc_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fSrc_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fSrc_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fSrc_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fSrc_fRatio_x5f1",
	"_nLTE_x5fUL_x5fSrc_fRatio_x5f2",
	"_nLTE_x5fUL_x5fSrc_fRatio_x5f4",
	"_nLTE_x5fUL_x5fSrc_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fSrc_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fSrc_fNormal",
	"_nLTE_x5fUL_x5fSrc_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fHalfCarrierShift_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fDL_x5fNormal", 
	"DL_Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fDL_x5fExtended", 
	"DL_Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fSrc_fDL_x5fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fSrc_fDL_x5fNormal",
	"_nLTE_x5fUL_x5fSrc_fDL_x5fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fPrintf_x5fRB_x5fSF_x5fAllocSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fSrc_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fSrc_fPUSCH",
	"_nLTE_x5fUL_x5fSrc_fPUCCH",
	"_nLTE_x5fUL_x5fSrc_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fUL_x5fSrc_fPayload_x5fConfigSet",
	"_nLTE_x5fUL_x5fSrc_fMCS_x5findex",
	"_nLTE_x5fUL_x5fSrc_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fUL_x5fSrc_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fEnable64QAMSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fDFTSwap_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fPUSCH_x5fHoppingEnableSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_finterSubFrame", 
	"interSubFrame",
	0,
	"0",
	"interSubFrame");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fintraAndInterSubFrame", 
	"intraAndInterSubFrame",
	0,
	"1",
	"intraAndInterSubFrame");
create_form_set("_nLTE_x5fUL_x5fSrc_fPUSCH_x5fHoppingModeSet",
	"_nLTE_x5fUL_x5fSrc_finterSubFrame",
	"_nLTE_x5fUL_x5fSrc_fintraAndInterSubFrame",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fzero_x5for_x5fzz", 
	"zero_or_zz",
	0,
	"0",
	"0 or 00");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fone_x5for_x5fzone", 
	"one_or_zone",
	0,
	"1",
	"1 or 01");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fonezero", 
	"onezero",
	0,
	"2",
	"10");
create_constant_form ("_nLTE_x5fUL_x5fSrc_foneone", 
	"oneone",
	0,
	"3",
	"11");
create_form_set("_nLTE_x5fUL_x5fSrc_fPUSCH_x5fHoppingBitsSet",
	"_nLTE_x5fUL_x5fSrc_fzero_x5for_x5fzz",
	"_nLTE_x5fUL_x5fSrc_fone_x5for_x5fzone",
	"_nLTE_x5fUL_x5fSrc_fonezero",
	"_nLTE_x5fUL_x5fSrc_foneone",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fUL_x5fSrc_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fUL_x5fSrc_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fUL_x5fSrc_fData_x5fOnly",
	"_nLTE_x5fUL_x5fSrc_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fSrc_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fSrc_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fSrc_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fSrc_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fGroupHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fSeqHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fFormat_x5f1", 
	"Format_1",
	0,
	"0",
	"Format 1");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fFormat_x5f1a", 
	"Format_1a",
	0,
	"1",
	"Format 1a");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fFormat_x5f1b", 
	"Format_1b",
	0,
	"2",
	"Format 1b");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fShortened_x5f1", 
	"Shortened_1",
	0,
	"3",
	"Shortened 1");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fShortened_x5f1a", 
	"Shortened_1a",
	0,
	"4",
	"Shortened 1a");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fShortened_x5f1b", 
	"Shortened_1b",
	0,
	"5",
	"Shortened 1b");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fFormat_x5f2", 
	"Format_2",
	0,
	"6",
	"Format 2");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fFormat_x5f2a", 
	"Format_2a",
	0,
	"7",
	"Format 2a");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fFormat_x5f2b", 
	"Format_2b",
	0,
	"8",
	"Format 2b");
create_form_set("_nLTE_x5fUL_x5fSrc_fPUCCH_x5fFormatSet",
	"_nLTE_x5fUL_x5fSrc_fFormat_x5f1",
	"_nLTE_x5fUL_x5fSrc_fFormat_x5f1a",
	"_nLTE_x5fUL_x5fSrc_fFormat_x5f1b",
	"_nLTE_x5fUL_x5fSrc_fShortened_x5f1",
	"_nLTE_x5fUL_x5fSrc_fShortened_x5f1a",
	"_nLTE_x5fUL_x5fSrc_fShortened_x5f1b",
	"_nLTE_x5fUL_x5fSrc_fFormat_x5f2",
	"_nLTE_x5fUL_x5fSrc_fFormat_x5f2a",
	"_nLTE_x5fUL_x5fSrc_fFormat_x5f2b",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fPRACH_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fPRACH_x5fHS_x5fflagSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fSRS_x5fMaxUpPtsSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fUL_x5fSrc_fSpectrumShapingTypeSet",
	"_nLTE_x5fUL_x5fSrc_fTimeWindowing",
	"_nLTE_x5fUL_x5fSrc_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fRaised_x5fcosine", 
	"Raised_cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fUL_x5fSrc_fWindowTypeSet",
	"_nLTE_x5fUL_x5fSrc_fTukey",
	"_nLTE_x5fUL_x5fSrc_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fSrc_fFIR_x5fwithInterpSet",
	"_nLTE_x5fUL_x5fSrc_fNO",
	"_nLTE_x5fUL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fSquare_x5fRoot_x5fRaised_x5fCosine", 
	"Square-Root Raised Cosine",
	0,
	"0",
	"Square-Root Raised Cosine");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fIdeal_x5fLowpass", 
	"Ideal Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fUL_x5fSrc_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fUL_x5fSrc_fSquare_x5fRoot_x5fRaised_x5fCosine",
	"_nLTE_x5fUL_x5fSrc_fIdeal_x5fLowpass",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fACK_x5fNACK_x5fmultiplexing", 
	"ACK_NACK_multiplexing",
	0,
	"0",
	"ACK/NACK multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fSrc_fACK_x5fNACK_x5fbundling", 
	"ACK_NACK_bundling",
	0,
	"1",
	"ACK/NACK bundling");
create_form_set("_nLTE_x5fUL_x5fSrc_fACK_x5fNACK_x5fFeedbackModeSet",
	"_nLTE_x5fUL_x5fSrc_fACK_x5fNACK_x5fmultiplexing",
	"_nLTE_x5fUL_x5fSrc_fACK_x5fNACK_x5fbundling",
	"StdForm");
create_item ("LTE_UL_Src","Uplink baseband signal source",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_Src",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_Src",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_UL_Src",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SystemParameters","system parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fConfig4","Config4")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("HalfCarrierShift_Enable","whether or not to enable 1/2 subcarrier shifting",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fHalfCarrierShift_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fYES","YES")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("DL_CyclicPrefix","type of cyclic prefix in downlink",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fDL_x5fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fDL_x5fNormal","DL_Normal")),
	create_parm ("Printf_RB_SF_Alloc","print the RB_SF allocation to file",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fPrintf_x5fRB_x5fSF_x5fAllocSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("PUSCH_Parameters","PUSCH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fPUSCH","PUSCH")),
	create_parm ("Payload_Config","the configuration mode of input data of PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload for PUSCH, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fYES","YES")),
	create_parm ("MappingType","the modulation orders for the PUSCH in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("RV_Idx","Redundancy Version Index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DFTSwap_Enable","PUSCH DFT swap is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fDFTSwap_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("PUSCH_HoppingEnable","whether PUSCH frequency-hopping is enabled or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fPUSCH_x5fHoppingEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("PUSCH_HoppingMode","PUSCH frequency hopping mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fPUSCH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_finterSubFrame","interSubFrame")),
	create_parm ("PUSCH_HoppingOffset","the offset used for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_Hopping_Nsb","number of sub-bands for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUSCH_HoppingBits","information in hopping bits",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fPUSCH_x5fHoppingBitsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fzero_x5for_x5fzz","zero_or_zz")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs; ...; SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("GroupHop_Enable","whether enable group hopping for DMRS on PUCCH and PUSCH or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fGroupHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("SeqHop_Enable","whether enable sequence hopping for DMRS on PUSCH  or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fSeqHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("PUSCH_Delta_ss","used in determining the sequence-shift pattern for PUSCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_n_DMRS1","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUSCH_n_DMRS2","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUCCH_Parameters","PUCCH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUCCH_Format","PUCCH format",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fPUCCH_x5fFormatSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fFormat_x5f1","Format_1")),
	create_parm ("PUCCH_Delta_shift","used to calculate PUCCH cyclic shift Alfa",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("PUCCH_NRB2","number of RBs used for transmisstion PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUCCH_n1","resources used for transmisstion PUCCH format 1/1a/1b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PUCCH_n2","resources used for transmission PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PRACH_Parameters","PRACH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_PrmbleIndex","preamble indexes, used to select preamble sequences from 64 preambles available in this cell",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_RBOffset","PRACH frequency offset, the first RB available for PRACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_LogicalIndex","logical index of root ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_Ncs","cyclic shifts of ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_HS_flag","high speed flag",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fPRACH_x5fHS_x5fflagSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("SRS_Parameters","SRS parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("SRS_BandwidthConfig","the cell-specific SRS bandwidth configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","7")),
	create_parm ("SRS_SF_Config","the cell-specific SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_MaxUpPts","whether enable the reconfiguration of maximum m_SRS_0 or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fSRS_x5fMaxUpPtsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("SRS_Bandwidth","the UE-specific SRS bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_HoppingBandwidth","the SRS hopping bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SRS_FreqPosition","the SRS frequency domain position",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_ConfigIndex","the UE-specific SRS configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_TransmissionComb","transmission comb",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_CyclicShift","used in computing the cyclic shift of SRS",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUSCH_PwrOffset","the power offset in dB for PUSCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_RS_PwrOffset","the power offset in dB for PUSCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_PwrOffset","the power offset in dB for PUCCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_RS_PwrOffset","the power offset in dB for PUCCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_PwrOffset","the power offset in dB for PRACH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_PwrOffset","the power offset in dB for SRS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SpectrumShapingParameters","parameters for transmit spectrum shaping",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SpectrumShapingType","spectrum-shaping type",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fFIRFilter","FIRFilter")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent SC-FDMA symbols in unit of chips (without oversampleing)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval(take the start position of CP as origin), indicates the number of samples(without ...(Press Help for more info)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","spectrum-shaping FIR filter with interpolation operation",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fSquare_x5fRoot_x5fRaised_x5fCosine","Square_Root_Raised_Cosine")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.22")),
	create_parm ("ControlInfoParameters","control information parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("HARQACK_NumInfoBits","HARQ-ACK information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("HARQACK_BetaOffsetIndex","HARQ-ACK offset values, used in calculating the number of coded HARQ-ACK symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("ACK_NACK_FeedbackMode","ACK/NACK feedback modes for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fSrc_fACK_x5fNACK_x5fFeedbackModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fSrc_fACK_x5fNACK_x5fmultiplexing","ACK_NACK_multiplexing")),
	create_parm ("Nbundled","Nbundled for TDD ACK/NACK bundling",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")));
library_group("LTE, Source","LTE, Source","LTE_UL_Src");
palette_group("LTE, Source","LTE, Source","LTE_UL_Src");

create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fFrameModeSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_fFDD",
	"_nLTE_x5fUL_x5fTimeFreqSync_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f0",
	"_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f1",
	"_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f2",
	"_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f3",
	"_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f4",
	"_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f5",
	"_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fBandwidthSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_fRatio_x5f1",
	"_nLTE_x5fUL_x5fTimeFreqSync_fRatio_x5f2",
	"_nLTE_x5fUL_x5fTimeFreqSync_fRatio_x5f4",
	"_nLTE_x5fUL_x5fTimeFreqSync_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_fNormal",
	"_nLTE_x5fUL_x5fTimeFreqSync_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fHalfCarrierShift_x5fEnableSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_fNO",
	"_nLTE_x5fUL_x5fTimeFreqSync_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_fPUSCH",
	"_nLTE_x5fUL_x5fTimeFreqSync_fPUCCH",
	"_nLTE_x5fUL_x5fTimeFreqSync_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fPUSCH_x5fHoppingEnableSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_fNO",
	"_nLTE_x5fUL_x5fTimeFreqSync_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_finterSubFrame", 
	"interSubFrame",
	0,
	"0",
	"interSubFrame");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fintraAndInterSubFrame", 
	"intraAndInterSubFrame",
	0,
	"1",
	"intraAndInterSubFrame");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fPUSCH_x5fHoppingModeSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_finterSubFrame",
	"_nLTE_x5fUL_x5fTimeFreqSync_fintraAndInterSubFrame",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fzero_x5for_x5fzz", 
	"zero_or_zz",
	0,
	"0",
	"0 or 00");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fone_x5for_x5fzone", 
	"one_or_zone",
	0,
	"1",
	"1 or 01");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fonezero", 
	"onezero",
	0,
	"2",
	"10");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_foneone", 
	"oneone",
	0,
	"3",
	"11");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fPUSCH_x5fHoppingBitsSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_fzero_x5for_x5fzz",
	"_nLTE_x5fUL_x5fTimeFreqSync_fone_x5for_x5fzone",
	"_nLTE_x5fUL_x5fTimeFreqSync_fonezero",
	"_nLTE_x5fUL_x5fTimeFreqSync_foneone",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fTimeFreqSync_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fTimeFreqSync_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fTimeFreqSync_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fTimeFreqSync_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fTimeFreqSync_fRB_x5findices_x5f2D",
	"StdForm");
create_item ("LTE_UL_TimeFreqSync","Frequency and time synchronization for Uplink",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_TimeFreqSync",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_TimeFreqSync",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_UL_TimeFreqSync",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("HalfCarrierShift_Enable","whether or not to enable 1/2 subcarrier shifting",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fHalfCarrierShift_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_fYES","YES")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_fPUSCH","PUSCH")),
	create_parm ("PUSCH_HoppingEnable","whether PUSCH frequency-hopping is enabled or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fPUSCH_x5fHoppingEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_fNO","NO")),
	create_parm ("PUSCH_HoppingMode","PUSCH frequency hopping mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fPUSCH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_finterSubFrame","interSubFrame")),
	create_parm ("PUSCH_HoppingOffset","the offset used for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_Hopping_Nsb","number of sub-bands for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUSCH_HoppingBits","information in hopping bits",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fPUSCH_x5fHoppingBitsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_fzero_x5for_x5fzz","zero_or_zz")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fTimeFreqSync_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fTimeFreqSync_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs; ...; SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_UL_TimeFreqSync");
palette_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_UL_TimeFreqSync");

create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fPayload_x5fConfigSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fMCS_x5findex",
	"_nLTE_x5fUL_x5fChannelDecoder_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fUL_x5fChannelDecoder_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fEnable64QAMSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fNO",
	"_nLTE_x5fUL_x5fChannelDecoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fChBit_x5fConfigSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fREspersubframe",
	"_nLTE_x5fUL_x5fChannelDecoder_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fFrameModeSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fFDD",
	"_nLTE_x5fUL_x5fChannelDecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f0",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f1",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f2",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f3",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f4",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f5",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig0",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig1",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig2",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig3",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig4",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig5",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig6",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig7",
	"_nLTE_x5fUL_x5fChannelDecoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fBandwidthSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fNormal",
	"_nLTE_x5fUL_x5fChannelDecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fChannelDecoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fChannelDecoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fPUSCH",
	"_nLTE_x5fUL_x5fChannelDecoder_fPUCCH",
	"_nLTE_x5fUL_x5fChannelDecoder_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fUL_x5fChannelDecoder_fData_x5fOnly",
	"_nLTE_x5fUL_x5fChannelDecoder_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fChannelDecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fChannelDecoder_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fChannelDecoder_fNO",
	"_nLTE_x5fUL_x5fChannelDecoder_fYES",
	"StdForm");
create_item ("LTE_UL_ChannelDecoder","uplink channel decoder",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_ChannelDecoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_ChannelDecoder",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_UL_ChannelDecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fYES","YES")),
	create_parm ("RV_Idx","Redundancy Version Index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelDecoder_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelDecoder_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("HARQACK_NumInfoBits","HARQ-ACK information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("HARQACK_BetaOffsetIndex","HARQ-ACK offset values, used in calculating the number of coded HARQ-ACK symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("TC_Iteration","Turbo decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_UL_ChannelDecoder");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_UL_ChannelDecoder");

create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fPayload_x5fConfigSet",
	"_nLTE_x5fUL_x5fChannelCoder_fMCS_x5findex",
	"_nLTE_x5fUL_x5fChannelCoder_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fUL_x5fChannelCoder_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fEnable64QAMSet",
	"_nLTE_x5fUL_x5fChannelCoder_fNO",
	"_nLTE_x5fUL_x5fChannelCoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fChBit_x5fConfigSet",
	"_nLTE_x5fUL_x5fChannelCoder_fREspersubframe",
	"_nLTE_x5fUL_x5fChannelCoder_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fFrameModeSet",
	"_nLTE_x5fUL_x5fChannelCoder_fFDD",
	"_nLTE_x5fUL_x5fChannelCoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f0",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f1",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f2",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f3",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f4",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f5",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig0",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig1",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig2",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig3",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig4",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig5",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig6",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig7",
	"_nLTE_x5fUL_x5fChannelCoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fBandwidthSet",
	"_nLTE_x5fUL_x5fChannelCoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fChannelCoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fChannelCoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fChannelCoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fChannelCoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fChannelCoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fChannelCoder_fNormal",
	"_nLTE_x5fUL_x5fChannelCoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fChannelCoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fChannelCoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fChannelCoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fChannelCoder_fPUSCH",
	"_nLTE_x5fUL_x5fChannelCoder_fPUCCH",
	"_nLTE_x5fUL_x5fChannelCoder_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fUL_x5fChannelCoder_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fUL_x5fChannelCoder_fData_x5fOnly",
	"_nLTE_x5fUL_x5fChannelCoder_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fChannelCoder_fNO",
	"_nLTE_x5fUL_x5fChannelCoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fACK_x5fNACK_x5fmultiplexing", 
	"ACK_NACK_multiplexing",
	0,
	"0",
	"ACK/NACK multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fChannelCoder_fACK_x5fNACK_x5fbundling", 
	"ACK_NACK_bundling",
	0,
	"1",
	"ACK/NACK bundling");
create_form_set("_nLTE_x5fUL_x5fChannelCoder_fACK_x5fNACK_x5fFeedbackModeSet",
	"_nLTE_x5fUL_x5fChannelCoder_fACK_x5fNACK_x5fmultiplexing",
	"_nLTE_x5fUL_x5fChannelCoder_fACK_x5fNACK_x5fbundling",
	"StdForm");
create_item ("LTE_UL_ChannelCoder","uplink channel coder",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_ChannelCoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_ChannelCoder",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_UL_ChannelCoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fYES","YES")),
	create_parm ("RV_Idx","Redundancy Version Index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("HARQACK_NumInfoBits","HARQ-ACK information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("HARQACK_BetaOffsetIndex","HARQ-ACK offset values, used in calculating the number of coded HARQ-ACK symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("ACK_NACK_FeedbackMode","ACK/NACK feedback modes for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fChannelCoder_fACK_x5fNACK_x5fFeedbackModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChannelCoder_fACK_x5fNACK_x5fmultiplexing","ACK_NACK_multiplexing")),
	create_parm ("Nbundled","Nbundled for TDD ACK/NACK bundling",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_UL_ChannelCoder");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_UL_ChannelCoder");

create_constant_form ("_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fSCFDMA_x5fDemodulator_fBandwidthSet",
	"_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f3_x5fMHz",
	"_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f5_x5fMHz",
	"_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f10_x5fMHz",
	"_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f15_x5fMHz",
	"_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fSCFDMA_x5fDemodulator_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fSCFDMA_x5fDemodulator_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fSCFDMA_x5fDemodulator_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fSCFDMA_x5fDemodulator_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fSCFDMA_x5fDemodulator_fOversamplingOptionSet",
	"_nLTE_x5fSCFDMA_x5fDemodulator_fRatio_x5f1",
	"_nLTE_x5fSCFDMA_x5fDemodulator_fRatio_x5f2",
	"_nLTE_x5fSCFDMA_x5fDemodulator_fRatio_x5f4",
	"_nLTE_x5fSCFDMA_x5fDemodulator_fRatio_x5f8",
	"StdForm");
create_item ("LTE_SCFDMA_Demodulator","Uplink SC-FDMA de-modulator",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_SCFDMA_Demodulator",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_SCFDMA_Demodulator",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_SCFDMA_Demodulator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fSCFDMA_x5fDemodulator_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSCFDMA_x5fDemodulator_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fSCFDMA_x5fDemodulator_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSCFDMA_x5fDemodulator_fRatio_x5f2","Ratio_2")));
library_group("LTE, Modulation","LTE, Modulation","LTE_SCFDMA_Demodulator");
palette_group("LTE, Modulation","LTE, Modulation","LTE_SCFDMA_Demodulator");

create_constant_form ("_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fSCFDMA_x5fModulator_fBandwidthSet",
	"_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f3_x5fMHz",
	"_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f5_x5fMHz",
	"_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f10_x5fMHz",
	"_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f15_x5fMHz",
	"_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fSCFDMA_x5fModulator_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fSCFDMA_x5fModulator_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fSCFDMA_x5fModulator_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fSCFDMA_x5fModulator_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fSCFDMA_x5fModulator_fOversamplingOptionSet",
	"_nLTE_x5fSCFDMA_x5fModulator_fRatio_x5f1",
	"_nLTE_x5fSCFDMA_x5fModulator_fRatio_x5f2",
	"_nLTE_x5fSCFDMA_x5fModulator_fRatio_x5f4",
	"_nLTE_x5fSCFDMA_x5fModulator_fRatio_x5f8",
	"StdForm");
create_item ("LTE_SCFDMA_Modulator","Uplink SC-FDMA modulator",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_SCFDMA_Modulator",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_SCFDMA_Modulator",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_SCFDMA_Modulator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fSCFDMA_x5fModulator_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSCFDMA_x5fModulator_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fSCFDMA_x5fModulator_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSCFDMA_x5fModulator_fRatio_x5f2","Ratio_2")));
library_group("LTE, Modulation","LTE, Modulation","LTE_SCFDMA_Modulator");
palette_group("LTE, Modulation","LTE, Modulation","LTE_SCFDMA_Modulator");

create_constant_form ("_nLTE_x5fRACH_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fRACH_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fRACH_fFrameModeSet",
	"_nLTE_x5fRACH_fFDD",
	"_nLTE_x5fRACH_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fRACH_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fRACH_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fRACH_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fRACH_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fRACH_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fRACH_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fRACH_fTDD_x5fConfigSet",
	"_nLTE_x5fRACH_fConfig_x5f0",
	"_nLTE_x5fRACH_fConfig_x5f1",
	"_nLTE_x5fRACH_fConfig_x5f2",
	"_nLTE_x5fRACH_fConfig_x5f3",
	"_nLTE_x5fRACH_fConfig_x5f4",
	"_nLTE_x5fRACH_fConfig_x5f5",
	"_nLTE_x5fRACH_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fRACH_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fRACH_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fRACH_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fRACH_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fRACH_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fRACH_fBandwidthSet",
	"_nLTE_x5fRACH_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fRACH_fBW_x5f3_x5fMHz",
	"_nLTE_x5fRACH_fBW_x5f5_x5fMHz",
	"_nLTE_x5fRACH_fBW_x5f10_x5fMHz",
	"_nLTE_x5fRACH_fBW_x5f15_x5fMHz",
	"_nLTE_x5fRACH_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fRACH_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fRACH_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fRACH_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fRACH_fOversamplingOptionSet",
	"_nLTE_x5fRACH_fRatio_x5f1",
	"_nLTE_x5fRACH_fRatio_x5f2",
	"_nLTE_x5fRACH_fRatio_x5f4",
	"_nLTE_x5fRACH_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRACH_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRACH_fFrameIncreasedSet",
	"_nLTE_x5fRACH_fNO",
	"_nLTE_x5fRACH_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRACH_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRACH_fDFTSwap_x5fEnableSet",
	"_nLTE_x5fRACH_fNO",
	"_nLTE_x5fRACH_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRACH_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRACH_fPRACH_x5fEnableSet",
	"_nLTE_x5fRACH_fNO",
	"_nLTE_x5fRACH_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRACH_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRACH_fPRACH_x5fHS_x5fflagSet",
	"_nLTE_x5fRACH_fNO",
	"_nLTE_x5fRACH_fYES",
	"StdForm");
create_item ("LTE_RACH","Uplink non-synchronized Random Access CHannel generator",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_RACH",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_RACH",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_RACH",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fRACH_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fRACH_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fRACH_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fRACH_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_fRatio_x5f2","Ratio_2")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fRACH_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_fNO","NO")),
	create_parm ("DFTSwap_Enable","PUSCH DFT swap is enable",
		PARM_INT,
		"_nLTE_x5fRACH_fDFTSwap_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_fNO","NO")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fRACH_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_fYES","YES")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PRACH_PrmbleIndex","preamble indexes, used to select preamble sequences from 64 preambles available in this cell",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_RBOffset","PRACH frequency offset, the first RB available for PRACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_LogicalIndex","logical index of root ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_Ncs","cyclic shifts of ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_HS_flag","high speed flag",
		PARM_INT,
		"_nLTE_x5fRACH_fPRACH_x5fHS_x5fflagSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_fNO","NO")));
library_group("LTE, Sync Signal","LTE, Sync Signal","LTE_RACH");
palette_group("LTE, Sync Signal","LTE, Sync Signal","LTE_RACH");

create_item ("LTE_TDD_DL_4Ant_TxSpectrumInfo","LTE TDD DL 4 Antennas Tx spectrum measurement information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_TDD_DL_4Ant_TxSpectrumInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_TDD_DL_4Ant_TxSpectrumInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_TDD_DL_4Ant_TxSpectrumInfo");
palette_group("InformationComponent","InformationComponent","LTE_TDD_DL_4Ant_TxSpectrumInfo");

create_item ("LTE_DL_MIMO_2x2_TxEVMInfo","LTE DL MIMO 2x2 EVM vs Ch and RB test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_2x2_TxEVMInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_2x2_TxEVMInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_DL_MIMO_2x2_TxEVMInfo");
palette_group("InformationComponent","InformationComponent","LTE_DL_MIMO_2x2_TxEVMInfo");

create_item ("LTE_UL_VSAInfo","LTE_UL_VSA Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_VSAInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_VSAInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UL_VSAInfo");
palette_group("InformationComponent","InformationComponent","LTE_UL_VSAInfo");

create_item ("LTE_DL_VSAInfo","LTE_DL_VSA Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_VSAInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_VSAInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_DL_VSAInfo");
palette_group("InformationComponent","InformationComponent","LTE_DL_VSAInfo");

create_item ("LTE_DL_MIMO_2Ant_VSAInfo","LTE_DL_MIMO_2Ant_VSA Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_2Ant_VSAInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_2Ant_VSAInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_DL_MIMO_2Ant_VSAInfo");
palette_group("InformationComponent","InformationComponent","LTE_DL_MIMO_2Ant_VSAInfo");

create_item ("LTE_TDD_DL_4x2_Fading_BERInfo","LTE_TDD_DL_4x2_Fading_BER Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_TDD_DL_4x2_Fading_BERInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_TDD_DL_4x2_Fading_BERInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_TDD_DL_4x2_Fading_BERInfo");
palette_group("InformationComponent","InformationComponent","LTE_TDD_DL_4x2_Fading_BERInfo");

create_item ("LTE_TDD_DL_1x2_Fading_BERInfo","LTE_TDD_DL_1x2_Fading_BER Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_TDD_DL_1x2_Fading_BERInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_TDD_DL_1x2_Fading_BERInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_TDD_DL_1x2_Fading_BERInfo");
palette_group("InformationComponent","InformationComponent","LTE_TDD_DL_1x2_Fading_BERInfo");

create_item ("LTE_DL_MIMO_2x2_Fading_BERInfo","LTE_DL_MIMO_2x2_Fading_BER Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_2x2_Fading_BERInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_2x2_Fading_BERInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_DL_MIMO_2x2_Fading_BERInfo");
palette_group("InformationComponent","InformationComponent","LTE_DL_MIMO_2x2_Fading_BERInfo");

create_item ("LTE_DL_SIMO_1x2_Fading_BERInfo","LTE_DL_SIMO_1x2_Fading_BER Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_SIMO_1x2_Fading_BERInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_SIMO_1x2_Fading_BERInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_DL_SIMO_1x2_Fading_BERInfo");
palette_group("InformationComponent","InformationComponent","LTE_DL_SIMO_1x2_Fading_BERInfo");

create_item ("LTE_TDD_UL_AWGN_BERInfo","LTE_TDD_UL_AWGN_BER Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_TDD_UL_AWGN_BERInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_TDD_UL_AWGN_BERInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_TDD_UL_AWGN_BERInfo");
palette_group("InformationComponent","InformationComponent","LTE_TDD_UL_AWGN_BERInfo");

create_item ("LTE_TDD_DL_AWGN_BERInfo","LTE_TDD_DL_AWGN_BER Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_TDD_DL_AWGN_BERInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_TDD_DL_AWGN_BERInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_TDD_DL_AWGN_BERInfo");
palette_group("InformationComponent","InformationComponent","LTE_TDD_DL_AWGN_BERInfo");

create_item ("LTE_TDD_UL_TxEVMInfo","LTE TDD UL EVM measurement test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_TDD_UL_TxEVMInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_TDD_UL_TxEVMInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_TDD_UL_TxEVMInfo");
palette_group("InformationComponent","InformationComponent","LTE_TDD_UL_TxEVMInfo");

create_item ("LTE_TDD_DL_TxEVMInfo","LTE TDD DL EVM measurement test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_TDD_DL_TxEVMInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_TDD_DL_TxEVMInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_TDD_DL_TxEVMInfo");
palette_group("InformationComponent","InformationComponent","LTE_TDD_DL_TxEVMInfo");

create_item ("LTE_DL_Fading_BERInfo","LTE_DL_Fading_BER Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_Fading_BERInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_Fading_BERInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_DL_Fading_BERInfo");
palette_group("InformationComponent","InformationComponent","LTE_DL_Fading_BERInfo");

create_item ("LTE_UL_Fading_BERInfo","LTE_UL_Fading_BER Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_Fading_BERInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_Fading_BERInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UL_Fading_BERInfo");
palette_group("InformationComponent","InformationComponent","LTE_UL_Fading_BERInfo");

create_item ("LTE_UL_AWGN_BERInfo","LTE_UL_AWGN_BER Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_AWGN_BERInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_AWGN_BERInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UL_AWGN_BERInfo");
palette_group("InformationComponent","InformationComponent","LTE_UL_AWGN_BERInfo");

create_item ("LTE_DL_TxEVMInfo","LTE DL EVM vs Ch and RB test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_TxEVMInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_TxEVMInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_DL_TxEVMInfo");
palette_group("InformationComponent","InformationComponent","LTE_DL_TxEVMInfo");

create_item ("LTE_UL_TxSpectrumInfo","LTE Uplink FDD transmitters spectrum and CCDF measurements information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_TxSpectrumInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_TxSpectrumInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UL_TxSpectrumInfo");
palette_group("InformationComponent","InformationComponent","LTE_UL_TxSpectrumInfo");

create_item ("LTE_UL_TxEVMInfo","LTE UL EVM measurement test bench information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_UL_TxEVMInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_UL_TxEVMInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_UL_TxEVMInfo");
palette_group("InformationComponent","InformationComponent","LTE_UL_TxEVMInfo");

create_item ("LTE_DL_TxSpectrumInfo","LTE DL Tx spectrum measurement information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_TxSpectrumInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_TxSpectrumInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_DL_TxSpectrumInfo");
palette_group("InformationComponent","InformationComponent","LTE_DL_TxSpectrumInfo");

create_item ("LTE_DL_TestModel_TDD_TxInfo","LTE_DL_TestModel_TDD_Tx Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_TestModel_TDD_TxInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_TestModel_TDD_TxInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_DL_TestModel_TDD_TxInfo");
palette_group("InformationComponent","InformationComponent","LTE_DL_TestModel_TDD_TxInfo");

create_item ("LTE_DL_TestModel_FDD_TxInfo","LTE_DL_TestModel_FDD_Tx Information",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_TestModel_FDD_TxInfo",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_TestModel_FDD_TxInfo",
	SPDesignAnnotFmt,
	"SYM_LTE_Information",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("InformationComponent","InformationComponent","LTE_DL_TestModel_FDD_TxInfo");
palette_group("InformationComponent","InformationComponent","LTE_DL_TestModel_FDD_TxInfo");

create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fTDD_fBandwidthSet",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM11", 
	"ETM11",
	0,
	"0",
	"E-TM1.1");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM12", 
	"ETM12",
	0,
	"1",
	"E-TM1.2");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM2", 
	"ETM2",
	0,
	"2",
	"E-TM2");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM31", 
	"ETM31",
	0,
	"3",
	"E-TM3.1");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM32", 
	"ETM32",
	0,
	"4",
	"E-TM3.2");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM33", 
	"ETM33",
	0,
	"5",
	"E-TM3.3");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fTDD_fTestModelSet",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM11",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM12",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM2",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM31",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM32",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM33",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fTDD_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fRatio_x5f1",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fRatio_x5f2",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fRatio_x5f4",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fTDD_fSpectrumShapingTypeSet",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fTimeWindowing",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fRaised_x5fcosine", 
	"Raised_cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fTDD_fWindowTypeSet",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fTukey",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fTDD_fFIR_x5fwithInterpSet",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fNO",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fRRC", 
	"RRC",
	0,
	"0",
	"RRC");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fIdeal_x5fLowpass", 
	"Ideal_Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fTDD_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fRRC",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fIdeal_x5fLowpass",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fSimple", 
	"Simple",
	0,
	"1",
	"Simple");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fTDD_fFull", 
	"Full",
	0,
	"2",
	"Full");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fTDD_fDisplayMsgSet",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fNone",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fSimple",
	"_nLTE_x5fDL_x5fTestModel_x5fTDD_fFull",
	"StdForm");
create_item ("LTE_DL_TestModel_TDD","3GPP LTE downlink ETM signal source",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_TestModel_TDD",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_TestModel_TDD",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_TestModel_TDD",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fTDD_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fTDD_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("TestModel","E-UTRA test model type",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fTDD_fTestModelSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fTDD_fETM11","ETM11")),
	create_parm ("RS_EPRE","transmit energy per resource element (RE) for transmitted cell specific RS for each antenna port, in unit of dBm/15kHz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-25")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fTDD_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fTDD_fRatio_x5f2","Ratio_2")),
	create_parm ("SpectrumShapingType","spectrum shaping method",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fTDD_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fTDD_fTimeWindowing","TimeWindowing")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols, valid when SpectrumShapingType=TimeWindowing",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fTDD_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fTDD_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent symbols in unit of chips (without oversampling), valid when SpectrumShapingType=TimeWindowing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval (without oversampling), compared to the start position of CP (negative means ahead of CP)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps, valid when SpectrumShapingType=FIRFilter",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","whether spectrum-shaping FIR filter with interpolation operation or not, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fTDD_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fTDD_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fTDD_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fTDD_fRRC","RRC")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter, valid when SpectrumShapingType=FIRFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm",".22")),
	create_parm ("DisplayMsg","control LTE system information displayed in Simulation Log window",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fTDD_fDisplayMsgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fTDD_fSimple","Simple")));
library_group("LTE, Source","LTE, Source","LTE_DL_TestModel_TDD");
palette_group("LTE, Source","LTE, Source","LTE_DL_TestModel_TDD");

create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fFDD_fBandwidthSet",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM11", 
	"ETM11",
	0,
	"0",
	"E-TM1.1");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM12", 
	"ETM12",
	0,
	"1",
	"E-TM1.2");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM2", 
	"ETM2",
	0,
	"2",
	"E-TM2");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM31", 
	"ETM31",
	0,
	"3",
	"E-TM3.1");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM32", 
	"ETM32",
	0,
	"4",
	"E-TM3.2");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM33", 
	"ETM33",
	0,
	"5",
	"E-TM3.3");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fFDD_fTestModelSet",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM11",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM12",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM2",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM31",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM32",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM33",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fFDD_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fRatio_x5f1",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fRatio_x5f2",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fRatio_x5f4",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fFDD_fSpectrumShapingTypeSet",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fTimeWindowing",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fRaised_x5fcosine", 
	"Raised_cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fFDD_fWindowTypeSet",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fTukey",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fFDD_fFIR_x5fwithInterpSet",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fNO",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fRRC", 
	"RRC",
	0,
	"0",
	"RRC");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fIdeal_x5fLowpass", 
	"Ideal_Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fFDD_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fRRC",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fIdeal_x5fLowpass",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fSimple", 
	"Simple",
	0,
	"1",
	"Simple");
create_constant_form ("_nLTE_x5fDL_x5fTestModel_x5fFDD_fFull", 
	"Full",
	0,
	"2",
	"Full");
create_form_set("_nLTE_x5fDL_x5fTestModel_x5fFDD_fDisplayMsgSet",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fNone",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fSimple",
	"_nLTE_x5fDL_x5fTestModel_x5fFDD_fFull",
	"StdForm");
create_item ("LTE_DL_TestModel_FDD","3GPP LTE downlink ETM signal source",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_TestModel_FDD",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_TestModel_FDD",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_TestModel_FDD",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fFDD_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fFDD_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("TestModel","E-UTRA test model type",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fFDD_fTestModelSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fFDD_fETM11","ETM11")),
	create_parm ("RS_EPRE","transmit energy per resource element (RE) for transmitted cell specific RS for each antenna port, in unit of dBm/15kHz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-25")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fFDD_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fFDD_fRatio_x5f2","Ratio_2")),
	create_parm ("SpectrumShapingType","spectrum shaping method",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fFDD_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fFDD_fTimeWindowing","TimeWindowing")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols, valid when SpectrumShapingType=TimeWindowing",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fFDD_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fFDD_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent symbols in unit of chips (without oversampling), valid when SpectrumShapingType=TimeWindowing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval (without oversampling), compared to the start position of CP (negative means ahead of CP)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps, valid when SpectrumShapingType=FIRFilter",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","whether spectrum-shaping FIR filter with interpolation operation or not, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fFDD_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fFDD_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fFDD_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fFDD_fRRC","RRC")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter, valid when SpectrumShapingType=FIRFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm",".22")),
	create_parm ("DisplayMsg","control LTE system information displayed in Simulation Log window",
		PARM_INT,
		"_nLTE_x5fDL_x5fTestModel_x5fFDD_fDisplayMsgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTestModel_x5fFDD_fSimple","Simple")));
library_group("LTE, Source","LTE, Source","LTE_DL_TestModel_FDD");
palette_group("LTE, Source","LTE, Source","LTE_DL_TestModel_FDD");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f7", 
	"Config 7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f8", 
	"Config 8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f7",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTx1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTx2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fLocalized",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fMCS_x5findex", 
	"MCS index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTransport_x5fblock_x5fsize", 
	"Transport block size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCode_x5frate", 
	"Code rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fMCS_x5findex",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory3",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fStartRB_x5f_x5f_x5fNumRBs", 
	"StartRB + NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRB_x5findices_x5f_x5f1D_x5f", 
	"RB indices (1D)",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRB_x5findices_x5f_x5f2D_x5f", 
	"RB indices (2D)",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fStartRB_x5f_x5f_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRB_x5findices_x5f_x5f1D_x5f",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRB_x5findices_x5f_x5f2D_x5f",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNg_x5f1_x5f6", 
	"Ng 1/6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNg_x5f1_x5f2", 
	"Ng 1/2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNg_x5f1", 
	"Ng 1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNg_x5f2", 
	"Ng 2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fPreDownsamplingSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSyncPerPort", 
	"SyncPerPort",
	0,
	"0",
	"SyncPerPort");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fAverageSync", 
	"AverageSync",
	0,
	"1",
	"AverageSync");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSyncModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSyncPerPort",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fAverageSync",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSearch_x5fevery_x5fframe", 
	"Search every frame",
	0,
	"0",
	"Search every frame");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSearch_x5fTrack", 
	"Search+Track",
	0,
	"1",
	"Search+Track");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSearchTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSearch_x5fevery_x5fframe",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSearch_x5fTrack",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fnon", 
	"non",
	0,
	"0",
	"non");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_f_x5f100Hz", 
	"<100Hz",
	0,
	"1",
	"<100Hz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_f_x5f15kHz", 
	"<15kHz",
	0,
	"2",
	"<15kHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_f_x5f35kHz", 
	"<35kHz",
	0,
	"3",
	"<35kHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fFreqSyncSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fnon",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_f_x5f100Hz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_f_x5f15kHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_f_x5f35kHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fMMSE_x5f2D", 
	"MMSE_2D",
	0,
	"1",
	"MMSE_2D");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fChEstimatorModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fLinear",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fMMSE_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fHard", 
	"Hard",
	0,
	"0",
	"Hard");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSoft", 
	"Soft",
	0,
	"1",
	"Soft");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fDemapperTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fHard",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSoft",
	"StdForm");
create_item ("LTE_DL_MIMO_4Ant_Rcv_RF","Downlink RF MIMO receiver with 4 rx antennas",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_4Ant_Rcv_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_4Ant_Rcv_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_MIMO_4Ant_Rcv_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RF_Parameters","RF parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RIn","source resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("RTemp","temperature",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","-273.15")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("GainImbalance","Gain imbalance in dB Q channel relative to I channel at 4 transmit antennas",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PhaseImbalance","Phase imbalance in dB Q channel relative to I channel at 4 transmit antennas",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0}")),
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fConfig_x5f4","Config_4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTx4","Tx4")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNO","NO")),
	create_parm ("MIMO_Parameters","MIMO-related parameters for all six Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CDD_Mode","CDD Mode for each UE, 1 for Zero-Delay, 0 for Large-Delay",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CdBlk_Index","codebook index for precoding for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_NumOfCWs","number of code words for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UEs_NumOfLayers","number of layers for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fStartRB_x5f_x5f_x5fNumRBs","StartRB___NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OtherUEs_MappingType","the modulation orders for other UEs  except UE 1 in all subframes",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RxAlgorithmParameters","parameters for LTE downlink receiver algorithm",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PreDownsampling","pre-downsampling to 1X symbol rate ?",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fPreDownsamplingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fNO","NO")),
	create_parm ("SyncMode","synchronization for every port or one synchronization for all ports",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSyncModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fAverageSync","AverageSync")),
	create_parm ("SearchType","start a new timing and frequence synchronization search for every frame or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSearchTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSearch_x5fTrack","Search_Track")),
	create_parm ("SearchRange","timing and frequence synchronization searching range for the first frame",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","3 msec")),
	create_parm ("TrackRange","timing and frequence synchronization tracking range for the frames except the first frame, valid when SearchType is set to Search+Track",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.1 msec")),
	create_parm ("FreqSync","frequency estimation range select",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fFreqSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_f_x5f15kHz","_15kHz")),
	create_parm ("ChEstimatorMode","mode of interpolation algorithm in channel estimator",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fChEstimatorModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fLinear","Linear")),
	create_parm ("MMSE_RBWinLen","number of RBs for each MMSE-2D interpolation",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","the maximum delay of multi-path channel",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 usec")),
	create_parm ("Fmax","the maximum doppler frequency",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")),
	create_parm ("Sym_StartPos","start position (without oversampling) to get the OFDM symbol for FFT operation for long CP and short CP symbols respecti...(Press Help for more info)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-3,-3}")),
	create_parm ("DemapperType","symbol demodulation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fDemapperTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fRcv_x5fRF_fSoft","Soft")),
	create_parm ("DemapperMaxLevel","the maximum level for soft demapping output when DemapperType is Soft or CSI",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("TC_Iteration","Turbo decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("LTE, Receiver","LTE, Receiver","LTE_DL_MIMO_4Ant_Rcv_RF");
palette_group("LTE, Receiver","LTE, Receiver","LTE_DL_MIMO_4Ant_Rcv_RF");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f7", 
	"Config 7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f8", 
	"Config 8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f7",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTx1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTx2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fLocalized",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fMCS_x5findex", 
	"MCS index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTransport_x5fblock_x5fsize", 
	"Transport block size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCode_x5frate", 
	"Code rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fMCS_x5findex",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory3",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fStartRB_x5f_x5f_x5fNumRBs", 
	"StartRB + NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRB_x5findices_x5f_x5f1D_x5f", 
	"RB indices (1D)",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRB_x5findices_x5f_x5f2D_x5f", 
	"RB indices (2D)",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fStartRB_x5f_x5f_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRB_x5findices_x5f_x5f1D_x5f",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRB_x5findices_x5f_x5f2D_x5f",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNg_x5f1_x5f6", 
	"Ng 1/6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNg_x5f1_x5f2", 
	"Ng 1/2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNg_x5f1", 
	"Ng 1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNg_x5f2", 
	"Ng 2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fPreDownsamplingSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSyncPerPort", 
	"SyncPerPort",
	0,
	"0",
	"SyncPerPort");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fAverageSync", 
	"AverageSync",
	0,
	"1",
	"AverageSync");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSyncModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSyncPerPort",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fAverageSync",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSearch_x5fevery_x5fframe", 
	"Search every frame",
	0,
	"0",
	"Search every frame");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSearch_x5fTrack", 
	"Search+Track",
	0,
	"1",
	"Search+Track");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSearchTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSearch_x5fevery_x5fframe",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSearch_x5fTrack",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fnon", 
	"non",
	0,
	"0",
	"non");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_f_x5f100Hz", 
	"<100Hz",
	0,
	"1",
	"<100Hz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_f_x5f15kHz", 
	"<15kHz",
	0,
	"2",
	"<15kHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_f_x5f35kHz", 
	"<35kHz",
	0,
	"3",
	"<35kHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fFreqSyncSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fnon",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_f_x5f100Hz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_f_x5f15kHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_f_x5f35kHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fMMSE_x5f2D", 
	"MMSE_2D",
	0,
	"1",
	"MMSE_2D");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fChEstimatorModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fLinear",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fMMSE_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fHard", 
	"Hard",
	0,
	"0",
	"Hard");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSoft", 
	"Soft",
	0,
	"1",
	"Soft");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fDemapperTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fHard",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSoft",
	"StdForm");
create_item ("LTE_DL_MIMO_2Ant_Rcv_RF","Downlink RF MIMO receiver with 2 rx antennas",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_2Ant_Rcv_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_2Ant_Rcv_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_MIMO_2Ant_Rcv_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RF_Parameters","RF parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RIn","source resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("RTemp","temperature",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","-273.15")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("GainImbalance","Gain imbalance in dB Q channel relative to I channel at 2 receiver antennas",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0}")),
	create_parm ("PhaseImbalance","Phase imbalance in dB Q channel relative to I channel at 2 receiver antennas",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0}")),
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fConfig_x5f4","Config_4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTx2","Tx2")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNO","NO")),
	create_parm ("MIMO_Parameters","MIMO-related parameters for all six Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CDD_Mode","CDD Mode for each UE, 1 for Zero-Delay, 0 for Large-Delay",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CdBlk_Index","codebook index for precoding for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_NumOfCWs","number of code words for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UEs_NumOfLayers","number of layers for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fStartRB_x5f_x5f_x5fNumRBs","StartRB___NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OtherUEs_MappingType","the modulation orders for other UEs  except UE 1 in all subframes",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RxAlgorithmParameters","parameters for LTE downlink receiver algorithm",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PreDownsampling","pre-downsampling to 1X symbol rate ?",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fPreDownsamplingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fNO","NO")),
	create_parm ("SyncMode","synchronization for every port or one synchronization for all ports",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSyncModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fAverageSync","AverageSync")),
	create_parm ("SearchType","start a new timing and frequence synchronization search for every frame or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSearchTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSearch_x5fTrack","Search_Track")),
	create_parm ("SearchRange","timing and frequence synchronization searching range for the first frame",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","3 msec")),
	create_parm ("TrackRange","timing and frequence synchronization tracking range for the frames except the first frame, valid when SearchType is set to Search+Track",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.1 msec")),
	create_parm ("FreqSync","frequency estimation range select",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fFreqSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_f_x5f15kHz","_15kHz")),
	create_parm ("ChEstimatorMode","mode of interpolation algorithm in channel estimator",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fChEstimatorModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fLinear","Linear")),
	create_parm ("MMSE_RBWinLen","number of RBs for each MMSE-2D interpolation",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","the maximum delay of multi-path channel",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 usec")),
	create_parm ("Fmax","the maximum doppler frequency",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")),
	create_parm ("Sym_StartPos","start position (without oversampling) to get the OFDM symbol for FFT operation for long CP and short CP symbols respecti...(Press Help for more info)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-3,-3}")),
	create_parm ("DemapperType","symbol demodulation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fDemapperTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fRcv_x5fRF_fSoft","Soft")),
	create_parm ("DemapperMaxLevel","the maximum level for soft demapping output when DemapperType is Soft or CSI",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("TC_Iteration","Turbo decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("LTE, Receiver","LTE, Receiver","LTE_DL_MIMO_2Ant_Rcv_RF");
palette_group("LTE, Receiver","LTE, Receiver","LTE_DL_MIMO_2Ant_Rcv_RF");

create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fFrameModeSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fFDD",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f7", 
	"Config 7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f8", 
	"Config 8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f6",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f7",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fBandwidthSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fRatio_x5f1",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fRatio_x5f2",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fRatio_x5f4",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fNormal",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fLocalized",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fMCS_x5findex", 
	"MCS index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fTransport_x5fblock_x5fsize", 
	"Transport block size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fCode_x5frate", 
	"Code rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fMCS_x5findex",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory1",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory2",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory3",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory4",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fStartRB_x5f_x5f_x5fNumRBs", 
	"StartRB + NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fRB_x5findices_x5f_x5f1D_x5f", 
	"RB indices (1D)",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fRB_x5findices_x5f_x5f2D_x5f", 
	"RB indices (2D)",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fStartRB_x5f_x5f_x5fNumRBs",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fRB_x5findices_x5f_x5f1D_x5f",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fRB_x5findices_x5f_x5f2D_x5f",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fNg_x5f1_x5f6", 
	"Ng 1/6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fNg_x5f1_x5f2", 
	"Ng 1/2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fNg_x5f1", 
	"Ng 1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fNg_x5f2", 
	"Ng 2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fNg_x5f1",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fPreDownsamplingSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fNO",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fSearch_x5fevery_x5fframe", 
	"Search every frame",
	0,
	"0",
	"Search every frame");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fSearch_x5fTrack", 
	"Search+Track",
	0,
	"1",
	"Search+Track");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fSearchTypeSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fSearch_x5fevery_x5fframe",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fSearch_x5fTrack",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fnon", 
	"non",
	0,
	"0",
	"non");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_f_x5f100Hz", 
	"<100Hz",
	0,
	"1",
	"<100Hz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_f_x5f15kHz", 
	"<15kHz",
	0,
	"2",
	"<15kHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_f_x5f35kHz", 
	"<35kHz",
	0,
	"3",
	"<35kHz");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fFreqSyncSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fnon",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_f_x5f100Hz",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_f_x5f15kHz",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_f_x5f35kHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fMMSE_x5f2D", 
	"MMSE_2D",
	0,
	"1",
	"MMSE_2D");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fChEstimatorModeSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fLinear",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fMMSE_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fHard", 
	"Hard",
	0,
	"0",
	"Hard");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fSoft", 
	"Soft",
	0,
	"1",
	"Soft");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_x5fRF_fCSI", 
	"CSI",
	0,
	"2",
	"CSI");
create_form_set("_nLTE_x5fDL_x5fReceiver_x5fRF_fDemapperTypeSet",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fHard",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fSoft",
	"_nLTE_x5fDL_x5fReceiver_x5fRF_fCSI",
	"StdForm");
create_item ("LTE_DL_Receiver_RF","Downlink receiver with RF de-modulator",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_Receiver_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_Receiver_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_Receiver_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RF_Parameters","RF parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RIn","source resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("RTemp","temperature",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","- 273.15")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("Sensitivity","voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("Phase","Reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("GainImbalance","gain imbalance in dB Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","phase imbalance in dB Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fConfig_x5f4","Config_4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fStartRB_x5f_x5f_x5fNumRBs","StartRB___NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OtherUEs_MappingType","the modulation orders for other UEs  except UE 1 in all subframes",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RxAlgorithmParameters","parameters for LTE downlink receiver algorithm",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PreDownsampling","pre-downsampling to 1X symbol rate ?",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fPreDownsamplingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fNO","NO")),
	create_parm ("SearchType","start a new timing and frequence synchronization search for every frame or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fSearchTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fSearch_x5fTrack","Search_Track")),
	create_parm ("SearchRange","timing and frequence synchronization searching range for the first frame",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","3 msec")),
	create_parm ("TrackRange","timing and frequence synchronization tracking range for the frames except the first frame, valid when SearchType is set to Search+Track",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.1 msec")),
	create_parm ("FreqSync","frequency estimation range select",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fFreqSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_f_x5f15kHz","_15kHz")),
	create_parm ("ChEstimatorMode","mode of interpolation algorithm in channel estimator",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fChEstimatorModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fLinear","Linear")),
	create_parm ("MMSE_RBWinLen","number of RBs for each MMSE-2D interpolation",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","the maximum delay of multi-path channel",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 usec")),
	create_parm ("Fmax","the maximum doppler frequency",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")),
	create_parm ("Sym_StartPos","start position (without oversampling) to get the OFDM symbol for FFT operation for long CP and short CP symbols respecti...(Press Help for more info)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-3,-3}")),
	create_parm ("DemapperType","symbol demodulation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_x5fRF_fDemapperTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_x5fRF_fSoft","Soft")),
	create_parm ("DemapperMaxLevel","the maximum level for soft demapping output when DemapperType is Soft or CSI",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("TC_Iteration","Turbo decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("LTE, Receiver","LTE, Receiver","LTE_DL_Receiver_RF");
palette_group("LTE, Receiver","LTE, Receiver","LTE_DL_Receiver_RF");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig0",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig1",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig2",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig3",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig4",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig5",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig6",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig7",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fTx1",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fTx2",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRx1",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRx2",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fDistributed", 
	"Distributed",
	0,
	"1",
	"Distributed");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fLocalized",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fDistributed",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fMCS_x5findex",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory1",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory2",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory3",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory4",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fPreDownsamplingSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fSyncPerPort", 
	"SyncPerPort",
	0,
	"0",
	"SyncPerPort");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fAverageSync", 
	"AverageSync",
	0,
	"1",
	"AverageSync");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fSyncModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fSyncPerPort",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fAverageSync",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fSearch_x5fevery_x5fframe", 
	"Search every frame",
	0,
	"0",
	"Search every frame");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fSearch_x5fTrack", 
	"Search+Track",
	0,
	"1",
	"Search+Track");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fSearchTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fSearch_x5fevery_x5fframe",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fSearch_x5fTrack",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fnon", 
	"non",
	0,
	"0",
	"non");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_f_x5f100Hz", 
	"<100Hz",
	0,
	"1",
	"<100Hz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_f_x5f15kHz", 
	"<15kHz",
	0,
	"2",
	"<15kHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_f_x5f35kHz", 
	"<35kHz",
	0,
	"3",
	"<35kHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fFreqSyncSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fnon",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_f_x5f100Hz",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_f_x5f15kHz",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_f_x5f35kHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fMMSE_x5f2D", 
	"MMSE_2D",
	0,
	"1",
	"MMSE_2D");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fFor_x5fEVM", 
	"For EVM",
	0,
	"2",
	"For EVM");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fChEstimatorModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fLinear",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fMMSE_x5f2D",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fFor_x5fEVM",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fHard", 
	"Hard",
	0,
	"0",
	"Hard");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fSoft", 
	"Soft",
	0,
	"1",
	"Soft");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fRcv_fCSI", 
	"CSI",
	0,
	"2",
	"CSI");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fRcv_fDemapperTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fHard",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fSoft",
	"_nLTE_x5fDL_x5fMIMO_x5fRcv_fCSI",
	"StdForm");
create_item ("LTE_DL_MIMO_Rcv","Downlink baseband MIMO receiver",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_Rcv",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_Rcv",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_MIMO_Rcv",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fTx1","Tx1")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRx1","Rx1")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNO","NO")),
	create_parm ("MIMO_Parameters","MIMO-related parameters for all six Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CDD_Mode","CDD Mode for each UE, 1 for Zero-Delay, 0 for Large-Delay",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CdBlk_Index","codebook index for precoding for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_NumOfCWs","number of code words for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UEs_NumOfLayers","number of layers for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RxAlgorithmParameters","parameters for LTE downlink receiver algorithm",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PreDownsampling","pre-downsampling to 1X symbol rate ?",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fPreDownsamplingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fNO","NO")),
	create_parm ("SyncMode","synchronization for every port or one synchronization for all ports",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fSyncModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fAverageSync","AverageSync")),
	create_parm ("SearchType","start a new timing and frequence synchronization search for every frame or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fSearchTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fSearch_x5fTrack","Search_Track")),
	create_parm ("SearchRange","timing and frequence synchronization searching range for the first frame",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","3 msec")),
	create_parm ("TrackRange","timing and frequence synchronization tracking range for the frames except the first frame, valid when SearchType is set to Search+Track",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.1 msec")),
	create_parm ("FreqSync","frequency estimation range select",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fFreqSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_f_x5f15kHz","_15kHz")),
	create_parm ("ChEstimatorMode","mode of interpolation algorithm in channel estimator",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fChEstimatorModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fLinear","Linear")),
	create_parm ("MMSE_RBWinLen","number of RBs for each MMSE-2D interpolation",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","the maximum delay of multi-path channel",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 usec")),
	create_parm ("Fmax","the maximum doppler frequency",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")),
	create_parm ("Sym_StartPos","start position (without oversampling) to get the OFDM symbol for FFT operation for long CP and short CP symbols respecti...(Press Help for more info)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-3,-3}")),
	create_parm ("DemapperType","symbol demodulation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fRcv_fDemapperTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fRcv_fSoft","Soft")),
	create_parm ("DemapperMaxLevel","the maximum level for soft demapping output when DemapperType is Soft or CSI",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("TC_Iteration","Turbo decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("LTE, Receiver","LTE, Receiver","LTE_DL_MIMO_Rcv");
palette_group("LTE, Receiver","LTE, Receiver","LTE_DL_MIMO_Rcv");

create_constant_form ("_nLTE_x5fDL_x5fReceiver_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fReceiver_fFrameModeSet",
	"_nLTE_x5fDL_x5fReceiver_fFDD",
	"_nLTE_x5fDL_x5fReceiver_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fReceiver_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fReceiver_fConfig_x5f0",
	"_nLTE_x5fDL_x5fReceiver_fConfig_x5f1",
	"_nLTE_x5fDL_x5fReceiver_fConfig_x5f2",
	"_nLTE_x5fDL_x5fReceiver_fConfig_x5f3",
	"_nLTE_x5fDL_x5fReceiver_fConfig_x5f4",
	"_nLTE_x5fDL_x5fReceiver_fConfig_x5f5",
	"_nLTE_x5fDL_x5fReceiver_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fReceiver_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fReceiver_fConfig0",
	"_nLTE_x5fDL_x5fReceiver_fConfig1",
	"_nLTE_x5fDL_x5fReceiver_fConfig2",
	"_nLTE_x5fDL_x5fReceiver_fConfig3",
	"_nLTE_x5fDL_x5fReceiver_fConfig4",
	"_nLTE_x5fDL_x5fReceiver_fConfig5",
	"_nLTE_x5fDL_x5fReceiver_fConfig6",
	"_nLTE_x5fDL_x5fReceiver_fConfig7",
	"_nLTE_x5fDL_x5fReceiver_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fReceiver_fBandwidthSet",
	"_nLTE_x5fDL_x5fReceiver_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fReceiver_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fReceiver_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fReceiver_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fReceiver_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fReceiver_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fReceiver_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fReceiver_fRatio_x5f1",
	"_nLTE_x5fDL_x5fReceiver_fRatio_x5f2",
	"_nLTE_x5fDL_x5fReceiver_fRatio_x5f4",
	"_nLTE_x5fDL_x5fReceiver_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fReceiver_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fReceiver_fNormal",
	"_nLTE_x5fDL_x5fReceiver_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fDistributed", 
	"Distributed",
	0,
	"1",
	"Distributed");
create_form_set("_nLTE_x5fDL_x5fReceiver_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fReceiver_fLocalized",
	"_nLTE_x5fDL_x5fReceiver_fDistributed",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fReceiver_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fReceiver_fMCS_x5findex",
	"_nLTE_x5fDL_x5fReceiver_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fReceiver_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fReceiver_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fReceiver_fCategory1",
	"_nLTE_x5fDL_x5fReceiver_fCategory2",
	"_nLTE_x5fDL_x5fReceiver_fCategory3",
	"_nLTE_x5fDL_x5fReceiver_fCategory4",
	"_nLTE_x5fDL_x5fReceiver_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fReceiver_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fReceiver_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fReceiver_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fReceiver_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fReceiver_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fReceiver_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fReceiver_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fReceiver_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fReceiver_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fReceiver_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fReceiver_fNg_x5f1",
	"_nLTE_x5fDL_x5fReceiver_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fReceiver_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fReceiver_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fReceiver_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fReceiver_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fReceiver_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fReceiver_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fReceiver_fPreDownsamplingSet",
	"_nLTE_x5fDL_x5fReceiver_fNO",
	"_nLTE_x5fDL_x5fReceiver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fSearch_x5fevery_x5fframe", 
	"Search every frame",
	0,
	"0",
	"Search every frame");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fSearch_x5fTrack", 
	"Search+Track",
	0,
	"1",
	"Search+Track");
create_form_set("_nLTE_x5fDL_x5fReceiver_fSearchTypeSet",
	"_nLTE_x5fDL_x5fReceiver_fSearch_x5fevery_x5fframe",
	"_nLTE_x5fDL_x5fReceiver_fSearch_x5fTrack",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fnon", 
	"non",
	0,
	"0",
	"non");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_f_x5f100Hz", 
	"<100Hz",
	0,
	"1",
	"<100Hz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_f_x5f15kHz", 
	"<15kHz",
	0,
	"2",
	"<15kHz");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_f_x5f35kHz", 
	"<35kHz",
	0,
	"3",
	"<35kHz");
create_form_set("_nLTE_x5fDL_x5fReceiver_fFreqSyncSet",
	"_nLTE_x5fDL_x5fReceiver_fnon",
	"_nLTE_x5fDL_x5fReceiver_f_x5f100Hz",
	"_nLTE_x5fDL_x5fReceiver_f_x5f15kHz",
	"_nLTE_x5fDL_x5fReceiver_f_x5f35kHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fMMSE_x5f2D", 
	"MMSE_2D",
	0,
	"1",
	"MMSE_2D");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fFor_x5fEVM", 
	"For EVM",
	0,
	"2",
	"For EVM");
create_form_set("_nLTE_x5fDL_x5fReceiver_fChEstimatorModeSet",
	"_nLTE_x5fDL_x5fReceiver_fLinear",
	"_nLTE_x5fDL_x5fReceiver_fMMSE_x5f2D",
	"_nLTE_x5fDL_x5fReceiver_fFor_x5fEVM",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fHard", 
	"Hard",
	0,
	"0",
	"Hard");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fSoft", 
	"Soft",
	0,
	"1",
	"Soft");
create_constant_form ("_nLTE_x5fDL_x5fReceiver_fCSI", 
	"CSI",
	0,
	"2",
	"CSI");
create_form_set("_nLTE_x5fDL_x5fReceiver_fDemapperTypeSet",
	"_nLTE_x5fDL_x5fReceiver_fHard",
	"_nLTE_x5fDL_x5fReceiver_fSoft",
	"_nLTE_x5fDL_x5fReceiver_fCSI",
	"StdForm");
create_item ("LTE_DL_Receiver","Downlink baseband receiver",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_Receiver",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_Receiver",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_Receiver",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RxAlgorithmParameters","parameters for LTE downlink receiver algorithm",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PreDownsampling","pre-downsampling to 1X symbol rate ?",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fPreDownsamplingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fNO","NO")),
	create_parm ("SearchType","start a new timing and frequence synchronization search for every frame or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fSearchTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fSearch_x5fTrack","Search_Track")),
	create_parm ("SearchRange","timing and frequence synchronization searching range for the first frame",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","3 msec")),
	create_parm ("TrackRange","timing and frequence synchronization tracking range for the frames except the first frame, valid when SearchType is set to Search+Track",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.1 msec")),
	create_parm ("FreqSync","frequency estimation range select",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fFreqSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_f_x5f15kHz","_15kHz")),
	create_parm ("ChEstimatorMode","mode of interpolation algorithm in channel estimator",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fChEstimatorModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fLinear","Linear")),
	create_parm ("MMSE_RBWinLen","number of RBs for each MMSE-2D interpolation",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","the maximum delay of multi-path channel",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 usec")),
	create_parm ("Fmax","the maximum doppler frequency",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")),
	create_parm ("Sym_StartPos","start position (without oversampling) to get the OFDM symbol for FFT operation for long CP and short CP symbols respecti...(Press Help for more info)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-3,-3}")),
	create_parm ("DemapperType","symbol demodulation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fReceiver_fDemapperTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fReceiver_fSoft","Soft")),
	create_parm ("DemapperMaxLevel","the maximum level for soft demapping output when DemapperType is Soft or CSI",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("TC_Iteration","Turbo decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("LTE, Receiver","LTE, Receiver","LTE_DL_Receiver");
palette_group("LTE, Receiver","LTE, Receiver","LTE_DL_Receiver");

create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fTimeFreqSync_fFrameModeSet",
	"_nLTE_x5fDL_x5fTimeFreqSync_fFDD",
	"_nLTE_x5fDL_x5fTimeFreqSync_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fTimeFreqSync_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f0",
	"_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f1",
	"_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f2",
	"_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f3",
	"_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f4",
	"_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f5",
	"_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fTimeFreqSync_fBandwidthSet",
	"_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fTimeFreqSync_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fTimeFreqSync_fRx1",
	"_nLTE_x5fDL_x5fTimeFreqSync_fRx2",
	"_nLTE_x5fDL_x5fTimeFreqSync_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fTimeFreqSync_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fTimeFreqSync_fRatio_x5f1",
	"_nLTE_x5fDL_x5fTimeFreqSync_fRatio_x5f2",
	"_nLTE_x5fDL_x5fTimeFreqSync_fRatio_x5f4",
	"_nLTE_x5fDL_x5fTimeFreqSync_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fTimeFreqSync_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fTimeFreqSync_fNormal",
	"_nLTE_x5fDL_x5fTimeFreqSync_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fSyncPerPort", 
	"SyncPerPort",
	0,
	"0",
	"SyncPerPort");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fAverageSync", 
	"AverageSync",
	0,
	"1",
	"AverageSync");
create_form_set("_nLTE_x5fDL_x5fTimeFreqSync_fSync_x5fModeSet",
	"_nLTE_x5fDL_x5fTimeFreqSync_fSyncPerPort",
	"_nLTE_x5fDL_x5fTimeFreqSync_fAverageSync",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fCross_x5fCorrelation", 
	"Cross-Correlation",
	0,
	"0",
	"Cross-Correlation");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fAuto_x5fCorrelation", 
	"Auto-Correlation",
	0,
	"1",
	"Auto-Correlation");
create_form_set("_nLTE_x5fDL_x5fTimeFreqSync_fSyncTypeSet",
	"_nLTE_x5fDL_x5fTimeFreqSync_fCross_x5fCorrelation",
	"_nLTE_x5fDL_x5fTimeFreqSync_fAuto_x5fCorrelation",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fSearch_x5fevery_x5fframe", 
	"Search every frame",
	0,
	"0",
	"Search every frame");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fSearch_x5fTrack", 
	"Search+Track",
	0,
	"1",
	"Search+Track");
create_form_set("_nLTE_x5fDL_x5fTimeFreqSync_fSearchTypeSet",
	"_nLTE_x5fDL_x5fTimeFreqSync_fSearch_x5fevery_x5fframe",
	"_nLTE_x5fDL_x5fTimeFreqSync_fSearch_x5fTrack",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_fnon", 
	"non",
	0,
	"0",
	"non");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_f_x5f100Hz", 
	"<100Hz",
	0,
	"1",
	"<100Hz");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_f_x5f15kHz", 
	"<15kHz",
	0,
	"2",
	"<15kHz");
create_constant_form ("_nLTE_x5fDL_x5fTimeFreqSync_f_x5f35kHz", 
	"<35kHz",
	0,
	"3",
	"<35kHz");
create_form_set("_nLTE_x5fDL_x5fTimeFreqSync_fFreqSyncSet",
	"_nLTE_x5fDL_x5fTimeFreqSync_fnon",
	"_nLTE_x5fDL_x5fTimeFreqSync_f_x5f100Hz",
	"_nLTE_x5fDL_x5fTimeFreqSync_f_x5f15kHz",
	"_nLTE_x5fDL_x5fTimeFreqSync_f_x5f35kHz",
	"StdForm");
create_item ("LTE_DL_TimeFreqSync","Frequency and time synchronization for DL",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_TimeFreqSync",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_TimeFreqSync",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_TimeFreqSync",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fTimeFreqSync_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTimeFreqSync_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fTimeFreqSync_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTimeFreqSync_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fTimeFreqSync_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTimeFreqSync_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fTimeFreqSync_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTimeFreqSync_fRx1","Rx1")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fTimeFreqSync_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTimeFreqSync_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fTimeFreqSync_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTimeFreqSync_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("Sync_Mode","synchronization for every port or one synchronization for all ports",
		PARM_INT,
		"_nLTE_x5fDL_x5fTimeFreqSync_fSync_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTimeFreqSync_fSyncPerPort","SyncPerPort")),
	create_parm ("SyncType","synchronization type indicating using PSS cross-correlation between two received PSSs or auto-correlation between receiv...(Press Help for more info)",
		PARM_INT,
		"_nLTE_x5fDL_x5fTimeFreqSync_fSyncTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTimeFreqSync_fCross_x5fCorrelation","Cross_Correlation")),
	create_parm ("SearchType","start a new timing and frequence synchronization search for every frame or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fTimeFreqSync_fSearchTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTimeFreqSync_fSearch_x5fTrack","Search_Track")),
	create_parm ("SearchRange","timing and frequence synchronization searching range for the first frame",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","3 msec")),
	create_parm ("TrackRange","timing and frequence synchronization tracking range for the frames except the first frame, valid when SearchType is set to Search+Track",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.1 msec")),
	create_parm ("FreqSync","frequency estimation range select",
		PARM_INT,
		"_nLTE_x5fDL_x5fTimeFreqSync_fFreqSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fTimeFreqSync_f_x5f15kHz","_15kHz")));
library_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_DL_TimeFreqSync");
palette_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_DL_TimeFreqSync");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f7", 
	"Config 7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f8", 
	"Config 8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f7",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fLocalized",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPN9", 
	"PN9",
	0,
	"0",
	"PN9");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPN15", 
	"PN15",
	0,
	"1",
	"PN15");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFIX4", 
	"FIX4",
	0,
	"2",
	"FIX4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f4_x5f1_x5f4_x5f0", 
	"_4_1_4_0",
	0,
	"3",
	"_4_1_4_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f8_x5f1_x5f8_x5f0", 
	"_8_1_8_0",
	0,
	"4",
	"_8_1_8_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f16_x5f1_x5f16_x5f0", 
	"_16_1_16_0",
	0,
	"5",
	"_16_1_16_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f32_x5f1_x5f32_x5f0", 
	"_32_1_32_0",
	0,
	"6",
	"_32_1_32_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f64_x5f1_x5f64_x5f0", 
	"_64_1_64_0",
	0,
	"7",
	"_64_1_64_0");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fUE1_x5fCW1_x5fDataPatternSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPN9",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPN15",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFIX4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f4_x5f1_x5f4_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f8_x5f1_x5f8_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f16_x5f1_x5f16_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f32_x5f1_x5f32_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f64_x5f1_x5f64_x5f0",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPN9", 
	"PN9",
	0,
	"0",
	"PN9");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPN15", 
	"PN15",
	0,
	"1",
	"PN15");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFIX4", 
	"FIX4",
	0,
	"2",
	"FIX4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f4_x5f1_x5f4_x5f0", 
	"_4_1_4_0",
	0,
	"3",
	"_4_1_4_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f8_x5f1_x5f8_x5f0", 
	"_8_1_8_0",
	0,
	"4",
	"_8_1_8_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f16_x5f1_x5f16_x5f0", 
	"_16_1_16_0",
	0,
	"5",
	"_16_1_16_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f32_x5f1_x5f32_x5f0", 
	"_32_1_32_0",
	0,
	"6",
	"_32_1_32_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f64_x5f1_x5f64_x5f0", 
	"_64_1_64_0",
	0,
	"7",
	"_64_1_64_0");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fUE1_x5fCW2_x5fDataPatternSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPN9",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPN15",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFIX4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f4_x5f1_x5f4_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f8_x5f1_x5f8_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f16_x5f1_x5f16_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f32_x5f1_x5f32_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_f_x5f64_x5f1_x5f64_x5f0",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fMCS_x5findex", 
	"MCS index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize", 
	"Transport block size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCode_x5frate", 
	"Code rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fMCS_x5findex",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory3",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs", 
	"StartRB + NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f1D_x5f", 
	"RB indices (1D)",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f2D_x5f", 
	"RB indices (2D)",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f1D_x5f",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f2D_x5f",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNg_x5f1_x5f6", 
	"Ng 1/6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNg_x5f1_x5f2", 
	"Ng 1/2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNg_x5f1", 
	"Ng 1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNg_x5f2", 
	"Ng 2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fSpectrumShapingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTimeWindowing",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRaised_x5fcosine", 
	"Raised cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fWindowTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTukey",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFIR_x5fwithInterpSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRRC", 
	"RRC",
	0,
	"0",
	"RRC");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fIdeal_x5fLowpass", 
	"Ideal Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRRC",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fIdeal_x5fLowpass",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fSimple", 
	"Simple",
	0,
	"1",
	"Simple");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFull", 
	"Full",
	0,
	"2",
	"Full");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fDisplayMsgSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNone",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fSimple",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFull",
	"StdForm");
create_item ("LTE_DL_MIMO_4Ant_Src_RF","Downlink RF 4 antennas MIMO signal source",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_4Ant_Src_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_4Ant_Src_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_MIMO_4Ant_Src_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RF_Parameters","RF parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("ROut","Source resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","TEMPERATURE",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("GainImbalance","Gain imbalance in dB Q channel relative to I channel at 4 transmit antennas",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PhaseImbalance","Phase imbalance in dB Q channel relative to I channel at 4 transmit antennas",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0}")),
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fConfig_x5f4","Config_4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("MIMO_Parameters","MIMO-related parameters for all six Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CDD_Mode","CDD Mode for each UE, 1 for Zero-Delay, 0 for Large-Delay",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CdBlk_Index","codebook index for precoding for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_NumOfCWs","number of code words for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UEs_NumOfLayers","number of layers for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_CW1_DataPattern","the data transmitted in the transport block of UE1 Code word 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fUE1_x5fCW1_x5fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPN9","PN9")),
	create_parm ("UE1_CW2_DataPattern","the data transmitted in the transport block of UE1 Code word 2",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fUE1_x5fCW2_x5fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPN9","PN9")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs","StartRB___NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OtherUEs_MappingType","the modulation orders for other UEs  except UE 1 in all subframes",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("BCH_BlockSize","transport block size for BCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","624")),
	create_parm ("HI","physical hybrid-ARQ ACK/NAK indicators",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, -1, -1, -1, -1, -1, -1, -1}")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RS_EPRE","transmit energy per resource element (RE) for cell specific RS for each antenna port, in unit of dBm/15kHz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-25")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SpectrumShapingParameters","parameters for transmit spectrum shaping",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SpectrumShapingType","spectrum shaping method",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTimeWindowing","TimeWindowing")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols, valid when SpectrumShapingType=TimeWindowing",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent symbols in unit of chips (without oversampling), valid when SpectrumShapingType=TimeWindowing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval (without oversampling), compared to the start position of CP (negative means ahead of CP)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps, valid when SpectrumShapingType=FIRFilter",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","whether spectrum-shaping FIR filter with interpolation operation or not, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fRRC","RRC")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter, valid when SpectrumShapingType=FIRFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm",".22")),
	create_parm ("DisplayMsg","the messages displayed in Status/Summary window",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fDisplayMsgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRF_fSimple","Simple")));
library_group("LTE, Source","LTE, Source","LTE_DL_MIMO_4Ant_Src_RF");
palette_group("LTE, Source","LTE, Source","LTE_DL_MIMO_4Ant_Src_RF");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f7", 
	"Config 7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f8", 
	"Config 8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f7",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fLocalized",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPN9", 
	"PN9",
	0,
	"0",
	"PN9");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPN15", 
	"PN15",
	0,
	"1",
	"PN15");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFIX4", 
	"FIX4",
	0,
	"2",
	"FIX4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f4_x5f1_x5f4_x5f0", 
	"_4_1_4_0",
	0,
	"3",
	"_4_1_4_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f8_x5f1_x5f8_x5f0", 
	"_8_1_8_0",
	0,
	"4",
	"_8_1_8_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f16_x5f1_x5f16_x5f0", 
	"_16_1_16_0",
	0,
	"5",
	"_16_1_16_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f32_x5f1_x5f32_x5f0", 
	"_32_1_32_0",
	0,
	"6",
	"_32_1_32_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f64_x5f1_x5f64_x5f0", 
	"_64_1_64_0",
	0,
	"7",
	"_64_1_64_0");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fUE1_x5fCW1_x5fDataPatternSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPN9",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPN15",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFIX4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f4_x5f1_x5f4_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f8_x5f1_x5f8_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f16_x5f1_x5f16_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f32_x5f1_x5f32_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f64_x5f1_x5f64_x5f0",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPN9", 
	"PN9",
	0,
	"0",
	"PN9");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPN15", 
	"PN15",
	0,
	"1",
	"PN15");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFIX4", 
	"FIX4",
	0,
	"2",
	"FIX4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f4_x5f1_x5f4_x5f0", 
	"_4_1_4_0",
	0,
	"3",
	"_4_1_4_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f8_x5f1_x5f8_x5f0", 
	"_8_1_8_0",
	0,
	"4",
	"_8_1_8_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f16_x5f1_x5f16_x5f0", 
	"_16_1_16_0",
	0,
	"5",
	"_16_1_16_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f32_x5f1_x5f32_x5f0", 
	"_32_1_32_0",
	0,
	"6",
	"_32_1_32_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f64_x5f1_x5f64_x5f0", 
	"_64_1_64_0",
	0,
	"7",
	"_64_1_64_0");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fUE1_x5fCW2_x5fDataPatternSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPN9",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPN15",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFIX4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f4_x5f1_x5f4_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f8_x5f1_x5f8_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f16_x5f1_x5f16_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f32_x5f1_x5f32_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_f_x5f64_x5f1_x5f64_x5f0",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fMCS_x5findex", 
	"MCS index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize", 
	"Transport block size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCode_x5frate", 
	"Code rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fMCS_x5findex",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory3",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs", 
	"StartRB + NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f1D_x5f", 
	"RB indices (1D)",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f2D_x5f", 
	"RB indices (2D)",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f1D_x5f",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f2D_x5f",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNg_x5f1_x5f6", 
	"Ng 1/6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNg_x5f1_x5f2", 
	"Ng 1/2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNg_x5f1", 
	"Ng 1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNg_x5f2", 
	"Ng 2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fSpectrumShapingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTimeWindowing",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRaised_x5fcosine", 
	"Raised cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fWindowTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTukey",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFIR_x5fwithInterpSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRRC", 
	"RRC",
	0,
	"0",
	"RRC");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fIdeal_x5fLowpass", 
	"Ideal Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRRC",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fIdeal_x5fLowpass",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fSimple", 
	"Simple",
	0,
	"1",
	"Simple");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFull", 
	"Full",
	0,
	"2",
	"Full");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fDisplayMsgSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNone",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fSimple",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFull",
	"StdForm");
create_item ("LTE_DL_MIMO_2Ant_Src_RF","Downlink RF 2 antennas MIMO signal source",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_2Ant_Src_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_2Ant_Src_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_MIMO_2Ant_Src_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RF_Parameters","RF parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("ROut","Source resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","TEMPERATURE",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("GainImbalance","Gain imbalance in dB Q channel relative to I channel at 2 transmit antennas",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0}")),
	create_parm ("PhaseImbalance","Phase imbalance in dB Q channel relative to I channel at 2 transmit antennas",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0}")),
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fConfig_x5f4","Config_4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("MIMO_Parameters","MIMO-related parameters for all six Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CDD_Mode","CDD Mode for each UE, 1 for Zero-Delay, 0 for Large-Delay",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CdBlk_Index","codebook index for precoding for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_NumOfCWs","number of code words for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UEs_NumOfLayers","number of layers for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_CW1_DataPattern","the data transmitted in the transport block of UE1 Code word 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fUE1_x5fCW1_x5fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPN9","PN9")),
	create_parm ("UE1_CW2_DataPattern","the data transmitted in the transport block of UE1 Code word 2",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fUE1_x5fCW2_x5fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPN9","PN9")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs","StartRB___NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OtherUEs_MappingType","the modulation orders for other UEs  except UE 1 in all subframes",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("BCH_BlockSize","transport block size for BCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","624")),
	create_parm ("HI","physical hybrid-ARQ ACK/NAK indicators",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, -1, -1, -1, -1, -1, -1, -1}")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RS_EPRE","transmit energy per resource element (RE) for cell specific RS for each antenna port, in unit of dBm/15kHz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-25")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SpectrumShapingParameters","parameters for transmit spectrum shaping",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SpectrumShapingType","spectrum shaping method",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTimeWindowing","TimeWindowing")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols, valid when SpectrumShapingType=TimeWindowing",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent symbols in unit of chips (without oversampling), valid when SpectrumShapingType=TimeWindowing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval (without oversampling), compared to the start position of CP (negative means ahead of CP)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps, valid when SpectrumShapingType=FIRFilter",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","whether spectrum-shaping FIR filter with interpolation operation or not, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fRRC","RRC")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter, valid when SpectrumShapingType=FIRFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm",".22")),
	create_parm ("DisplayMsg","the messages displayed in Status/Summary window",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fDisplayMsgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRF_fSimple","Simple")));
library_group("LTE, Source","LTE, Source","LTE_DL_MIMO_2Ant_Src_RF");
palette_group("LTE, Source","LTE, Source","LTE_DL_MIMO_2Ant_Src_RF");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig3",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig5",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig6",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig7",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fDistributed", 
	"Distributed",
	0,
	"1",
	"Distributed");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fLocalized",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fDistributed",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fMCS_x5findex",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory3",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory4",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fSpectrumShapingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTimeWindowing",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRaised_x5fcosine", 
	"Raised_cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fWindowTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTukey",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFIR_x5fwithInterpSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRRC", 
	"RRC",
	0,
	"0",
	"RRC");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fIdeal_x5fLowpass", 
	"Ideal_Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRRC",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fIdeal_x5fLowpass",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fSimple", 
	"Simple",
	0,
	"1",
	"Simple");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFull", 
	"Full",
	0,
	"2",
	"Full");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fDisplayMsgSet",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNone",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fSimple",
	"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFull",
	"StdForm");
create_item ("LTE_DL_MIMO_4Ant_Src","Downlink baseband 4 antennas MIMO signal source",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_4Ant_Src",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_4Ant_Src",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_MIMO_4Ant_Src",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNO","NO")),
	create_parm ("MIMO_Parameters","MIMO-related parameters for all six Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CDD_Mode","CDD Mode for each UE, 1 for Zero-Delay, 0 for Large-Delay",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CdBlk_Index","codebook index for precoding for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_NumOfCWs","number of code words for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UEs_NumOfLayers","number of layers for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OtherUEs_MappingType","the modulation orders for other UEs  except UE 1 in all subframes",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("BCH_BlockSize","transport block size for BCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","24")),
	create_parm ("HI","physical hybrid-ARQ ACK/NAK indicators",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, -1, -1, -1, -1, -1, -1, -1}")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RS_EPRE","transmit energy per resource element (RE) for transmitted cell specific RS for each antenna port, in unit of dBm/15kHz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-25")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SpectrumShapingParameters","parameters for transmit spectrum shaping",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SpectrumShapingType","spectrum shaping method",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTimeWindowing","TimeWindowing")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols, valid when SpectrumShapingType=TimeWindowing",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent symbols in unit of chips (without oversampling), valid when SpectrumShapingType=TimeWindowing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval (without oversampling), compared to the start position of CP (negative means ahead of CP)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps, valid when SpectrumShapingType=FIRFilter",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","whether spectrum-shaping FIR filter with interpolation operation or not, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fRRC","RRC")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter, valid when SpectrumShapingType=FIRFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm",".22")),
	create_parm ("DisplayMsg","control LTE system information displayed in Simulation Log window",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fDisplayMsgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_fSimple","Simple")));
library_group("LTE, Source","LTE, Source","LTE_DL_MIMO_4Ant_Src");
palette_group("LTE, Source","LTE, Source","LTE_DL_MIMO_4Ant_Src");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig3",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig5",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig6",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig7",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fDistributed", 
	"Distributed",
	0,
	"1",
	"Distributed");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fLocalized",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fDistributed",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fMCS_x5findex",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory3",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory4",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fSpectrumShapingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTimeWindowing",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRaised_x5fcosine", 
	"Raised_cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fWindowTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTukey",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFIR_x5fwithInterpSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRRC", 
	"RRC",
	0,
	"0",
	"RRC");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fIdeal_x5fLowpass", 
	"Ideal_Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRRC",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fIdeal_x5fLowpass",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fSimple", 
	"Simple",
	0,
	"1",
	"Simple");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFull", 
	"Full",
	0,
	"2",
	"Full");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fDisplayMsgSet",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNone",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fSimple",
	"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFull",
	"StdForm");
create_item ("LTE_DL_MIMO_2Ant_Src","Downlink baseband 2 antennas MIMO signal source",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_2Ant_Src",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_2Ant_Src",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_MIMO_2Ant_Src",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNO","NO")),
	create_parm ("MIMO_Parameters","MIMO-related parameters for all six Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CDD_Mode","CDD Mode for each UE, 1 for Zero-Delay, 0 for Large-Delay",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CdBlk_Index","codebook index for precoding for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_NumOfCWs","number of code words for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UEs_NumOfLayers","number of layers for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2}")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OtherUEs_MappingType","the modulation orders for other UEs  except UE 1 in all subframes",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("BCH_BlockSize","transport block size for BCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","24")),
	create_parm ("HI","physical hybrid-ARQ ACK/NAK indicators",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, -1, -1, -1, -1, -1, -1, -1}")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RS_EPRE","transmit energy per resource element (RE) for transmitted cell specific RS for each antenna port, in unit of dBm/15kHz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-25")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SpectrumShapingParameters","parameters for transmit spectrum shaping",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SpectrumShapingType","spectrum shaping method",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTimeWindowing","TimeWindowing")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols, valid when SpectrumShapingType=TimeWindowing",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent symbols in unit of chips (without oversampling), valid when SpectrumShapingType=TimeWindowing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval (without oversampling), compared to the start position of CP (negative means ahead of CP)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps, valid when SpectrumShapingType=FIRFilter",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","whether spectrum-shaping FIR filter with interpolation operation or not, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fRRC","RRC")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter, valid when SpectrumShapingType=FIRFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm",".22")),
	create_parm ("DisplayMsg","control LTE system information displayed in Simulation Log window",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fDisplayMsgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_fSimple","Simple")));
library_group("LTE, Source","LTE, Source","LTE_DL_MIMO_2Ant_Src");
palette_group("LTE, Source","LTE, Source","LTE_DL_MIMO_2Ant_Src");

create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fMirrorSpectrumSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fFrameModeSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fFDD",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f7", 
	"Config 7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f8", 
	"Config 8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f0",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f1",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f2",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f3",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f4",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f5",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f6",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f7",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fBandwidthSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fRatio_x5f1",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fRatio_x5f2",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fRatio_x5f4",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fNormal",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fLocalized",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fPN9", 
	"PN9",
	0,
	"0",
	"PN9");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fPN15", 
	"PN15",
	0,
	"1",
	"PN15");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fFIX4", 
	"FIX4",
	0,
	"2",
	"FIX4");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_f_x5f4_x5f1_x5f4_x5f0", 
	"_4_1_4_0",
	0,
	"3",
	"_4_1_4_0");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_f_x5f8_x5f1_x5f8_x5f0", 
	"_8_1_8_0",
	0,
	"4",
	"_8_1_8_0");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_f_x5f16_x5f1_x5f16_x5f0", 
	"_16_1_16_0",
	0,
	"5",
	"_16_1_16_0");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_f_x5f32_x5f1_x5f32_x5f0", 
	"_32_1_32_0",
	0,
	"6",
	"_32_1_32_0");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_f_x5f64_x5f1_x5f64_x5f0", 
	"_64_1_64_0",
	0,
	"7",
	"_64_1_64_0");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fUE1_x5fDataPatternSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fPN9",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fPN15",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fFIX4",
	"_nLTE_x5fDL_x5fSrc_x5fRF_f_x5f4_x5f1_x5f4_x5f0",
	"_nLTE_x5fDL_x5fSrc_x5fRF_f_x5f8_x5f1_x5f8_x5f0",
	"_nLTE_x5fDL_x5fSrc_x5fRF_f_x5f16_x5f1_x5f16_x5f0",
	"_nLTE_x5fDL_x5fSrc_x5fRF_f_x5f32_x5f1_x5f32_x5f0",
	"_nLTE_x5fDL_x5fSrc_x5fRF_f_x5f64_x5f1_x5f64_x5f0",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fMCS_x5findex", 
	"MCS index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize", 
	"Transport block size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fCode_x5frate", 
	"Code rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fMCS_x5findex",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fCategory1",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fCategory2",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fCategory3",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fCategory4",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs", 
	"StartRB + NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f1D_x5f", 
	"RB indices (1D)",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f2D_x5f", 
	"RB indices (2D)",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f1D_x5f",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fRB_x5findices_x5f_x5f2D_x5f",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fNg_x5f1_x5f6", 
	"Ng 1/6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fNg_x5f1_x5f2", 
	"Ng 1/2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fNg_x5f1", 
	"Ng 1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fNg_x5f2", 
	"Ng 2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fNg_x5f1",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fSpectrumShapingTypeSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fTimeWindowing",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fRaised_x5fcosine", 
	"Raised cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fWindowTypeSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fTukey",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fFIR_x5fwithInterpSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fNO",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fRRC", 
	"RRC",
	0,
	"0",
	"RRC");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fIdeal_x5fLowpass", 
	"Ideal Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fRRC",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fIdeal_x5fLowpass",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fSimple", 
	"Simple",
	0,
	"1",
	"Simple");
create_constant_form ("_nLTE_x5fDL_x5fSrc_x5fRF_fFull", 
	"Full",
	0,
	"2",
	"Full");
create_form_set("_nLTE_x5fDL_x5fSrc_x5fRF_fDisplayMsgSet",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fNone",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fSimple",
	"_nLTE_x5fDL_x5fSrc_x5fRF_fFull",
	"StdForm");
create_item ("LTE_DL_Src_RF","Downlink signal source with RF modulator",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_Src_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_Src_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_Src_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RF_Parameters","RF parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("ROut","source resistance",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("RTemp","temperature",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","- 273.15")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("MirrorSpectrum","indication of mirror spectrum about carrier",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("GainImbalance","gain imbalance in dB Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","phase imbalance in dB Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","q origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fConfig_x5f4","Config_4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_DataPattern","the data transmitted in UE1 transport block",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fUE1_x5fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fPN9","PN9")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fStartRB_x5f_x5f_x5fNumRBs","StartRB___NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OtherUEs_MappingType","the modulation orders for other UEs  except UE 1 in all subframes",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("BCH_BlockSize","transport block size for BCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","24")),
	create_parm ("HI","physical hybrid-ARQ ACK/NAK indicators",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, -1, -1, -1, -1, -1, -1, -1}")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RS_EPRE","transmit energy per resource element (RE) for cell specific RS for each antenna port, in unit of dBm/15kHz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-25")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SpectrumShapingParameters","parameters for transmit spectrum shaping",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SpectrumShapingType","spectrum shaping method",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fTimeWindowing","TimeWindowing")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols, valid when SpectrumShapingType=TimeWindowing",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent symbols in unit of chips (without oversampling), valid when SpectrumShapingType=TimeWindowing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval (without oversampling), compared to the start position of CP (negative means ahead of CP)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps, valid when SpectrumShapingType=FIRFilter",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","whether spectrum-shaping FIR filter with interpolation operation or not, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fRRC","RRC")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter, valid when SpectrumShapingType=FIRFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm",".22")),
	create_parm ("DisplayMsg","the messages displayed in Status/Summary window",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_x5fRF_fDisplayMsgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_x5fRF_fSimple","Simple")));
library_group("LTE, Source","LTE, Source","LTE_DL_Src_RF");
palette_group("LTE, Source","LTE, Source","LTE_DL_Src_RF");

create_constant_form ("_nLTE_x5fDL_x5fSrc_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fSrc_fFrameModeSet",
	"_nLTE_x5fDL_x5fSrc_fFDD",
	"_nLTE_x5fDL_x5fSrc_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fSrc_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fSrc_fConfig_x5f0",
	"_nLTE_x5fDL_x5fSrc_fConfig_x5f1",
	"_nLTE_x5fDL_x5fSrc_fConfig_x5f2",
	"_nLTE_x5fDL_x5fSrc_fConfig_x5f3",
	"_nLTE_x5fDL_x5fSrc_fConfig_x5f4",
	"_nLTE_x5fDL_x5fSrc_fConfig_x5f5",
	"_nLTE_x5fDL_x5fSrc_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fSrc_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fSrc_fConfig0",
	"_nLTE_x5fDL_x5fSrc_fConfig1",
	"_nLTE_x5fDL_x5fSrc_fConfig2",
	"_nLTE_x5fDL_x5fSrc_fConfig3",
	"_nLTE_x5fDL_x5fSrc_fConfig4",
	"_nLTE_x5fDL_x5fSrc_fConfig5",
	"_nLTE_x5fDL_x5fSrc_fConfig6",
	"_nLTE_x5fDL_x5fSrc_fConfig7",
	"_nLTE_x5fDL_x5fSrc_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fSrc_fBandwidthSet",
	"_nLTE_x5fDL_x5fSrc_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fSrc_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fSrc_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fSrc_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fSrc_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fSrc_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fSrc_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fSrc_fRatio_x5f1",
	"_nLTE_x5fDL_x5fSrc_fRatio_x5f2",
	"_nLTE_x5fDL_x5fSrc_fRatio_x5f4",
	"_nLTE_x5fDL_x5fSrc_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fSrc_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fSrc_fNormal",
	"_nLTE_x5fDL_x5fSrc_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fDistributed", 
	"Distributed",
	0,
	"1",
	"Distributed");
create_form_set("_nLTE_x5fDL_x5fSrc_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fSrc_fLocalized",
	"_nLTE_x5fDL_x5fSrc_fDistributed",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fSrc_fUE1_x5fConfigSet",
	"_nLTE_x5fDL_x5fSrc_fMCS_x5findex",
	"_nLTE_x5fDL_x5fSrc_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fSrc_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fSrc_fUE1_x5fCategorySet",
	"_nLTE_x5fDL_x5fSrc_fCategory1",
	"_nLTE_x5fDL_x5fSrc_fCategory2",
	"_nLTE_x5fDL_x5fSrc_fCategory3",
	"_nLTE_x5fDL_x5fSrc_fCategory4",
	"_nLTE_x5fDL_x5fSrc_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fSrc_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fSrc_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fSrc_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fSrc_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fSrc_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fSrc_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fSrc_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fSrc_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fSrc_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fSrc_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fSrc_fNg_x5f1",
	"_nLTE_x5fDL_x5fSrc_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fSrc_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fSrc_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fSrc_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fSrc_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fSrc_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fSrc_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fDL_x5fSrc_fSpectrumShapingTypeSet",
	"_nLTE_x5fDL_x5fSrc_fTimeWindowing",
	"_nLTE_x5fDL_x5fSrc_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fRaised_x5fcosine", 
	"Raised_cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fDL_x5fSrc_fWindowTypeSet",
	"_nLTE_x5fDL_x5fSrc_fTukey",
	"_nLTE_x5fDL_x5fSrc_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fSrc_fFIR_x5fwithInterpSet",
	"_nLTE_x5fDL_x5fSrc_fNO",
	"_nLTE_x5fDL_x5fSrc_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fRRC", 
	"RRC",
	0,
	"0",
	"RRC");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fIdeal_x5fLowpass", 
	"Ideal_Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fDL_x5fSrc_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fDL_x5fSrc_fRRC",
	"_nLTE_x5fDL_x5fSrc_fIdeal_x5fLowpass",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fSimple", 
	"Simple",
	0,
	"1",
	"Simple");
create_constant_form ("_nLTE_x5fDL_x5fSrc_fFull", 
	"Full",
	0,
	"2",
	"Full");
create_form_set("_nLTE_x5fDL_x5fSrc_fDisplayMsgSet",
	"_nLTE_x5fDL_x5fSrc_fNone",
	"_nLTE_x5fDL_x5fSrc_fSimple",
	"_nLTE_x5fDL_x5fSrc_fFull",
	"StdForm");
create_item ("LTE_DL_Src","3GPP LTE downlink signal source",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_Src",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_Src",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_Src",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fLocalized","Localized")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_Config","the configuration mode of input data for UE 1",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fUE1_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("UE1_Payload","the input payload for UE 1, the meaning of the input is defined in UE1_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UE1_RV_Idx","Redundancy Version Index for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE1_n_RNTI","Radio network temporary identifier for UE 1",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("UE1_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fUE1_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fCategory1","Category1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OtherUEs_MappingType","the modulation orders for other UEs  except UE 1 in all subframes",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("ControlChannelParameters","parameters for control channels",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("BCH_BlockSize","transport block size for BCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","24")),
	create_parm ("HI","physical hybrid-ARQ ACK/NAK indicators",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, -1, -1, -1, -1, -1, -1, -1}")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("RS_EPRE","transmit energy per resource element (RE) for transmitted cell specific RS for each antenna port, in unit of dBm/15kHz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-25")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SpectrumShapingParameters","parameters for transmit spectrum shaping",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SpectrumShapingType","spectrum shaping method",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fTimeWindowing","TimeWindowing")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols, valid when SpectrumShapingType=TimeWindowing",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent symbols in unit of chips (without oversampling), valid when SpectrumShapingType=TimeWindowing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval (without oversampling), compared to the start position of CP (negative means ahead of CP)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps, valid when SpectrumShapingType=FIRFilter",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","whether spectrum-shaping FIR filter with interpolation operation or not, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fRRC","RRC")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter, valid when SpectrumShapingType=FIRFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm",".22")),
	create_parm ("DisplayMsg","control LTE system information displayed in Simulation Log window",
		PARM_INT,
		"_nLTE_x5fDL_x5fSrc_fDisplayMsgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fSrc_fSimple","Simple")));
library_group("LTE, Source","LTE, Source","LTE_DL_Src");
palette_group("LTE, Source","LTE, Source","LTE_DL_Src");

create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fPN9", 
	"PN9",
	0,
	"0",
	"PN9");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fPN15", 
	"PN15",
	0,
	"1",
	"PN15");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fFIX4", 
	"FIX4",
	0,
	"2",
	"FIX4");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_f_x5f4_x5f1_x5f4_x5f0", 
	"_4_1_4_0",
	0,
	"3",
	"_4_1_4_0");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_f_x5f8_x5f1_x5f8_x5f0", 
	"_8_1_8_0",
	0,
	"4",
	"_8_1_8_0");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_f_x5f16_x5f1_x5f16_x5f0", 
	"_16_1_16_0",
	0,
	"5",
	"_16_1_16_0");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_f_x5f32_x5f1_x5f32_x5f0", 
	"_32_1_32_0",
	0,
	"6",
	"_32_1_32_0");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_f_x5f64_x5f1_x5f64_x5f0", 
	"_64_1_64_0",
	0,
	"7",
	"_64_1_64_0");
create_form_set("_nLTE_x5fMIMO_x5fMapper_fCW1_x5fDataPatternSet",
	"_nLTE_x5fMIMO_x5fMapper_fPN9",
	"_nLTE_x5fMIMO_x5fMapper_fPN15",
	"_nLTE_x5fMIMO_x5fMapper_fFIX4",
	"_nLTE_x5fMIMO_x5fMapper_f_x5f4_x5f1_x5f4_x5f0",
	"_nLTE_x5fMIMO_x5fMapper_f_x5f8_x5f1_x5f8_x5f0",
	"_nLTE_x5fMIMO_x5fMapper_f_x5f16_x5f1_x5f16_x5f0",
	"_nLTE_x5fMIMO_x5fMapper_f_x5f32_x5f1_x5f32_x5f0",
	"_nLTE_x5fMIMO_x5fMapper_f_x5f64_x5f1_x5f64_x5f0",
	"StdForm");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fPN9", 
	"PN9",
	0,
	"0",
	"PN9");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fPN15", 
	"PN15",
	0,
	"1",
	"PN15");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fFIX4", 
	"FIX4",
	0,
	"2",
	"FIX4");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_f_x5f4_x5f1_x5f4_x5f0", 
	"_4_1_4_0",
	0,
	"3",
	"_4_1_4_0");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_f_x5f8_x5f1_x5f8_x5f0", 
	"_8_1_8_0",
	0,
	"4",
	"_8_1_8_0");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_f_x5f16_x5f1_x5f16_x5f0", 
	"_16_1_16_0",
	0,
	"5",
	"_16_1_16_0");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_f_x5f32_x5f1_x5f32_x5f0", 
	"_32_1_32_0",
	0,
	"6",
	"_32_1_32_0");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_f_x5f64_x5f1_x5f64_x5f0", 
	"_64_1_64_0",
	0,
	"7",
	"_64_1_64_0");
create_form_set("_nLTE_x5fMIMO_x5fMapper_fCW2_x5fDataPatternSet",
	"_nLTE_x5fMIMO_x5fMapper_fPN9",
	"_nLTE_x5fMIMO_x5fMapper_fPN15",
	"_nLTE_x5fMIMO_x5fMapper_fFIX4",
	"_nLTE_x5fMIMO_x5fMapper_f_x5f4_x5f1_x5f4_x5f0",
	"_nLTE_x5fMIMO_x5fMapper_f_x5f8_x5f1_x5f8_x5f0",
	"_nLTE_x5fMIMO_x5fMapper_f_x5f16_x5f1_x5f16_x5f0",
	"_nLTE_x5fMIMO_x5fMapper_f_x5f32_x5f1_x5f32_x5f0",
	"_nLTE_x5fMIMO_x5fMapper_f_x5f64_x5f1_x5f64_x5f0",
	"StdForm");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fQPSK", 
	"QPSK",
	0,
	"0",
	"QPSK");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fQAM16", 
	"QAM16",
	0,
	"1",
	"QAM16");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fQAM64", 
	"QAM64",
	0,
	"2",
	"QAM64");
create_form_set("_nLTE_x5fMIMO_x5fMapper_fCW1_x5fMappingTypeSet",
	"_nLTE_x5fMIMO_x5fMapper_fQPSK",
	"_nLTE_x5fMIMO_x5fMapper_fQAM16",
	"_nLTE_x5fMIMO_x5fMapper_fQAM64",
	"StdForm");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fQPSK", 
	"QPSK",
	0,
	"0",
	"QPSK");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fQAM16", 
	"QAM16",
	0,
	"1",
	"QAM16");
create_constant_form ("_nLTE_x5fMIMO_x5fMapper_fQAM64", 
	"QAM64",
	0,
	"2",
	"QAM64");
create_form_set("_nLTE_x5fMIMO_x5fMapper_fCW2_x5fMappingTypeSet",
	"_nLTE_x5fMIMO_x5fMapper_fQPSK",
	"_nLTE_x5fMIMO_x5fMapper_fQAM16",
	"_nLTE_x5fMIMO_x5fMapper_fQAM64",
	"StdForm");
create_item ("LTE_MIMO_Mapper","MIMO mapping for two codewords",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_MIMO_Mapper",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_MIMO_Mapper",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_MIMO_Mapper",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CW1_DataPattern","data pattern for codeword 1",
		PARM_INT,
		"_nLTE_x5fMIMO_x5fMapper_fCW1_x5fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMIMO_x5fMapper_fPN9","PN9")),
	create_parm ("CW2_DataPattern","data pattern for codeword 2",
		PARM_INT,
		"_nLTE_x5fMIMO_x5fMapper_fCW2_x5fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMIMO_x5fMapper_fPN9","PN9")),
	create_parm ("CW1_MappingType","modulation type for codeword 1",
		PARM_INT,
		"_nLTE_x5fMIMO_x5fMapper_fCW1_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMIMO_x5fMapper_fQPSK","QPSK")),
	create_parm ("CW2_MappingType","modulation type for codeword 2",
		PARM_INT,
		"_nLTE_x5fMIMO_x5fMapper_fCW2_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMIMO_x5fMapper_fQPSK","QPSK")));
library_group("LTE, Modulation","LTE, Modulation","LTE_MIMO_Mapper");
palette_group("LTE, Modulation","LTE, Modulation","LTE_MIMO_Mapper");

create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPHICH_x5fLayMapPrecoder_fFrameModeSet",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fFDD",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPHICH_x5fLayMapPrecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f0",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f1",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f2",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f3",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f4",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f5",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPHICH_x5fLayMapPrecoder_fBandwidthSet",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fPHICH_x5fLayMapPrecoder_fNumTxAntsSet",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fTx1",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fTx2",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPHICH_x5fLayMapPrecoder_fCyclicPrefixSet",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fNormal",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPHICH_x5fLayMapPrecoder_fPHICH_x5fNgSet",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fNg_x5f1_x5f6",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fNg_x5f1_x5f2",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fNg_x5f1",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPHICH_x5fLayMapPrecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPHICH_x5fLayMapPrecoder_fETM_x5fSupportSet",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fNO",
	"_nLTE_x5fPHICH_x5fLayMapPrecoder_fYES",
	"StdForm");
create_item ("LTE_PHICH_LayMapPrecoder","PHICH layer mapping and precoding",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_PHICH_LayMapPrecoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_PHICH_LayMapPrecoder",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_PHICH_LayMapPrecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayMapPrecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayMapPrecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayMapPrecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayMapPrecoder_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayMapPrecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayMapPrecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayMapPrecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayMapPrecoder_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayMapPrecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayMapPrecoder_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumOfLayers","number of layers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayMapPrecoder_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayMapPrecoder_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayMapPrecoder_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayMapPrecoder_fNO","NO")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_LayMapPrecoder");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_LayMapPrecoder");

create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fFrameModeSet",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fFDD",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f0",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f1",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f2",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f3",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f4",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f5",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBandwidthSet",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNumTxAntsSet",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTx1",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTx2",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNumRxAntsSet",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fRx1",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fRx2",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fCyclicPrefixSet",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNormal",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fPHICH_x5fNgSet",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNg_x5f1_x5f6",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNg_x5f1_x5f2",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNg_x5f1",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fETM_x5fSupportSet",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNO",
	"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fYES",
	"StdForm");
create_item ("LTE_PHICH_LayDemapDeprecoder","PHICH layer demapping and deprecoding",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_PHICH_LayDemapDeprecoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_PHICH_LayDemapDeprecoder",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_PHICH_LayDemapDeprecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fTx1","Tx1")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fRx1","Rx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumOfLayers","number of layers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayDemapDeprecoder_fNO","NO")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_LayDemapDeprecoder");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_LayDemapDeprecoder");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig0",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig1",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig2",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig3",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig4",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig5",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig6",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig7",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTx1",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTx2",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRx1",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRx2",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fMIMO_x5fModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fSpatial_x5fMux",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fLarge_x5fDelay", 
	"Large-Delay",
	0,
	"0",
	"Large-Delay");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fZero_x5fDelay", 
	"Zero-Delay",
	0,
	"1",
	"Zero-Delay");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fCDD_x5fModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fLarge_x5fDelay",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fZero_x5fDelay",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPDSCH", 
	"PDSCH",
	0,
	"0",
	"PDSCH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPCFICH", 
	"PCFICH",
	0,
	"1",
	"PCFICH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPDCCH", 
	"PDCCH",
	0,
	"2",
	"PDCCH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPBCH", 
	"PBCH",
	0,
	"3",
	"PBCH");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fChannelTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPDSCH",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPCFICH",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPDCCH",
	"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPBCH",
	"StdForm");
create_item ("LTE_DL_MIMO_LayDemapDeprecoder","Downlink layer demapping and deprecoding",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_LayDemapDeprecoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_LayDemapDeprecoder",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_MIMO_LayDemapDeprecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fTx1","Tx1")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRx1","Rx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNO","NO")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("CDD_Mode","cyclic delay diversity (CDD) mode, valid when MIMO_Mode is Spatial_Mux",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fCDD_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fLarge_x5fDelay","Large_Delay")),
	create_parm ("CdBlk_Index","codebook index for precoding, valid when MIMO_Mode is Spatial_Mux",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumOfCWs","number of code words",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("NumOfLayers","number of layers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fNO","NO")),
	create_parm ("ChannelType","Physical channel type that this model works on",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayDemapDeprecoder_fPDSCH","PDSCH")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_LayDemapDeprecoder");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_LayDemapDeprecoder");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig0",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig1",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig2",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig3",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig4",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig5",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig6",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig7",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTx1",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTx2",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fMIMO_x5fModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fSpatial_x5fMux",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fLarge_x5fDelay", 
	"Large-Delay",
	0,
	"0",
	"Large-Delay");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fZero_x5fDelay", 
	"Zero-Delay",
	0,
	"1",
	"Zero-Delay");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fCDD_x5fModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fLarge_x5fDelay",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fZero_x5fDelay",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPDSCH", 
	"PDSCH",
	0,
	"0",
	"PDSCH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPCFICH", 
	"PCFICH",
	0,
	"1",
	"PCFICH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPDCCH", 
	"PDCCH",
	0,
	"2",
	"PDCCH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPBCH", 
	"PBCH",
	0,
	"3",
	"PBCH");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fChannelTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPDSCH",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPCFICH",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPDCCH",
	"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPBCH",
	"StdForm");
create_item ("LTE_DL_MIMO_LayMapPrecoder","Downlink layer mapping and precoding",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_MIMO_LayMapPrecoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_MIMO_LayMapPrecoder",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_MIMO_LayMapPrecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("CDD_Mode","cyclic delay diversity (CDD) mode, valid when MIMO_Mode is Spatial_Mux",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fCDD_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fLarge_x5fDelay","Large_Delay")),
	create_parm ("CdBlk_Index","codebook index for precoding, valid when MIMO_Mode is Spatial_Mux",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumOfCWs","number of code words",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("NumOfLayers","number of layers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fNO","NO")),
	create_parm ("ChannelType","Physical channel type that this model works on",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fLayMapPrecoder_fPDSCH","PDSCH")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_LayMapPrecoder");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_LayMapPrecoder");

create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fPayload_x5fConfigSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fMCS_x5findex",
	"_nLTE_x5fDL_x5fChannelDecoder_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fChannelDecoder_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fMIMO_x5fModeSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fSpatial_x5fMux",
	"_nLTE_x5fDL_x5fChannelDecoder_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5f24A", 
	"CRC_24A",
	0,
	"0",
	"CRC_24A");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5f24B", 
	"CRC_24B",
	0,
	"1",
	"CRC_24B");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5f16", 
	"CRC_16",
	0,
	"2",
	"CRC_16");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5f8", 
	"CRC_8",
	0,
	"3",
	"CRC_8");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5fLengthSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5f24A",
	"_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5f24B",
	"_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5f16",
	"_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fUE_x5fCategorySet",
	"_nLTE_x5fDL_x5fChannelDecoder_fCategory1",
	"_nLTE_x5fDL_x5fChannelDecoder_fCategory2",
	"_nLTE_x5fDL_x5fChannelDecoder_fCategory3",
	"_nLTE_x5fDL_x5fChannelDecoder_fCategory4",
	"_nLTE_x5fDL_x5fChannelDecoder_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fChBit_x5fConfigSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fREspersubframe",
	"_nLTE_x5fDL_x5fChannelDecoder_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fFrameModeSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fFDD",
	"_nLTE_x5fDL_x5fChannelDecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f0",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f1",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f2",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f3",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f4",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f5",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig0",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig1",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig2",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig3",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig4",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig5",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig6",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig7",
	"_nLTE_x5fDL_x5fChannelDecoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fBandwidthSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fNormal",
	"_nLTE_x5fDL_x5fChannelDecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fChannelDecoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fChannelDecoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fChannelDecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fChannelDecoder_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fChannelDecoder_fTx1",
	"_nLTE_x5fDL_x5fChannelDecoder_fTx2",
	"_nLTE_x5fDL_x5fChannelDecoder_fTx4",
	"StdForm");
create_item ("LTE_DL_ChannelDecoder","Downlink channel decoder",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_ChannelDecoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_ChannelDecoder",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_ChannelDecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("CRC_Length","Number of parity bits",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5fLengthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fCRC_x5f24A","CRC_24A")),
	create_parm ("RV_Idx","Redundancy Version Index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fUE_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fCategory1","Category1")),
	create_parm ("q","Code word number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"5640 5640 5640 5640 5640 5640 5640 5640 5640 5640\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelDecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelDecoder_fTx1","Tx1")),
	create_parm ("TC_Iteration","Turbo decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_DL_ChannelDecoder");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_DL_ChannelDecoder");

create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fPayload_x5fConfigSet",
	"_nLTE_x5fDL_x5fChannelCoder_fMCS_x5findex",
	"_nLTE_x5fDL_x5fChannelCoder_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fChannelCoder_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fMIMO_x5fModeSet",
	"_nLTE_x5fDL_x5fChannelCoder_fSpatial_x5fMux",
	"_nLTE_x5fDL_x5fChannelCoder_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fCRC_x5f24A", 
	"CRC_24A",
	0,
	"0",
	"CRC_24A");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fCRC_x5f24B", 
	"CRC_24B",
	0,
	"1",
	"CRC_24B");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fCRC_x5f16", 
	"CRC_16",
	0,
	"2",
	"CRC_16");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fCRC_x5f8", 
	"CRC_8",
	0,
	"3",
	"CRC_8");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fCRC_x5fLengthSet",
	"_nLTE_x5fDL_x5fChannelCoder_fCRC_x5f24A",
	"_nLTE_x5fDL_x5fChannelCoder_fCRC_x5f24B",
	"_nLTE_x5fDL_x5fChannelCoder_fCRC_x5f16",
	"_nLTE_x5fDL_x5fChannelCoder_fCRC_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fUE_x5fCategorySet",
	"_nLTE_x5fDL_x5fChannelCoder_fCategory1",
	"_nLTE_x5fDL_x5fChannelCoder_fCategory2",
	"_nLTE_x5fDL_x5fChannelCoder_fCategory3",
	"_nLTE_x5fDL_x5fChannelCoder_fCategory4",
	"_nLTE_x5fDL_x5fChannelCoder_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fChBit_x5fConfigSet",
	"_nLTE_x5fDL_x5fChannelCoder_fREspersubframe",
	"_nLTE_x5fDL_x5fChannelCoder_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fFrameModeSet",
	"_nLTE_x5fDL_x5fChannelCoder_fFDD",
	"_nLTE_x5fDL_x5fChannelCoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f0",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f1",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f2",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f3",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f4",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f5",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig0",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig1",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig2",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig3",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig4",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig5",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig6",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig7",
	"_nLTE_x5fDL_x5fChannelCoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fBandwidthSet",
	"_nLTE_x5fDL_x5fChannelCoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fChannelCoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fChannelCoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fChannelCoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fChannelCoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fChannelCoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fChannelCoder_fNormal",
	"_nLTE_x5fDL_x5fChannelCoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fChannelCoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fChannelCoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fChannelCoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fChannelCoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fChannelCoder_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fChannelCoder_fTx1",
	"_nLTE_x5fDL_x5fChannelCoder_fTx2",
	"_nLTE_x5fDL_x5fChannelCoder_fTx4",
	"StdForm");
create_item ("LTE_DL_ChannelCoder","Downlink channel coder",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_ChannelCoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_ChannelCoder",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_ChannelCoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("CRC_Length","Number of parity bits",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fCRC_x5fLengthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fCRC_x5f24A","CRC_24A")),
	create_parm ("RV_Idx","Redundancy Version Index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fUE_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fCategory1","Category1")),
	create_parm ("q","Code word number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"5640 5640 5640 5640 5640 5640 5640 5640 5640 5640\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fChannelCoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChannelCoder_fTx1","Tx1")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_DL_ChannelCoder");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_DL_ChannelCoder");

create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f3_x5f2_x5fMHz", 
	"BW 3.2 MHz",
	0,
	"1",
	"BW 3.2 MHz");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBandwidthSet",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f3_x5f2_x5fMHz",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRatio_x5f1",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRatio_x5f2",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRatio_x5f4",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRx1",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRx2",
	"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRx4",
	"StdForm");
create_item ("LTE_DL_OFDM_Demodulator","Downlink MIMO OFDM De-modulator",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_OFDM_Demodulator",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_OFDM_Demodulator",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_OFDM_Demodulator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRatio_x5f2","Ratio_2")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fOFDM_x5fDemodulator_fRx1","Rx1")));
library_group("LTE, Modulation","LTE, Modulation","LTE_DL_OFDM_Demodulator");
palette_group("LTE, Modulation","LTE, Modulation","LTE_DL_OFDM_Demodulator");

create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f3_x5f2_x5fMHz", 
	"BW 3.2 MHz",
	0,
	"1",
	"BW 3.2 MHz");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fOFDM_x5fModulator_fBandwidthSet",
	"_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f3_x5f2_x5fMHz",
	"_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fModulator_fRatio_x5f1", 
	"Ratio 1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fModulator_fRatio_x5f2", 
	"Ratio 2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fModulator_fRatio_x5f4", 
	"Ratio 4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fOFDM_x5fModulator_fRatio_x5f8", 
	"Ratio 8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fOFDM_x5fModulator_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fOFDM_x5fModulator_fRatio_x5f1",
	"_nLTE_x5fDL_x5fOFDM_x5fModulator_fRatio_x5f2",
	"_nLTE_x5fDL_x5fOFDM_x5fModulator_fRatio_x5f4",
	"_nLTE_x5fDL_x5fOFDM_x5fModulator_fRatio_x5f8",
	"StdForm");
create_item ("LTE_DL_OFDM_Modulator","Downlink OFDM modulator",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_DL_OFDM_Modulator",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_DL_OFDM_Modulator",
	SPDesignAnnotFmt,
	"SYM_DSN_LTE_DL_OFDM_Modulator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fOFDM_x5fModulator_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fOFDM_x5fModulator_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fDL_x5fOFDM_x5fModulator_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fOFDM_x5fModulator_fRatio_x5f2","Ratio_2")));
library_group("LTE, Modulation","LTE, Modulation","LTE_DL_OFDM_Modulator");
palette_group("LTE, Modulation","LTE, Modulation","LTE_DL_OFDM_Modulator");

