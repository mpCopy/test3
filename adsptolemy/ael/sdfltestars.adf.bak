set_design_type( sigproc_net );
create_item ("LTE_UL_Src_RangeCheck","LTE uplink signal source range check",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_Src_RangeCheck",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fSrc_x5fRangeCheck_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_RangeCheck",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Testing (for development use only)","Testing (for development use only)","LTE_UL_Src_RangeCheck");
palette_group("Testing (for development use only)","Testing (for development use only)","LTE_UL_Src_RangeCheck");

create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fFrameModeSet",
	"_nLTE_x5fUL_x5fFreqSync_fFDD",
	"_nLTE_x5fUL_x5fFreqSync_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fFreqSync_fConfig_x5f0",
	"_nLTE_x5fUL_x5fFreqSync_fConfig_x5f1",
	"_nLTE_x5fUL_x5fFreqSync_fConfig_x5f2",
	"_nLTE_x5fUL_x5fFreqSync_fConfig_x5f3",
	"_nLTE_x5fUL_x5fFreqSync_fConfig_x5f4",
	"_nLTE_x5fUL_x5fFreqSync_fConfig_x5f5",
	"_nLTE_x5fUL_x5fFreqSync_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fBandwidthSet",
	"_nLTE_x5fUL_x5fFreqSync_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fFreqSync_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fFreqSync_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fFreqSync_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fFreqSync_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fFreqSync_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fFreqSync_fRatio_x5f1",
	"_nLTE_x5fUL_x5fFreqSync_fRatio_x5f2",
	"_nLTE_x5fUL_x5fFreqSync_fRatio_x5f4",
	"_nLTE_x5fUL_x5fFreqSync_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fFreqSync_fNormal",
	"_nLTE_x5fUL_x5fFreqSync_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fFreqSync_fNO",
	"_nLTE_x5fUL_x5fFreqSync_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fFreqSync_fPUSCH",
	"_nLTE_x5fUL_x5fFreqSync_fPUCCH",
	"_nLTE_x5fUL_x5fFreqSync_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fPUSCH_x5fHoppingEnableSet",
	"_nLTE_x5fUL_x5fFreqSync_fNO",
	"_nLTE_x5fUL_x5fFreqSync_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_finterSubFrame", 
	"interSubFrame",
	0,
	"0",
	"interSubFrame");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fintraAndInterSubFrame", 
	"intraAndInterSubFrame",
	0,
	"1",
	"intraAndInterSubFrame");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fPUSCH_x5fHoppingModeSet",
	"_nLTE_x5fUL_x5fFreqSync_finterSubFrame",
	"_nLTE_x5fUL_x5fFreqSync_fintraAndInterSubFrame",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fzero_x5for_x5fzz", 
	"zero_or_zz",
	0,
	"0",
	"0 or 00");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fone_x5for_x5fzone", 
	"one_or_zone",
	0,
	"1",
	"1 or 01");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fonezero", 
	"onezero",
	0,
	"2",
	"10");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_foneone", 
	"oneone",
	0,
	"3",
	"11");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fPUSCH_x5fHoppingBitsSet",
	"_nLTE_x5fUL_x5fFreqSync_fzero_x5for_x5fzz",
	"_nLTE_x5fUL_x5fFreqSync_fone_x5for_x5fzone",
	"_nLTE_x5fUL_x5fFreqSync_fonezero",
	"_nLTE_x5fUL_x5fFreqSync_foneone",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fFreqSync_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fFreqSync_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fFreqSync_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fFreqSync_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fFreqSync_fIntFreqEstimationSet",
	"_nLTE_x5fUL_x5fFreqSync_fNO",
	"_nLTE_x5fUL_x5fFreqSync_fYES",
	"StdForm");
create_item ("LTE_UL_FreqSync","Timing and freqency estimation in freqency domain, using the PUSCH RS",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_FreqSync",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fFreqSync_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_FreqSync",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fNO","NO")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fPUSCH","PUSCH")),
	create_parm ("PUSCH_HoppingEnable","whether PUSCH frequency-hopping is enabled or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fPUSCH_x5fHoppingEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fNO","NO")),
	create_parm ("PUSCH_HoppingMode","PUSCH frequency hopping mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fPUSCH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_finterSubFrame","interSubFrame")),
	create_parm ("PUSCH_HoppingOffset","the offset used for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_Hopping_Nsb","number of sub-bands for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUSCH_HoppingBits","information in hopping bits",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fPUSCH_x5fHoppingBitsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fzero_x5for_x5fzz","zero_or_zz")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fFreqSync_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs; ...; SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("IntFreqEstimation","estimation the large frequency offset (multiple of 15kHz) or not",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fFreqSync_fIntFreqEstimationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFreqSync_fNO","NO")));
library_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_UL_FreqSync");
palette_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_UL_FreqSync");

create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fFrameSync_fFrameModeSet",
	"_nLTE_x5fUL_x5fFrameSync_fFDD",
	"_nLTE_x5fUL_x5fFrameSync_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fFrameSync_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fFrameSync_fConfig_x5f0",
	"_nLTE_x5fUL_x5fFrameSync_fConfig_x5f1",
	"_nLTE_x5fUL_x5fFrameSync_fConfig_x5f2",
	"_nLTE_x5fUL_x5fFrameSync_fConfig_x5f3",
	"_nLTE_x5fUL_x5fFrameSync_fConfig_x5f4",
	"_nLTE_x5fUL_x5fFrameSync_fConfig_x5f5",
	"_nLTE_x5fUL_x5fFrameSync_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fFrameSync_fBandwidthSet",
	"_nLTE_x5fUL_x5fFrameSync_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fFrameSync_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fFrameSync_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fFrameSync_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fFrameSync_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fFrameSync_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fFrameSync_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fFrameSync_fRatio_x5f1",
	"_nLTE_x5fUL_x5fFrameSync_fRatio_x5f2",
	"_nLTE_x5fUL_x5fFrameSync_fRatio_x5f4",
	"_nLTE_x5fUL_x5fFrameSync_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fFrameSync_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fFrameSync_fNormal",
	"_nLTE_x5fUL_x5fFrameSync_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fFrameSync_fHalfCarrierShift_x5fEnableSet",
	"_nLTE_x5fUL_x5fFrameSync_fNO",
	"_nLTE_x5fUL_x5fFrameSync_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fFrameSync_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fFrameSync_fPUSCH",
	"_nLTE_x5fUL_x5fFrameSync_fPUCCH",
	"_nLTE_x5fUL_x5fFrameSync_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fFrameSync_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fFrameSync_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fFrameSync_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fFrameSync_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fFrameSync_fRB_x5findices_x5f2D",
	"StdForm");
create_item ("LTE_UL_FrameSync","Uplink time and frequency synchronizer in time domain",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_FrameSync",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fFrameSync_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_FrameSync",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fFrameSync_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFrameSync_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fFrameSync_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFrameSync_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fFrameSync_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFrameSync_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fFrameSync_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFrameSync_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fFrameSync_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFrameSync_fNormal","Normal")),
	create_parm ("HalfCarrierShift_Enable","whether or not to enable 1/2 subcarrier shifting",
		PARM_INT,
		"_nLTE_x5fUL_x5fFrameSync_fHalfCarrierShift_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFrameSync_fYES","YES")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fFrameSync_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFrameSync_fPUSCH","PUSCH")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fFrameSync_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fFrameSync_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs; ...; SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_UL_FrameSync");
palette_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_UL_FrameSync");

create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fFrameModeSet",
	"_nLTE_x5fUL_x5fChEstimator_fFDD",
	"_nLTE_x5fUL_x5fChEstimator_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fChEstimator_fConfig_x5f0",
	"_nLTE_x5fUL_x5fChEstimator_fConfig_x5f1",
	"_nLTE_x5fUL_x5fChEstimator_fConfig_x5f2",
	"_nLTE_x5fUL_x5fChEstimator_fConfig_x5f3",
	"_nLTE_x5fUL_x5fChEstimator_fConfig_x5f4",
	"_nLTE_x5fUL_x5fChEstimator_fConfig_x5f5",
	"_nLTE_x5fUL_x5fChEstimator_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fBandwidthSet",
	"_nLTE_x5fUL_x5fChEstimator_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fChEstimator_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fChEstimator_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fChEstimator_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fChEstimator_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fChEstimator_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fChEstimator_fNormal",
	"_nLTE_x5fUL_x5fChEstimator_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fChEstimator_fNO",
	"_nLTE_x5fUL_x5fChEstimator_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fChEstimator_fPUSCH",
	"_nLTE_x5fUL_x5fChEstimator_fPUCCH",
	"_nLTE_x5fUL_x5fChEstimator_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fPUSCH_x5fHoppingEnableSet",
	"_nLTE_x5fUL_x5fChEstimator_fNO",
	"_nLTE_x5fUL_x5fChEstimator_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_finterSubFrame", 
	"interSubFrame",
	0,
	"0",
	"interSubFrame");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fintraAndInterSubFrame", 
	"intraAndInterSubFrame",
	0,
	"1",
	"intraAndInterSubFrame");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fPUSCH_x5fHoppingModeSet",
	"_nLTE_x5fUL_x5fChEstimator_finterSubFrame",
	"_nLTE_x5fUL_x5fChEstimator_fintraAndInterSubFrame",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fzero_x5for_x5fzz", 
	"zero_or_zz",
	0,
	"0",
	"0 or 00");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fone_x5for_x5fzone", 
	"one_or_zone",
	0,
	"1",
	"1 or 01");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fonezero", 
	"onezero",
	0,
	"2",
	"10");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_foneone", 
	"oneone",
	0,
	"3",
	"11");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fPUSCH_x5fHoppingBitsSet",
	"_nLTE_x5fUL_x5fChEstimator_fzero_x5for_x5fzz",
	"_nLTE_x5fUL_x5fChEstimator_fone_x5for_x5fzone",
	"_nLTE_x5fUL_x5fChEstimator_fonezero",
	"_nLTE_x5fUL_x5fChEstimator_foneone",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fChEstimator_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fChEstimator_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fChEstimator_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fFormat_x5f1", 
	"Format_1",
	0,
	"0",
	"Format 1");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fFormat_x5f1a", 
	"Format_1a",
	0,
	"1",
	"Format 1a");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fFormat_x5f1b", 
	"Format_1b",
	0,
	"2",
	"Format 1b");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fShortened_x5f1", 
	"Shortened_1",
	0,
	"3",
	"Shortened 1");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fShortened_x5f1a", 
	"Shortened_1a",
	0,
	"4",
	"Shortened 1a");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fShortened_x5f1b", 
	"Shortened_1b",
	0,
	"5",
	"Shortened 1b");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fFormat_x5f2", 
	"Format_2",
	0,
	"6",
	"Format 2");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fFormat_x5f2a", 
	"Format_2a",
	0,
	"7",
	"Format 2a");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fFormat_x5f2b", 
	"Format_2b",
	0,
	"8",
	"Format 2b");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fPUCCH_x5fFormatSet",
	"_nLTE_x5fUL_x5fChEstimator_fFormat_x5f1",
	"_nLTE_x5fUL_x5fChEstimator_fFormat_x5f1a",
	"_nLTE_x5fUL_x5fChEstimator_fFormat_x5f1b",
	"_nLTE_x5fUL_x5fChEstimator_fShortened_x5f1",
	"_nLTE_x5fUL_x5fChEstimator_fShortened_x5f1a",
	"_nLTE_x5fUL_x5fChEstimator_fShortened_x5f1b",
	"_nLTE_x5fUL_x5fChEstimator_fFormat_x5f2",
	"_nLTE_x5fUL_x5fChEstimator_fFormat_x5f2a",
	"_nLTE_x5fUL_x5fChEstimator_fFormat_x5f2b",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_nLTE_x5fUL_x5fChEstimator_fMMSE", 
	"MMSE",
	0,
	"1",
	"MMSE");
create_form_set("_nLTE_x5fUL_x5fChEstimator_fChEstimatorModeSet",
	"_nLTE_x5fUL_x5fChEstimator_fLinear",
	"_nLTE_x5fUL_x5fChEstimator_fMMSE",
	"StdForm");
create_item ("LTE_UL_ChEstimator","Uplink Channel Estimator and Interpolator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_ChEstimator",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fChEstimator_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_ChEstimator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fNO","NO")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fPUSCH","PUSCH")),
	create_parm ("PUSCH_HoppingEnable","whether PUSCH frequency-hopping is enabled or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fPUSCH_x5fHoppingEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fNO","NO")),
	create_parm ("PUSCH_HoppingMode","PUSCH frequency hopping mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fPUSCH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_finterSubFrame","interSubFrame")),
	create_parm ("PUSCH_HoppingOffset","the offset used for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_Hopping_Nsb","number of sub-bands for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUSCH_HoppingBits","information in hopping bits",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fPUSCH_x5fHoppingBitsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fzero_x5for_x5fzz","zero_or_zz")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs; ...; SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUCCH_Format","PUCCH format",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fPUCCH_x5fFormatSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fFormat_x5f1","Format_1")),
	create_parm ("PUCCH_Delta_shift","used to calculate PUCCH cyclic shift Alfa",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("PUCCH_NRB2","number of RBs used for transmisstion PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUCCH_n1","resources used for transmisstion PUCCH format 1/1a/1b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PUCCH_n2","resources used for transmission PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("ChEstimatorMode","mode of interpolation algorithm in channel estimator",
		PARM_INT,
		"_nLTE_x5fUL_x5fChEstimator_fChEstimatorModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChEstimator_fLinear","Linear")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","the maximum delay of multi-path channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 usec")),
	create_parm ("Fmax","the maximum doppler frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")));
library_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_UL_ChEstimator");
palette_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_UL_ChEstimator");

create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fPUCCH_fFrameModeSet",
	"_nLTE_x5fUL_x5fPUCCH_fFDD",
	"_nLTE_x5fUL_x5fPUCCH_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fPUCCH_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fPUCCH_fConfig_x5f0",
	"_nLTE_x5fUL_x5fPUCCH_fConfig_x5f1",
	"_nLTE_x5fUL_x5fPUCCH_fConfig_x5f2",
	"_nLTE_x5fUL_x5fPUCCH_fConfig_x5f3",
	"_nLTE_x5fUL_x5fPUCCH_fConfig_x5f4",
	"_nLTE_x5fUL_x5fPUCCH_fConfig_x5f5",
	"_nLTE_x5fUL_x5fPUCCH_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fPUCCH_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fPUCCH_fNormal",
	"_nLTE_x5fUL_x5fPUCCH_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fPUCCH_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fPUCCH_fPUSCH",
	"_nLTE_x5fUL_x5fPUCCH_fPUCCH",
	"_nLTE_x5fUL_x5fPUCCH_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fPUCCH_fGroupHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fPUCCH_fNO",
	"_nLTE_x5fUL_x5fPUCCH_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fFormat_x5f1", 
	"Format_1",
	0,
	"0",
	"Format 1");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fFormat_x5f1a", 
	"Format_1a",
	0,
	"1",
	"Format 1a");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fFormat_x5f1b", 
	"Format_1b",
	0,
	"2",
	"Format 1b");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fShortened_x5f1", 
	"Shortened_1",
	0,
	"3",
	"Shortened 1");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fShortened_x5f1a", 
	"Shortened_1a",
	0,
	"4",
	"Shortened 1a");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fShortened_x5f1b", 
	"Shortened_1b",
	0,
	"5",
	"Shortened 1b");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fFormat_x5f2", 
	"Format_2",
	0,
	"6",
	"Format 2");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fFormat_x5f2a", 
	"Format_2a",
	0,
	"7",
	"Format 2a");
create_constant_form ("_nLTE_x5fUL_x5fPUCCH_fFormat_x5f2b", 
	"Format_2b",
	0,
	"8",
	"Format 2b");
create_form_set("_nLTE_x5fUL_x5fPUCCH_fPUCCH_x5fFormatSet",
	"_nLTE_x5fUL_x5fPUCCH_fFormat_x5f1",
	"_nLTE_x5fUL_x5fPUCCH_fFormat_x5f1a",
	"_nLTE_x5fUL_x5fPUCCH_fFormat_x5f1b",
	"_nLTE_x5fUL_x5fPUCCH_fShortened_x5f1",
	"_nLTE_x5fUL_x5fPUCCH_fShortened_x5f1a",
	"_nLTE_x5fUL_x5fPUCCH_fShortened_x5f1b",
	"_nLTE_x5fUL_x5fPUCCH_fFormat_x5f2",
	"_nLTE_x5fUL_x5fPUCCH_fFormat_x5f2a",
	"_nLTE_x5fUL_x5fPUCCH_fFormat_x5f2b",
	"StdForm");
create_item ("LTE_UL_PUCCH","PUCCH Generator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_PUCCH",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fPUCCH_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_PUCCH",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fPUCCH_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fPUCCH_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fPUCCH_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fPUCCH_fConfig_x5f0","Config_0")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fPUCCH_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fPUCCH_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fPUCCH_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fPUCCH_fPUCCH","PUCCH")),
	create_parm ("GroupHop_Enable","whether enable group hopping for DMRS on PUCCH and PUSCH or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fPUCCH_fGroupHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fPUCCH_fNO","NO")),
	create_parm ("PUCCH_Format","PUCCH format",
		PARM_INT,
		"_nLTE_x5fUL_x5fPUCCH_fPUCCH_x5fFormatSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fPUCCH_fFormat_x5f1","Format_1")),
	create_parm ("PUCCH_Delta_shift","used to calculate PUCCH cyclic shift Alfa",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("PUCCH_NRB2","number of RBs used for transmisstion PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUCCH_n1","resources used for transmisstion PUCCH format 1/1a/1b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PUCCH_n2","resources used for transmission PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")));
library_group("LTE, Signaling","LTE, Signaling","LTE_UL_PUCCH");
palette_group("LTE, Signaling","LTE, Signaling","LTE_UL_PUCCH");

create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fPayload_x5fConfigSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fMCS_x5findex",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fEnable64QAMSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fNO",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fFrameModeSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fFDD",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f0",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f1",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f2",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f3",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f4",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f5",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fBandwidthSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fNormal",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fPUSCH",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fPUCCH",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fData_x5fOnly",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fNO",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fCQI", 
	"CQI",
	0,
	"0",
	"CQI");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fHARQ_x5fACK", 
	"HARQ ACK",
	0,
	"1",
	"HARQ ACK");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fRank_x5fIndication", 
	"Rank Indication",
	0,
	"2",
	"Rank Indication");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fControlInfoTypeSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fCQI",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fHARQ_x5fACK",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fRank_x5fIndication",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fACK_x5fNACK_x5fmultiplexing", 
	"ACK_NACK_multiplexing",
	0,
	"0",
	"ACK/NACK multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fControlInfoEncoder_fACK_x5fNACK_x5fbundling", 
	"ACK_NACK_bundling",
	0,
	"1",
	"ACK/NACK bundling");
create_form_set("_nLTE_x5fUL_x5fControlInfoEncoder_fACK_x5fNACK_x5fFeedbackModeSet",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fACK_x5fNACK_x5fmultiplexing",
	"_nLTE_x5fUL_x5fControlInfoEncoder_fACK_x5fNACK_x5fbundling",
	"StdForm");
create_item ("LTE_UL_ControlInfoEncoder","Uplink Control Information Encoder",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_ControlInfoEncoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fControlInfoEncoder_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_ControlInfoEncoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fYES","YES")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("HARQACK_NumInfoBits","HARQ-ACK information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("HARQACK_BetaOffsetIndex","HARQ-ACK offset values, used in calculating the number of coded HARQ-ACK symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("ControlInfoType","type of control information",
		PARM_INT,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fControlInfoTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fCQI","CQI")),
	create_parm ("ACK_NACK_FeedbackMode","ACK/NACK feedback modes for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fControlInfoEncoder_fACK_x5fNACK_x5fFeedbackModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fControlInfoEncoder_fACK_x5fNACK_x5fmultiplexing","ACK_NACK_multiplexing")),
	create_parm ("Nbundled","Nbundled for TDD ACK/NACK bundling",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_UL_ControlInfoEncoder");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_UL_ControlInfoEncoder");

create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fPayload_x5fConfigSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fMCS_x5findex",
	"_nLTE_x5fUL_x5fChDeInterleaver_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fUL_x5fChDeInterleaver_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fEnable64QAMSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fNO",
	"_nLTE_x5fUL_x5fChDeInterleaver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fChBit_x5fConfigSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fREspersubframe",
	"_nLTE_x5fUL_x5fChDeInterleaver_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fFrameModeSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fFDD",
	"_nLTE_x5fUL_x5fChDeInterleaver_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f0",
	"_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f1",
	"_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f2",
	"_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f3",
	"_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f4",
	"_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f5",
	"_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fBandwidthSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fNormal",
	"_nLTE_x5fUL_x5fChDeInterleaver_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fChDeInterleaver_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fChDeInterleaver_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fPUSCH",
	"_nLTE_x5fUL_x5fChDeInterleaver_fPUCCH",
	"_nLTE_x5fUL_x5fChDeInterleaver_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fUL_x5fChDeInterleaver_fData_x5fOnly",
	"_nLTE_x5fUL_x5fChDeInterleaver_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fChDeInterleaver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fChDeInterleaver_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fChDeInterleaver_fNO",
	"_nLTE_x5fUL_x5fChDeInterleaver_fYES",
	"StdForm");
create_item ("LTE_UL_ChDeInterleaver","Uplink PUSCH Channel DeInterleaver",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_ChDeInterleaver",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fChDeInterleaver_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_ChDeInterleaver",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fUL_x5fChDeInterleaver_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fUL_x5fChDeInterleaver_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fYES","YES")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fChDeInterleaver_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fChDeInterleaver_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fChDeInterleaver_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fChDeInterleaver_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fChDeInterleaver_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fChDeInterleaver_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fChDeInterleaver_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fChDeInterleaver_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fChDeInterleaver_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChDeInterleaver_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("HARQACK_NumInfoBits","HARQ-ACK information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("HARQACK_BetaOffsetIndex","HARQ-ACK offset values, used in calculating the number of coded HARQ-ACK symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_UL_ChDeInterleaver");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_UL_ChDeInterleaver");

create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fPayload_x5fConfigSet",
	"_nLTE_x5fUL_x5fChInterleaver_fMCS_x5findex",
	"_nLTE_x5fUL_x5fChInterleaver_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fUL_x5fChInterleaver_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fEnable64QAMSet",
	"_nLTE_x5fUL_x5fChInterleaver_fNO",
	"_nLTE_x5fUL_x5fChInterleaver_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fChBit_x5fConfigSet",
	"_nLTE_x5fUL_x5fChInterleaver_fREspersubframe",
	"_nLTE_x5fUL_x5fChInterleaver_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fFrameModeSet",
	"_nLTE_x5fUL_x5fChInterleaver_fFDD",
	"_nLTE_x5fUL_x5fChInterleaver_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f0",
	"_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f1",
	"_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f2",
	"_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f3",
	"_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f4",
	"_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f5",
	"_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fBandwidthSet",
	"_nLTE_x5fUL_x5fChInterleaver_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fChInterleaver_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fChInterleaver_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fChInterleaver_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fChInterleaver_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fChInterleaver_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fChInterleaver_fNormal",
	"_nLTE_x5fUL_x5fChInterleaver_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fChInterleaver_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fChInterleaver_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fChInterleaver_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fChInterleaver_fPUSCH",
	"_nLTE_x5fUL_x5fChInterleaver_fPUCCH",
	"_nLTE_x5fUL_x5fChInterleaver_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fUL_x5fChInterleaver_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fUL_x5fChInterleaver_fData_x5fOnly",
	"_nLTE_x5fUL_x5fChInterleaver_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fChInterleaver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fChInterleaver_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fChInterleaver_fNO",
	"_nLTE_x5fUL_x5fChInterleaver_fYES",
	"StdForm");
create_item ("LTE_UL_ChInterleaver","Uplink Channel Interleaver",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_ChInterleaver",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fChInterleaver_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_ChInterleaver",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fUL_x5fChInterleaver_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fUL_x5fChInterleaver_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fYES","YES")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fChInterleaver_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fChInterleaver_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fChInterleaver_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fChInterleaver_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fChInterleaver_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fChInterleaver_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fChInterleaver_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fChInterleaver_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT | PARM_NO_DISPLAY,
		"_nLTE_x5fUL_x5fChInterleaver_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fChInterleaver_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("HARQACK_NumInfoBits","HARQ-ACK information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("HARQACK_BetaOffsetIndex","HARQ-ACK offset values, used in calculating the number of coded HARQ-ACK symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_UL_ChInterleaver");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_UL_ChInterleaver");

create_constant_form ("_nLTE_x5fUL_x5fDFT_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fDFT_fFrameModeSet",
	"_nLTE_x5fUL_x5fDFT_fFDD",
	"_nLTE_x5fUL_x5fDFT_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fDFT_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fDFT_fConfig_x5f0",
	"_nLTE_x5fUL_x5fDFT_fConfig_x5f1",
	"_nLTE_x5fUL_x5fDFT_fConfig_x5f2",
	"_nLTE_x5fUL_x5fDFT_fConfig_x5f3",
	"_nLTE_x5fUL_x5fDFT_fConfig_x5f4",
	"_nLTE_x5fUL_x5fDFT_fConfig_x5f5",
	"_nLTE_x5fUL_x5fDFT_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fDFT_fBandwidthSet",
	"_nLTE_x5fUL_x5fDFT_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fDFT_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fDFT_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fDFT_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fDFT_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fDFT_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fDFT_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fDFT_fNormal",
	"_nLTE_x5fUL_x5fDFT_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fDFT_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fDFT_fPUSCH",
	"_nLTE_x5fUL_x5fDFT_fPUCCH",
	"_nLTE_x5fUL_x5fDFT_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fDFT_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fDFT_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fDFT_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fDFT_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fDFT_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fDFT_fNO",
	"_nLTE_x5fUL_x5fDFT_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fInverse", 
	"Inverse",
	0,
	"0",
	"Inverse");
create_constant_form ("_nLTE_x5fUL_x5fDFT_fForward", 
	"Forward",
	0,
	"1",
	"Forward");
create_form_set("_nLTE_x5fUL_x5fDFT_fDirectionSet",
	"_nLTE_x5fUL_x5fDFT_fInverse",
	"_nLTE_x5fUL_x5fDFT_fForward",
	"StdForm");
create_item ("LTE_UL_DFT","Complex discrete Fourier transform for uplink",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_DFT",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fDFT_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_DFT",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fDFT_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDFT_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fDFT_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDFT_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fDFT_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDFT_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fDFT_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDFT_fNormal","Normal")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fDFT_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDFT_fPUSCH","PUSCH")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fDFT_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDFT_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs; ...; SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fDFT_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDFT_fNO","NO")),
	create_parm ("SRS_SF_Config","the cell-specific SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Direction","direction of transform",
		PARM_INT,
		"_nLTE_x5fUL_x5fDFT_fDirectionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDFT_fForward","Forward")));
library_group("LTE, Modulation","LTE, Modulation","LTE_UL_DFT");
palette_group("LTE, Modulation","LTE, Modulation","LTE_UL_DFT");

create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFrameModeSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fFDD",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f0",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f1",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f2",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f3",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f4",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f5",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig0",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig1",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig2",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig3",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig4",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig5",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig6",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig7",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fBandwidthSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fNormal",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fDL_x5fNormal", 
	"DL_Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fDL_x5fExtended", 
	"DL_Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fDL_x5fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fDL_x5fNormal",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fDL_x5fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUSCH",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUCCH",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fDFTSwap_x5fEnableSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUSCH_x5fHoppingEnableSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_finterSubFrame", 
	"interSubFrame",
	0,
	"0",
	"interSubFrame");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fintraAndInterSubFrame", 
	"intraAndInterSubFrame",
	0,
	"1",
	"intraAndInterSubFrame");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUSCH_x5fHoppingModeSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_finterSubFrame",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fintraAndInterSubFrame",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fzero_x5for_x5fzz", 
	"zero_or_zz",
	0,
	"0",
	"0 or 00");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fone_x5for_x5fzone", 
	"one_or_zone",
	0,
	"1",
	"1 or 01");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fonezero", 
	"onezero",
	0,
	"2",
	"10");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_foneone", 
	"oneone",
	0,
	"3",
	"11");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUSCH_x5fHoppingBitsSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fzero_x5for_x5fzz",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fone_x5for_x5fzone",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fonezero",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_foneone",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f1", 
	"Format_1",
	0,
	"0",
	"Format 1");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f1a", 
	"Format_1a",
	0,
	"1",
	"Format 1a");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f1b", 
	"Format_1b",
	0,
	"2",
	"Format 1b");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fShortened_x5f1", 
	"Shortened_1",
	0,
	"3",
	"Shortened 1");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fShortened_x5f1a", 
	"Shortened_1a",
	0,
	"4",
	"Shortened 1a");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fShortened_x5f1b", 
	"Shortened_1b",
	0,
	"5",
	"Shortened 1b");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f2", 
	"Format_2",
	0,
	"6",
	"Format 2");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f2a", 
	"Format_2a",
	0,
	"7",
	"Format 2a");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f2b", 
	"Format_2b",
	0,
	"8",
	"Format 2b");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUCCH_x5fFormatSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f1",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f1a",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f1b",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fShortened_x5f1",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fShortened_x5f1a",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fShortened_x5f1b",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f2",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f2a",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f2b",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fPRACH_x5fEnableSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fDemuxSCFDMASym_fSRS_x5fMaxUpPtsSet",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fDemuxSCFDMASym_fYES",
	"StdForm");
create_item ("LTE_UL_DemuxSCFDMASym","Uplink SC-FDMA symbol Demultiplexer",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_DemuxSCFDMASym",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fDemuxSCFDMASym_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_DemuxSCFDMASym",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fConfig4","Config4")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO","NO")),
	create_parm ("DL_CyclicPrefix","type of cyclic prefix in downlink",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fDL_x5fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fDL_x5fNormal","DL_Normal")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUSCH","PUSCH")),
	create_parm ("DFTSwap_Enable","PUSCH DFT swap is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fDFTSwap_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO","NO")),
	create_parm ("PUSCH_HoppingEnable","whether PUSCH frequency-hopping is enabled or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUSCH_x5fHoppingEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO","NO")),
	create_parm ("PUSCH_HoppingMode","PUSCH frequency hopping mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUSCH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_finterSubFrame","interSubFrame")),
	create_parm ("PUSCH_HoppingOffset","the offset used for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_Hopping_Nsb","number of sub-bands for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUSCH_HoppingBits","information in hopping bits",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUSCH_x5fHoppingBitsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fzero_x5for_x5fzz","zero_or_zz")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs; ...; SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUCCH_Format","PUCCH format",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fPUCCH_x5fFormatSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fFormat_x5f1","Format_1")),
	create_parm ("PUCCH_Delta_shift","used to calculate PUCCH cyclic shift Alfa",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("PUCCH_NRB2","number of RBs used for transmisstion PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUCCH_n1","resources used for transmisstion PUCCH format 1/1a/1b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PUCCH_n2","resources used for transmission PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PRACH_RBOffset","PRACH frequency offset, the first RB available for PRACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO","NO")),
	create_parm ("SRS_BandwidthConfig","the cell-specific SRS bandwidth configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","7")),
	create_parm ("SRS_SF_Config","the cell-specific SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_MaxUpPts","whether enable the reconfiguration of maximum m_SRS_0 or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSCFDMASym_fSRS_x5fMaxUpPtsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSCFDMASym_fNO","NO")),
	create_parm ("SRS_Bandwidth","the UE-specific SRS bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_HoppingBandwidth","the SRS hopping bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SRS_FreqPosition","the SRS frequency domain position",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_ConfigIndex","the UE-specific SRS configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_TransmissionComb","transmission comb",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_PwrOffset","the power offset in dB for PUSCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_RS_PwrOffset","the power offset in dB for PUSCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_PwrOffset","the power offset in dB for PUCCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_RS_PwrOffset","the power offset in dB for PUCCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_PwrOffset","the power offset in dB for SRS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_DemuxSCFDMASym");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_DemuxSCFDMASym");

create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fFrameModeSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fFDD",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f0",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f1",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f2",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f3",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f4",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f5",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig0",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig1",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig2",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig3",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig4",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig5",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig6",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig7",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fBandwidthSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fNormal",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fDL_x5fNormal", 
	"DL_Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fDL_x5fExtended", 
	"DL_Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fDL_x5fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fDL_x5fNormal",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fDL_x5fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fPrintf_x5fRB_x5fSF_x5fAllocSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fPUSCH",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fPUCCH",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fDFTSwap_x5fEnableSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fPUSCH_x5fHoppingEnableSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_finterSubFrame", 
	"interSubFrame",
	0,
	"0",
	"interSubFrame");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fintraAndInterSubFrame", 
	"intraAndInterSubFrame",
	0,
	"1",
	"intraAndInterSubFrame");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fPUSCH_x5fHoppingModeSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_finterSubFrame",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fintraAndInterSubFrame",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fzero_x5for_x5fzz", 
	"zero_or_zz",
	0,
	"0",
	"0 or 00");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fone_x5for_x5fzone", 
	"one_or_zone",
	0,
	"1",
	"1 or 01");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fonezero", 
	"onezero",
	0,
	"2",
	"10");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_foneone", 
	"oneone",
	0,
	"3",
	"11");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fPUSCH_x5fHoppingBitsSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fzero_x5for_x5fzz",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fone_x5for_x5fzone",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fonezero",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_foneone",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f1", 
	"Format_1",
	0,
	"0",
	"Format 1");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f1a", 
	"Format_1a",
	0,
	"1",
	"Format 1a");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f1b", 
	"Format_1b",
	0,
	"2",
	"Format 1b");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fShortened_x5f1", 
	"Shortened_1",
	0,
	"3",
	"Shortened 1");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fShortened_x5f1a", 
	"Shortened_1a",
	0,
	"4",
	"Shortened 1a");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fShortened_x5f1b", 
	"Shortened_1b",
	0,
	"5",
	"Shortened 1b");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f2", 
	"Format_2",
	0,
	"6",
	"Format 2");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f2a", 
	"Format_2a",
	0,
	"7",
	"Format 2a");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f2b", 
	"Format_2b",
	0,
	"8",
	"Format 2b");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fPUCCH_x5fFormatSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f1",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f1a",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f1b",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fShortened_x5f1",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fShortened_x5f1a",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fShortened_x5f1b",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f2",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f2a",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f2b",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fPRACH_x5fEnableSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fMuxSCFDMASym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fMuxSCFDMASym_fSRS_x5fMaxUpPtsSet",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fNO",
	"_nLTE_x5fUL_x5fMuxSCFDMASym_fYES",
	"StdForm");
create_item ("LTE_UL_MuxSCFDMASym","Uplink SC-FDMA symbol multiplexer",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_MuxSCFDMASym",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fMuxSCFDMASym_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_MuxSCFDMASym",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fConfig4","Config4")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO","NO")),
	create_parm ("DL_CyclicPrefix","type of cyclic prefix in downlink",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fDL_x5fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fDL_x5fNormal","DL_Normal")),
	create_parm ("Printf_RB_SF_Alloc","print the RB_SF allocation to file",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fPrintf_x5fRB_x5fSF_x5fAllocSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO","NO")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fPUSCH","PUSCH")),
	create_parm ("DFTSwap_Enable","PUSCH DFT swap is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fDFTSwap_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO","NO")),
	create_parm ("PUSCH_HoppingEnable","whether PUSCH frequency-hopping is enabled or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fPUSCH_x5fHoppingEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO","NO")),
	create_parm ("PUSCH_HoppingMode","PUSCH frequency hopping mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fPUSCH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_finterSubFrame","interSubFrame")),
	create_parm ("PUSCH_HoppingOffset","the offset used for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_Hopping_Nsb","number of sub-bands for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUSCH_HoppingBits","information in hopping bits",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fPUSCH_x5fHoppingBitsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fzero_x5for_x5fzz","zero_or_zz")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs; ...; SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUCCH_Format","PUCCH format",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fPUCCH_x5fFormatSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fFormat_x5f1","Format_1")),
	create_parm ("PUCCH_Delta_shift","used to calculate PUCCH cyclic shift Alfa",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("PUCCH_NRB2","number of RBs used for transmisstion PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUCCH_n1","resources used for transmisstion PUCCH format 1/1a/1b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PUCCH_n2","resources used for transmission PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PRACH_RBOffset","PRACH frequency offset, the first RB available for PRACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO","NO")),
	create_parm ("SRS_BandwidthConfig","the cell-specific SRS bandwidth configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","7")),
	create_parm ("SRS_SF_Config","the cell-specific SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_MaxUpPts","whether enable the reconfiguration of maximum m_SRS_0 or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSCFDMASym_fSRS_x5fMaxUpPtsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSCFDMASym_fNO","NO")),
	create_parm ("SRS_Bandwidth","the UE-specific SRS bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_HoppingBandwidth","the SRS hopping bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SRS_FreqPosition","the SRS frequency domain position",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_ConfigIndex","the UE-specific SRS configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_TransmissionComb","transmission comb",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_PwrOffset","the power offset in dB for PUSCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_RS_PwrOffset","the power offset in dB for PUSCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_PwrOffset","the power offset in dB for PUCCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_RS_PwrOffset","the power offset in dB for PUCCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_PwrOffset","the power offset in dB for SRS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_MuxSCFDMASym");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_MuxSCFDMASym");

create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fFrameModeSet",
	"_nLTE_x5fUL_x5fCAZAC_fFDD",
	"_nLTE_x5fUL_x5fCAZAC_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fCAZAC_fConfig_x5f0",
	"_nLTE_x5fUL_x5fCAZAC_fConfig_x5f1",
	"_nLTE_x5fUL_x5fCAZAC_fConfig_x5f2",
	"_nLTE_x5fUL_x5fCAZAC_fConfig_x5f3",
	"_nLTE_x5fUL_x5fCAZAC_fConfig_x5f4",
	"_nLTE_x5fUL_x5fCAZAC_fConfig_x5f5",
	"_nLTE_x5fUL_x5fCAZAC_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fUL_x5fCAZAC_fConfig0",
	"_nLTE_x5fUL_x5fCAZAC_fConfig1",
	"_nLTE_x5fUL_x5fCAZAC_fConfig2",
	"_nLTE_x5fUL_x5fCAZAC_fConfig3",
	"_nLTE_x5fUL_x5fCAZAC_fConfig4",
	"_nLTE_x5fUL_x5fCAZAC_fConfig5",
	"_nLTE_x5fUL_x5fCAZAC_fConfig6",
	"_nLTE_x5fUL_x5fCAZAC_fConfig7",
	"_nLTE_x5fUL_x5fCAZAC_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fBandwidthSet",
	"_nLTE_x5fUL_x5fCAZAC_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fCAZAC_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fCAZAC_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fCAZAC_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fCAZAC_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fCAZAC_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fCAZAC_fNormal",
	"_nLTE_x5fUL_x5fCAZAC_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fCAZAC_fNO",
	"_nLTE_x5fUL_x5fCAZAC_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fDL_x5fNormal", 
	"DL_Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fDL_x5fExtended", 
	"DL_Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fDL_x5fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fCAZAC_fDL_x5fNormal",
	"_nLTE_x5fUL_x5fCAZAC_fDL_x5fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fCAZAC_fPUSCH",
	"_nLTE_x5fUL_x5fCAZAC_fPUCCH",
	"_nLTE_x5fUL_x5fCAZAC_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fCAZAC_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fCAZAC_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fCAZAC_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fGroupHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fCAZAC_fNO",
	"_nLTE_x5fUL_x5fCAZAC_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fSeqHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fCAZAC_fNO",
	"_nLTE_x5fUL_x5fCAZAC_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fPRACH_x5fEnableSet",
	"_nLTE_x5fUL_x5fCAZAC_fNO",
	"_nLTE_x5fUL_x5fCAZAC_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fCAZAC_fNO",
	"_nLTE_x5fUL_x5fCAZAC_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fCAZAC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fCAZAC_fSRS_x5fMaxUpPtsSet",
	"_nLTE_x5fUL_x5fCAZAC_fNO",
	"_nLTE_x5fUL_x5fCAZAC_fYES",
	"StdForm");
create_item ("LTE_UL_CAZAC","Uplink CAZAC sequence generator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_CAZAC",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fCAZAC_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_CAZAC",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fConfig4","Config4")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fNO","NO")),
	create_parm ("DL_CyclicPrefix","type of cyclic prefix in downlink",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fDL_x5fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fDL_x5fNormal","DL_Normal")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fPUSCH","PUSCH")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs; ...; SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("GroupHop_Enable","whether enable group hopping for DMRS on PUCCH and PUSCH or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fGroupHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fNO","NO")),
	create_parm ("SeqHop_Enable","whether enable sequence hopping for DMRS on PUSCH  or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fSeqHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fNO","NO")),
	create_parm ("PUSCH_Delta_ss","used in determining the sequence-shift pattern for PUSCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_n_DMRS1","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUSCH_n_DMRS2","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fNO","NO")),
	create_parm ("SRS_BandwidthConfig","the cell-specific SRS bandwidth configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","7")),
	create_parm ("SRS_SF_Config","the cell-specific SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_MaxUpPts","whether enable the reconfiguration of maximum m_SRS_0 or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fCAZAC_fSRS_x5fMaxUpPtsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fCAZAC_fNO","NO")),
	create_parm ("SRS_Bandwidth","the UE-specific SRS bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_ConfigIndex","the UE-specific SRS configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_CyclicShift","used in computing the cyclic shift of SRS",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("LTE, Sync Signal","LTE, Sync Signal","LTE_UL_CAZAC");
palette_group("LTE, Sync Signal","LTE, Sync Signal","LTE_UL_CAZAC");

create_constant_form ("_nLTE_x5fRACH_x5fHalfCarrierShift_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRACH_x5fHalfCarrierShift_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRACH_x5fHalfCarrierShift_fHalfCarrierShift_x5fEnableSet",
	"_nLTE_x5fRACH_x5fHalfCarrierShift_fNO",
	"_nLTE_x5fRACH_x5fHalfCarrierShift_fYES",
	"StdForm");
create_item ("LTE_RACH_HalfCarrierShift","PRACH Half carrier shift",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_RACH_HalfCarrierShift",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fRACH_x5fHalfCarrierShift_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_RACH_HalfCarrierShift",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("HalfCarrierShift_Enable","whether or not to enable 1/2 subcarrier shifting",
		PARM_INT,
		"_nLTE_x5fRACH_x5fHalfCarrierShift_fHalfCarrierShift_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fHalfCarrierShift_fYES","YES")),
	create_parm ("FFTSize","fft size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6144")),
	create_parm ("K","factor K accounts for the difference in subcarrier spacing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","12")),
	create_parm ("NumPrmble","number of preamble samples",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6144")),
	create_parm ("NumCP","number of cyclic prefix samples",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","792")));
library_group("LTE, Sync Signal","LTE, Sync Signal","LTE_RACH_HalfCarrierShift");
palette_group("LTE, Sync Signal","LTE, Sync Signal","LTE_RACH_HalfCarrierShift");

create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fRACH_x5fSubcMapping_fFrameModeSet",
	"_nLTE_x5fRACH_x5fSubcMapping_fFDD",
	"_nLTE_x5fRACH_x5fSubcMapping_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fRACH_x5fSubcMapping_fTDD_x5fConfigSet",
	"_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f0",
	"_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f1",
	"_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f2",
	"_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f3",
	"_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f4",
	"_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f5",
	"_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fRACH_x5fSubcMapping_fBandwidthSet",
	"_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f3_x5fMHz",
	"_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f5_x5fMHz",
	"_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f10_x5fMHz",
	"_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f15_x5fMHz",
	"_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fRACH_x5fSubcMapping_fOversamplingOptionSet",
	"_nLTE_x5fRACH_x5fSubcMapping_fRatio_x5f1",
	"_nLTE_x5fRACH_x5fSubcMapping_fRatio_x5f2",
	"_nLTE_x5fRACH_x5fSubcMapping_fRatio_x5f4",
	"_nLTE_x5fRACH_x5fSubcMapping_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRACH_x5fSubcMapping_fFrameIncreasedSet",
	"_nLTE_x5fRACH_x5fSubcMapping_fNO",
	"_nLTE_x5fRACH_x5fSubcMapping_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRACH_x5fSubcMapping_fDFTSwap_x5fEnableSet",
	"_nLTE_x5fRACH_x5fSubcMapping_fNO",
	"_nLTE_x5fRACH_x5fSubcMapping_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRACH_x5fSubcMapping_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRACH_x5fSubcMapping_fPRACH_x5fEnableSet",
	"_nLTE_x5fRACH_x5fSubcMapping_fNO",
	"_nLTE_x5fRACH_x5fSubcMapping_fYES",
	"StdForm");
create_item ("LTE_RACH_SubcMapping","RACH subcarrier mapping",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_RACH_SubcMapping",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fRACH_x5fSubcMapping_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_RACH_SubcMapping",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fRACH_x5fSubcMapping_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fSubcMapping_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fRACH_x5fSubcMapping_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fSubcMapping_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fRACH_x5fSubcMapping_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fSubcMapping_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fRACH_x5fSubcMapping_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fSubcMapping_fRatio_x5f2","Ratio_2")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fRACH_x5fSubcMapping_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fSubcMapping_fNO","NO")),
	create_parm ("DFTSwap_Enable","PUSCH DFT swap is enable",
		PARM_INT,
		"_nLTE_x5fRACH_x5fSubcMapping_fDFTSwap_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fSubcMapping_fNO","NO")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fRACH_x5fSubcMapping_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fSubcMapping_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PRACH_RBOffset","PRACH frequency offset, the first RB available for PRACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("LTE, Sync Signal","LTE, Sync Signal","LTE_RACH_SubcMapping");
palette_group("LTE, Sync Signal","LTE, Sync Signal","LTE_RACH_SubcMapping");

create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fRACH_x5fPrmGen_fFrameModeSet",
	"_nLTE_x5fRACH_x5fPrmGen_fFDD",
	"_nLTE_x5fRACH_x5fPrmGen_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fRACH_x5fPrmGen_fTDD_x5fConfigSet",
	"_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f0",
	"_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f1",
	"_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f2",
	"_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f3",
	"_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f4",
	"_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f5",
	"_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRACH_x5fPrmGen_fPRACH_x5fEnableSet",
	"_nLTE_x5fRACH_x5fPrmGen_fNO",
	"_nLTE_x5fRACH_x5fPrmGen_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRACH_x5fPrmGen_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRACH_x5fPrmGen_fPRACH_x5fHS_x5fflagSet",
	"_nLTE_x5fRACH_x5fPrmGen_fNO",
	"_nLTE_x5fRACH_x5fPrmGen_fYES",
	"StdForm");
create_item ("LTE_RACH_PrmGen","RACH preamble sequence generator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_RACH_PrmGen",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fRACH_x5fPrmGen_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_RACH_PrmGen",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fRACH_x5fPrmGen_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fPrmGen_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fRACH_x5fPrmGen_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fPrmGen_fConfig_x5f0","Config_0")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fRACH_x5fPrmGen_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fPrmGen_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PRACH_PrmbleIndex","preamble indexes, used to select preamble sequences from 64 preambles available in this cell",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_LogicalIndex","logical index of root ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_Ncs","cyclic shifts of ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_HS_flag","high speed flag",
		PARM_INT,
		"_nLTE_x5fRACH_x5fPrmGen_fPRACH_x5fHS_x5fflagSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRACH_x5fPrmGen_fNO","NO")));
library_group("LTE, Sync Signal","LTE, Sync Signal","LTE_RACH_PrmGen");
palette_group("LTE, Sync Signal","LTE, Sync Signal","LTE_RACH_PrmGen");

create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fTR_x5f1x2", 
	"TR_1x2",
	0,
	"0",
	"1x2");
create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fTR_x5f2x2", 
	"TR_2x2",
	0,
	"1",
	"2x2");
create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fTR_x5f4x2", 
	"TR_4x2",
	0,
	"2",
	"4x2");
create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fTR_x5f4x4", 
	"TR_4x4",
	0,
	"3",
	"4x4");
create_form_set("_nLTE_x5fMIMO_x5fChannel_fAntennas_x5fConfigSet",
	"_nLTE_x5fMIMO_x5fChannel_fTR_x5f1x2",
	"_nLTE_x5fMIMO_x5fChannel_fTR_x5f2x2",
	"_nLTE_x5fMIMO_x5fChannel_fTR_x5f4x2",
	"_nLTE_x5fMIMO_x5fChannel_fTR_x5f4x4",
	"StdForm");
create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fLow", 
	"Low",
	0,
	"0",
	"Low");
create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fMedium", 
	"Medium",
	0,
	"1",
	"Medium");
create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fHigh", 
	"High",
	0,
	"2",
	"High");
create_form_set("_nLTE_x5fMIMO_x5fChannel_fCorrelation_x5fTypeSet",
	"_nLTE_x5fMIMO_x5fChannel_fLow",
	"_nLTE_x5fMIMO_x5fChannel_fMedium",
	"_nLTE_x5fMIMO_x5fChannel_fHigh",
	"StdForm");
create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fExtended_x5fPedestrian_x5fA", 
	"Extended_Pedestrian_A",
	0,
	"0",
	"EPA");
create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fExtended_x5fVehicular_x5fA", 
	"Extended_Vehicular_A",
	0,
	"1",
	"EVA");
create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fExtended_x5fTypicalUrban", 
	"Extended_TypicalUrban",
	0,
	"2",
	"ETU");
create_constant_form ("_nLTE_x5fMIMO_x5fChannel_fUserDefined", 
	"UserDefined",
	0,
	"3",
	"UserDefined");
create_form_set("_nLTE_x5fMIMO_x5fChannel_fModelTypeSet",
	"_nLTE_x5fMIMO_x5fChannel_fExtended_x5fPedestrian_x5fA",
	"_nLTE_x5fMIMO_x5fChannel_fExtended_x5fVehicular_x5fA",
	"_nLTE_x5fMIMO_x5fChannel_fExtended_x5fTypicalUrban",
	"_nLTE_x5fMIMO_x5fChannel_fUserDefined",
	"StdForm");
create_item ("LTE_MIMO_Channel","LTE MIMO channel model",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_MIMO_Channel",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nLTE_x5fMIMO_x5fChannel_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_MIMO_Channel",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Antennas_Config","the configuration of Tx and Rx antennas in term of number of Tx x number of Rx",
		PARM_INT,
		"_nLTE_x5fMIMO_x5fChannel_fAntennas_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMIMO_x5fChannel_fTR_x5f2x2","TR_2x2")),
	create_parm ("Correlation_Type","the MIMO channel correlation matrix type",
		PARM_INT,
		"_nLTE_x5fMIMO_x5fChannel_fCorrelation_x5fTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMIMO_x5fChannel_fLow","Low")),
	create_parm ("ModelType","the TS 36.101 Channel number or User defined Channel",
		PARM_INT,
		"_nLTE_x5fMIMO_x5fChannel_fModelTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMIMO_x5fChannel_fExtended_x5fVehicular_x5fA","Extended_Vehicular_A")),
	create_parm ("Delay","the delay of each tap in usec, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		TIME_UNIT,
		prm("StringAndReference","{0.0 , 0.03, 0.15, 0.31 ,0.37,  0.71 , 1.09 , 1.73 , 2.51 }")),
	create_parm ("Power","the power in each tap in dB, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0 dB, -1.5 dB, -1.4 dB, -3.6 dB, -0.6 dB, -9.1 dB, -7.0 dB, -12.0 dB, -16.9 dB}")),
	create_parm ("Ricean_factor","the Ricean K-factor in linear scale of each tap, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("Velocity","the velocity of mobile station",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","120")));
library_group("LTE, Channel Model","LTE, Channel Model","LTE_MIMO_Channel");
palette_group("LTE, Channel Model","LTE, Channel Model","LTE_MIMO_Channel");

create_constant_form ("_nLTE_x5fChannel_x5fH_fExtended_x5fPedestrian_x5fA", 
	"Extended_Pedestrian_A",
	0,
	"0",
	"EPA");
create_constant_form ("_nLTE_x5fChannel_x5fH_fExtended_x5fVehicular_x5fA", 
	"Extended_Vehicular_A",
	0,
	"1",
	"EVA");
create_constant_form ("_nLTE_x5fChannel_x5fH_fExtended_x5fTypicalUrban", 
	"Extended_TypicalUrban",
	0,
	"2",
	"ETU");
create_constant_form ("_nLTE_x5fChannel_x5fH_fUserDefined", 
	"UserDefined",
	0,
	"3",
	"UserDefined");
create_form_set("_nLTE_x5fChannel_x5fH_fModelTypeSet",
	"_nLTE_x5fChannel_x5fH_fExtended_x5fPedestrian_x5fA",
	"_nLTE_x5fChannel_x5fH_fExtended_x5fVehicular_x5fA",
	"_nLTE_x5fChannel_x5fH_fExtended_x5fTypicalUrban",
	"_nLTE_x5fChannel_x5fH_fUserDefined",
	"StdForm");
create_item ("LTE_Channel_H","LTE channel model",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_Channel_H",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nLTE_x5fChannel_x5fH_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_Channel_H",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ModelType","the R4-070872_TR36.803.0.3.0 Channel number or User defined Channel",
		PARM_INT,
		"_nLTE_x5fChannel_x5fH_fModelTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fChannel_x5fH_fExtended_x5fVehicular_x5fA","Extended_Vehicular_A")),
	create_parm ("Delay","the delay of each tap in usec, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		TIME_UNIT,
		prm("StringAndReference","{0.0 , 0.03, 0.15, 0.31 ,0.37,  0.71 , 1.09 , 1.73 , 2.51 }")),
	create_parm ("Power","the power in each tap in dB, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0 dB, -1.5 dB, -1.4 dB, -3.6 dB, -0.6 dB, -9.1 dB, -7.0 dB, -12.0 dB, -16.9 dB}")),
	create_parm ("Ricean_factor","the Ricean K-factor in linear scale of each tap, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("Velocity","the velocity of mobile station",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","120")));
library_group("Testing (for development use only)","Testing (for development use only)","LTE_Channel_H");
palette_group("Testing (for development use only)","Testing (for development use only)","LTE_Channel_H");

create_constant_form ("_nLTE_x5fChannel_x5fITU_x5fH_fPedestrian_x5fA", 
	"Pedestrian_A",
	0,
	"0",
	"Pedestrian_A");
create_constant_form ("_nLTE_x5fChannel_x5fITU_x5fH_fPedestrian_x5fB", 
	"Pedestrian_B",
	0,
	"1",
	"Pedestrian_B");
create_constant_form ("_nLTE_x5fChannel_x5fITU_x5fH_fVehicular_x5fA", 
	"Vehicular_A",
	0,
	"2",
	"Vehicular_A");
create_constant_form ("_nLTE_x5fChannel_x5fITU_x5fH_fVehicular_x5fB", 
	"Vehicular_B",
	0,
	"3",
	"Vehicular_B");
create_constant_form ("_nLTE_x5fChannel_x5fITU_x5fH_fUserDefined", 
	"UserDefined",
	0,
	"4",
	"UserDefined");
create_form_set("_nLTE_x5fChannel_x5fITU_x5fH_fModelTypeSet",
	"_nLTE_x5fChannel_x5fITU_x5fH_fPedestrian_x5fA",
	"_nLTE_x5fChannel_x5fITU_x5fH_fPedestrian_x5fB",
	"_nLTE_x5fChannel_x5fITU_x5fH_fVehicular_x5fA",
	"_nLTE_x5fChannel_x5fITU_x5fH_fVehicular_x5fB",
	"_nLTE_x5fChannel_x5fITU_x5fH_fUserDefined",
	"StdForm");
create_constant_form ("_nLTE_x5fChannel_x5fITU_x5fH_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fChannel_x5fITU_x5fH_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fChannel_x5fITU_x5fH_fPathLossSet",
	"_nLTE_x5fChannel_x5fITU_x5fH_fNO",
	"_nLTE_x5fChannel_x5fITU_x5fH_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fChannel_x5fITU_x5fH_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fChannel_x5fITU_x5fH_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fChannel_x5fITU_x5fH_fPwrNormalSet",
	"_nLTE_x5fChannel_x5fITU_x5fH_fNO",
	"_nLTE_x5fChannel_x5fITU_x5fH_fYES",
	"StdForm");
create_item ("LTE_Channel_ITU_H","ITU channel model",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_Channel_ITU_H",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nLTE_x5fChannel_x5fITU_x5fH_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_Channel_ITU_H",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ModelType","the ITU-R M.1225 Channel number or User defined Channel",
		PARM_INT,
		"_nLTE_x5fChannel_x5fITU_x5fH_fModelTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fChannel_x5fITU_x5fH_fVehicular_x5fA","Vehicular_A")),
	create_parm ("Delay","the delay of each tap in usec, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		TIME_UNIT,
		prm("StringAndReference","{0.0 , 0.31 , 0.71 , 1.09 , 1.73 , 2.51 }")),
	create_parm ("Power","the power in each tap in dB, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0 dB, -1.0 dB, -9.0 dB, -10.0 dB, -15.0 dB, -20.0 dB}")),
	create_parm ("Ricean_factor","the Ricean K-factor in linear scale of each tap, effective only when ModelType is set as UserDefined",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("Velocity","the velocity of mobile station",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","120")),
	create_parm ("PathLoss","option for inclusion of large-scale pathloss",
		PARM_INT,
		"_nLTE_x5fChannel_x5fITU_x5fH_fPathLossSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fChannel_x5fITU_x5fH_fNO","NO")),
	create_parm ("PropDistance","the distance of BS and UE in meter, effective only when PassLoss is set as YES",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DISTANCE_UNIT,
		prm("StdForm","1000")),
	create_parm ("PwrNormal","option for normalization of the output power",
		PARM_INT,
		"_nLTE_x5fChannel_x5fITU_x5fH_fPwrNormalSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fChannel_x5fITU_x5fH_fNO","NO")),
	create_parm ("PwrMeasPeriod","The period of power measurement in order to normalize the output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1 msec")));
library_group("Testing (for development use only)","Testing (for development use only)","LTE_Channel_ITU_H");
palette_group("Testing (for development use only)","Testing (for development use only)","LTE_Channel_ITU_H");

create_constant_form ("_nLTE_x5fIQ_x5fOffset_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fIQ_x5fOffset_fBandwidthSet",
	"_nLTE_x5fIQ_x5fOffset_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fIQ_x5fOffset_fBW_x5f3_x5fMHz",
	"_nLTE_x5fIQ_x5fOffset_fBW_x5f5_x5fMHz",
	"_nLTE_x5fIQ_x5fOffset_fBW_x5f10_x5fMHz",
	"_nLTE_x5fIQ_x5fOffset_fBW_x5f15_x5fMHz",
	"_nLTE_x5fIQ_x5fOffset_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fIQ_x5fOffset_fOversamplingOptionSet",
	"_nLTE_x5fIQ_x5fOffset_fRatio_x5f1",
	"_nLTE_x5fIQ_x5fOffset_fRatio_x5f2",
	"_nLTE_x5fIQ_x5fOffset_fRatio_x5f4",
	"_nLTE_x5fIQ_x5fOffset_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fIQ_x5fOffset_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fIQ_x5fOffset_fIQ_x5fOffset_x5fCorrectSet",
	"_nLTE_x5fIQ_x5fOffset_fNO",
	"_nLTE_x5fIQ_x5fOffset_fYES",
	"StdForm");
create_item ("LTE_IQ_Offset","Uplink IQ offset compensation",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_IQ_Offset",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fIQ_x5fOffset_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_IQ_Offset",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fIQ_x5fOffset_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fIQ_x5fOffset_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fIQ_x5fOffset_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fIQ_x5fOffset_fRatio_x5f2","Ratio_2")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("IQ_Offset_Correct","whether or not to correct IQ offset",
		PARM_INT,
		"_nLTE_x5fIQ_x5fOffset_fIQ_x5fOffset_x5fCorrectSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fIQ_x5fOffset_fYES","YES")));
library_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_IQ_Offset");
palette_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_IQ_Offset");

create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fDemuxFrame_fFrameModeSet",
	"_nLTE_x5fUL_x5fDemuxFrame_fFDD",
	"_nLTE_x5fUL_x5fDemuxFrame_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fDemuxFrame_fBandwidthSet",
	"_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fDemuxFrame_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fDemuxFrame_fRatio_x5f1",
	"_nLTE_x5fUL_x5fDemuxFrame_fRatio_x5f2",
	"_nLTE_x5fUL_x5fDemuxFrame_fRatio_x5f4",
	"_nLTE_x5fUL_x5fDemuxFrame_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fDemuxFrame_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fDemuxFrame_fPreDownsamplingSet",
	"_nLTE_x5fUL_x5fDemuxFrame_fNO",
	"_nLTE_x5fUL_x5fDemuxFrame_fYES",
	"StdForm");
create_item ("LTE_UL_DemuxFrame","Uplink radio frame de-multiplexer with frequency offset compensator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_DemuxFrame",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fDemuxFrame_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_DemuxFrame",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxFrame_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxFrame_fFDD","FDD")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxFrame_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxFrame_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxFrame_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxFrame_fRatio_x5f2","Ratio_2")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("PreDownsampling","pre-downsampling to 1X symbol rate or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxFrame_fPreDownsamplingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxFrame_fNO","NO")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_DemuxFrame");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_DemuxFrame");

create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fDemuxSlot_fBandwidthSet",
	"_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fDemuxSlot_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fDemuxSlot_fRatio_x5f1",
	"_nLTE_x5fUL_x5fDemuxSlot_fRatio_x5f2",
	"_nLTE_x5fUL_x5fDemuxSlot_fRatio_x5f4",
	"_nLTE_x5fUL_x5fDemuxSlot_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fDemuxSlot_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fDemuxSlot_fNormal",
	"_nLTE_x5fUL_x5fDemuxSlot_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fDemuxSlot_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fDemuxSlot_fHalfCarrierShift_x5fEnableSet",
	"_nLTE_x5fUL_x5fDemuxSlot_fNO",
	"_nLTE_x5fUL_x5fDemuxSlot_fYES",
	"StdForm");
create_item ("LTE_UL_DemuxSlot","Uplink slot de-multiplexer",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_DemuxSlot",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fDemuxSlot_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_DemuxSlot",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSlot_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSlot_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSlot_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSlot_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSlot_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSlot_fNormal","Normal")),
	create_parm ("HalfCarrierShift_Enable","whether or not to enable 1/2 subcarrier shifting",
		PARM_INT,
		"_nLTE_x5fUL_x5fDemuxSlot_fHalfCarrierShift_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fDemuxSlot_fYES","YES")),
	create_parm ("Sym_StartPos","start position (without oversampling) to get the OFDM symbol for FFT operation for long CP and short CP symbols respecti...(Press Help for more info)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-3,-3}")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_DemuxSlot");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_DemuxSlot");

create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fUL_x5fMuxFrame_fFrameModeSet",
	"_nLTE_x5fUL_x5fMuxFrame_fFDD",
	"_nLTE_x5fUL_x5fMuxFrame_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fUL_x5fMuxFrame_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f0",
	"_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f1",
	"_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f2",
	"_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f3",
	"_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f4",
	"_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f5",
	"_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fMuxFrame_fBandwidthSet",
	"_nLTE_x5fUL_x5fMuxFrame_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fMuxFrame_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fMuxFrame_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fMuxFrame_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fMuxFrame_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fMuxFrame_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fMuxFrame_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fMuxFrame_fRatio_x5f1",
	"_nLTE_x5fUL_x5fMuxFrame_fRatio_x5f2",
	"_nLTE_x5fUL_x5fMuxFrame_fRatio_x5f4",
	"_nLTE_x5fUL_x5fMuxFrame_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fMuxFrame_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fMuxFrame_fNO",
	"_nLTE_x5fUL_x5fMuxFrame_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fMuxFrame_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fMuxFrame_fPRACH_x5fEnableSet",
	"_nLTE_x5fUL_x5fMuxFrame_fNO",
	"_nLTE_x5fUL_x5fMuxFrame_fYES",
	"StdForm");
create_item ("LTE_UL_MuxFrame","Uplink radio frame multiplexer",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_MuxFrame",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fMuxFrame_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_MuxFrame",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxFrame_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxFrame_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxFrame_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxFrame_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxFrame_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxFrame_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxFrame_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxFrame_fRatio_x5f2","Ratio_2")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxFrame_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxFrame_fNO","NO")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxFrame_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxFrame_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_MuxFrame");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_MuxFrame");

create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fUL_x5fMuxSlot_fBandwidthSet",
	"_nLTE_x5fUL_x5fMuxSlot_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fMuxSlot_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fMuxSlot_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fMuxSlot_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fMuxSlot_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fMuxSlot_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fUL_x5fMuxSlot_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fMuxSlot_fRatio_x5f1",
	"_nLTE_x5fUL_x5fMuxSlot_fRatio_x5f2",
	"_nLTE_x5fUL_x5fMuxSlot_fRatio_x5f4",
	"_nLTE_x5fUL_x5fMuxSlot_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fUL_x5fMuxSlot_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fMuxSlot_fNormal",
	"_nLTE_x5fUL_x5fMuxSlot_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fUL_x5fMuxSlot_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fUL_x5fMuxSlot_fHalfCarrierShift_x5fEnableSet",
	"_nLTE_x5fUL_x5fMuxSlot_fNO",
	"_nLTE_x5fUL_x5fMuxSlot_fYES",
	"StdForm");
create_item ("LTE_UL_MuxSlot","Uplink slot multiplexer",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_MuxSlot",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fUL_x5fMuxSlot_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_MuxSlot",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSlot_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSlot_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSlot_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSlot_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSlot_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSlot_fNormal","Normal")),
	create_parm ("HalfCarrierShift_Enable","whether or not to enable 1/2 subcarrier shifting",
		PARM_INT,
		"_nLTE_x5fUL_x5fMuxSlot_fHalfCarrierShift_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fMuxSlot_fYES","YES")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_MuxSlot");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_UL_MuxSlot");

create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPDCCH_x5fInterleaver_fFrameModeSet",
	"_nLTE_x5fPDCCH_x5fInterleaver_fFDD",
	"_nLTE_x5fPDCCH_x5fInterleaver_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPDCCH_x5fInterleaver_fTDD_x5fConfigSet",
	"_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f0",
	"_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f1",
	"_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f2",
	"_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f3",
	"_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f4",
	"_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f5",
	"_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPDCCH_x5fInterleaver_fBandwidthSet",
	"_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fPDCCH_x5fInterleaver_fNumTxAntsSet",
	"_nLTE_x5fPDCCH_x5fInterleaver_fTx1",
	"_nLTE_x5fPDCCH_x5fInterleaver_fTx2",
	"_nLTE_x5fPDCCH_x5fInterleaver_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPDCCH_x5fInterleaver_fCyclicPrefixSet",
	"_nLTE_x5fPDCCH_x5fInterleaver_fNormal",
	"_nLTE_x5fPDCCH_x5fInterleaver_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPDCCH_x5fInterleaver_fPHICH_x5fNgSet",
	"_nLTE_x5fPDCCH_x5fInterleaver_fNg_x5f1_x5f6",
	"_nLTE_x5fPDCCH_x5fInterleaver_fNg_x5f1_x5f2",
	"_nLTE_x5fPDCCH_x5fInterleaver_fNg_x5f1",
	"_nLTE_x5fPDCCH_x5fInterleaver_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPDCCH_x5fInterleaver_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPDCCH_x5fInterleaver_fETM_x5fSupportSet",
	"_nLTE_x5fPDCCH_x5fInterleaver_fNO",
	"_nLTE_x5fPDCCH_x5fInterleaver_fYES",
	"StdForm");
create_item ("LTE_PDCCH_Interleaver","PDCCH Interleaver",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PDCCH_Interleaver",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPDCCH_x5fInterleaver_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PDCCH_Interleaver",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fInterleaver_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fInterleaver_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fInterleaver_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fInterleaver_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fInterleaver_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fInterleaver_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fInterleaver_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fInterleaver_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fInterleaver_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fInterleaver_fNormal","Normal")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fInterleaver_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fInterleaver_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fInterleaver_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fInterleaver_fNO","NO")));
library_group("LTE, Signaling","LTE, Signaling","LTE_PDCCH_Interleaver");
palette_group("LTE, Signaling","LTE, Signaling","LTE_PDCCH_Interleaver");

create_constant_form ("_nLTE_x5fSS_x5fMIMO_x5fDemod_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fSS_x5fMIMO_x5fDemod_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fSS_x5fMIMO_x5fDemod_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fSS_x5fMIMO_x5fDemod_fNumTxAntsSet",
	"_nLTE_x5fSS_x5fMIMO_x5fDemod_fTx1",
	"_nLTE_x5fSS_x5fMIMO_x5fDemod_fTx2",
	"_nLTE_x5fSS_x5fMIMO_x5fDemod_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fSS_x5fMIMO_x5fDemod_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fSS_x5fMIMO_x5fDemod_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fSS_x5fMIMO_x5fDemod_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fSS_x5fMIMO_x5fDemod_fNumRxAntsSet",
	"_nLTE_x5fSS_x5fMIMO_x5fDemod_fRx1",
	"_nLTE_x5fSS_x5fMIMO_x5fDemod_fRx2",
	"_nLTE_x5fSS_x5fMIMO_x5fDemod_fRx4",
	"StdForm");
create_item ("LTE_SS_MIMO_Demod","MIMO demodulatio for Sync signals (PSS and SSS)",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_SS_MIMO_Demod",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fSS_x5fMIMO_x5fDemod_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_SS_MIMO_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fSS_x5fMIMO_x5fDemod_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSS_x5fMIMO_x5fDemod_fTx1","Tx1")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fSS_x5fMIMO_x5fDemod_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSS_x5fMIMO_x5fDemod_fRx1","Rx1")));
library_group("LTE, Modulation","LTE, Modulation","LTE_SS_MIMO_Demod");
palette_group("LTE, Modulation","LTE, Modulation","LTE_SS_MIMO_Demod");

create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPDCCH_x5fScrambler_fFrameModeSet",
	"_nLTE_x5fPDCCH_x5fScrambler_fFDD",
	"_nLTE_x5fPDCCH_x5fScrambler_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPDCCH_x5fScrambler_fTDD_x5fConfigSet",
	"_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f0",
	"_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f1",
	"_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f2",
	"_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f3",
	"_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f4",
	"_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f5",
	"_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPDCCH_x5fScrambler_fBandwidthSet",
	"_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fPDCCH_x5fScrambler_fNumTxAntsSet",
	"_nLTE_x5fPDCCH_x5fScrambler_fTx1",
	"_nLTE_x5fPDCCH_x5fScrambler_fTx2",
	"_nLTE_x5fPDCCH_x5fScrambler_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPDCCH_x5fScrambler_fCyclicPrefixSet",
	"_nLTE_x5fPDCCH_x5fScrambler_fNormal",
	"_nLTE_x5fPDCCH_x5fScrambler_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPDCCH_x5fScrambler_fPHICH_x5fNgSet",
	"_nLTE_x5fPDCCH_x5fScrambler_fNg_x5f1_x5f6",
	"_nLTE_x5fPDCCH_x5fScrambler_fNg_x5f1_x5f2",
	"_nLTE_x5fPDCCH_x5fScrambler_fNg_x5f1",
	"_nLTE_x5fPDCCH_x5fScrambler_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPDCCH_x5fScrambler_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPDCCH_x5fScrambler_fETM_x5fSupportSet",
	"_nLTE_x5fPDCCH_x5fScrambler_fNO",
	"_nLTE_x5fPDCCH_x5fScrambler_fYES",
	"StdForm");
create_item ("LTE_PDCCH_Scrambler","PDCCH Scrambler",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PDCCH_Scrambler",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPDCCH_x5fScrambler_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PDCCH_Scrambler",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fScrambler_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fScrambler_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fScrambler_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fScrambler_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fScrambler_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fScrambler_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fScrambler_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fScrambler_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fScrambler_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fScrambler_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fScrambler_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fScrambler_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fScrambler_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fScrambler_fNO","NO")));
library_group("LTE, Signaling","LTE, Signaling","LTE_PDCCH_Scrambler");
palette_group("LTE, Signaling","LTE, Signaling","LTE_PDCCH_Scrambler");

create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPDCCH_x5fMux_fFrameModeSet",
	"_nLTE_x5fPDCCH_x5fMux_fFDD",
	"_nLTE_x5fPDCCH_x5fMux_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPDCCH_x5fMux_fTDD_x5fConfigSet",
	"_nLTE_x5fPDCCH_x5fMux_fConfig_x5f0",
	"_nLTE_x5fPDCCH_x5fMux_fConfig_x5f1",
	"_nLTE_x5fPDCCH_x5fMux_fConfig_x5f2",
	"_nLTE_x5fPDCCH_x5fMux_fConfig_x5f3",
	"_nLTE_x5fPDCCH_x5fMux_fConfig_x5f4",
	"_nLTE_x5fPDCCH_x5fMux_fConfig_x5f5",
	"_nLTE_x5fPDCCH_x5fMux_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPDCCH_x5fMux_fBandwidthSet",
	"_nLTE_x5fPDCCH_x5fMux_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPDCCH_x5fMux_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPDCCH_x5fMux_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPDCCH_x5fMux_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPDCCH_x5fMux_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPDCCH_x5fMux_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fPDCCH_x5fMux_fNumTxAntsSet",
	"_nLTE_x5fPDCCH_x5fMux_fTx1",
	"_nLTE_x5fPDCCH_x5fMux_fTx2",
	"_nLTE_x5fPDCCH_x5fMux_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPDCCH_x5fMux_fCyclicPrefixSet",
	"_nLTE_x5fPDCCH_x5fMux_fNormal",
	"_nLTE_x5fPDCCH_x5fMux_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPDCCH_x5fMux_fPHICH_x5fNgSet",
	"_nLTE_x5fPDCCH_x5fMux_fNg_x5f1_x5f6",
	"_nLTE_x5fPDCCH_x5fMux_fNg_x5f1_x5f2",
	"_nLTE_x5fPDCCH_x5fMux_fNg_x5f1",
	"_nLTE_x5fPDCCH_x5fMux_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPDCCH_x5fMux_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPDCCH_x5fMux_fETM_x5fSupportSet",
	"_nLTE_x5fPDCCH_x5fMux_fNO",
	"_nLTE_x5fPDCCH_x5fMux_fYES",
	"StdForm");
create_item ("LTE_PDCCH_Mux","PDCCH Multiplexer",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PDCCH_Mux",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPDCCH_x5fMux_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PDCCH_Mux",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fMux_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fMux_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fMux_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fMux_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fMux_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fMux_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fMux_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fMux_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fMux_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fMux_fNormal","Normal")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0,-1,-1,-1,-1,-1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1,-1,-1,-1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1,1,1,1,1,1,1,1,1,1}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fMux_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fMux_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPDCCH_x5fMux_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPDCCH_x5fMux_fNO","NO")));
library_group("LTE, Signaling","LTE, Signaling","LTE_PDCCH_Mux");
palette_group("LTE, Signaling","LTE, Signaling","LTE_PDCCH_Mux");

create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPCFICH_x5fScrambler_fFrameModeSet",
	"_nLTE_x5fPCFICH_x5fScrambler_fFDD",
	"_nLTE_x5fPCFICH_x5fScrambler_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPCFICH_x5fScrambler_fTDD_x5fConfigSet",
	"_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f0",
	"_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f1",
	"_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f2",
	"_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f3",
	"_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f4",
	"_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f5",
	"_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPCFICH_x5fScrambler_fBandwidthSet",
	"_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f20_x5fMHz",
	"StdForm");
create_item ("LTE_PCFICH_Scrambler","PCFICH Scrambler",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PCFICH_Scrambler",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPCFICH_x5fScrambler_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PCFICH_Scrambler",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPCFICH_x5fScrambler_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPCFICH_x5fScrambler_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPCFICH_x5fScrambler_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPCFICH_x5fScrambler_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPCFICH_x5fScrambler_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPCFICH_x5fScrambler_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")));
library_group("LTE, Signaling","LTE, Signaling","LTE_PCFICH_Scrambler");
palette_group("LTE, Signaling","LTE, Signaling","LTE_PCFICH_Scrambler");

create_constant_form ("_nLTE_x5fPBCH_x5fScrambler_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPBCH_x5fScrambler_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPBCH_x5fScrambler_fCyclicPrefixSet",
	"_nLTE_x5fPBCH_x5fScrambler_fNormal",
	"_nLTE_x5fPBCH_x5fScrambler_fExtended",
	"StdForm");
create_item ("LTE_PBCH_Scrambler","PBCH Scrambler",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PBCH_Scrambler",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPBCH_x5fScrambler_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PBCH_Scrambler",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPBCH_x5fScrambler_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPBCH_x5fScrambler_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("LTE, Signaling","LTE, Signaling","LTE_PBCH_Scrambler");
palette_group("LTE, Signaling","LTE, Signaling","LTE_PBCH_Scrambler");

create_constant_form ("_nLTE_x5fPBCH_x5fRateMatch_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPBCH_x5fRateMatch_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPBCH_x5fRateMatch_fCyclicPrefixSet",
	"_nLTE_x5fPBCH_x5fRateMatch_fNormal",
	"_nLTE_x5fPBCH_x5fRateMatch_fExtended",
	"StdForm");
create_item ("LTE_PBCH_RateMatch","PBCH Rate Matcher",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PBCH_RateMatch",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPBCH_x5fRateMatch_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PBCH_RateMatch",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPBCH_x5fRateMatch_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPBCH_x5fRateMatch_fNormal","Normal")),
	create_parm ("BCH_BlockSize","Transport block size for BCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","24")));
library_group("LTE, Signaling","LTE, Signaling","LTE_PBCH_RateMatch");
palette_group("LTE, Signaling","LTE, Signaling","LTE_PBCH_RateMatch");

create_constant_form ("_nLTE_x5fPBCH_x5fCRC_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fPBCH_x5fCRC_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fPBCH_x5fCRC_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fPBCH_x5fCRC_fNumTxAntsSet",
	"_nLTE_x5fPBCH_x5fCRC_fTx1",
	"_nLTE_x5fPBCH_x5fCRC_fTx2",
	"_nLTE_x5fPBCH_x5fCRC_fTx4",
	"StdForm");
create_item ("LTE_PBCH_CRC","PBCH CRC Encoder",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PBCH_CRC",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPBCH_x5fCRC_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PBCH_CRC",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fPBCH_x5fCRC_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPBCH_x5fCRC_fTx1","Tx1")),
	create_parm ("BCH_BlockSize","transport block size for BCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","24")));
library_group("LTE, Signaling","LTE, Signaling","LTE_PBCH_CRC");
palette_group("LTE, Signaling","LTE, Signaling","LTE_PBCH_CRC");

create_constant_form ("_nLTE_x5fDL_x5fHI_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fHI_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fHI_fFrameModeSet",
	"_nLTE_x5fDL_x5fHI_fFDD",
	"_nLTE_x5fDL_x5fHI_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fHI_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fHI_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fHI_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fHI_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fHI_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fHI_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fHI_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fHI_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fHI_fConfig_x5f0",
	"_nLTE_x5fDL_x5fHI_fConfig_x5f1",
	"_nLTE_x5fDL_x5fHI_fConfig_x5f2",
	"_nLTE_x5fDL_x5fHI_fConfig_x5f3",
	"_nLTE_x5fDL_x5fHI_fConfig_x5f4",
	"_nLTE_x5fDL_x5fHI_fConfig_x5f5",
	"_nLTE_x5fDL_x5fHI_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fHI_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fHI_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fHI_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fHI_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fHI_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fHI_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fHI_fBandwidthSet",
	"_nLTE_x5fDL_x5fHI_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fHI_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fHI_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fHI_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fHI_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fHI_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fHI_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fHI_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fHI_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fHI_fNormal",
	"_nLTE_x5fDL_x5fHI_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fHI_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fHI_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fHI_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fHI_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fHI_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fHI_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fHI_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fHI_fNg_x5f1",
	"_nLTE_x5fDL_x5fHI_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fHI_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fHI_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fHI_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fHI_fNO",
	"_nLTE_x5fDL_x5fHI_fYES",
	"StdForm");
create_item ("LTE_DL_HI","HARQ ACK/NACK generator in one radio frame",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_HI",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fHI_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_HI",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fHI_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fHI_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fHI_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fHI_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fHI_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fHI_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fHI_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fHI_fNormal","Normal")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fHI_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fHI_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("HI","physical hybrid-ARQ ACK/NAK indicators",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1,-1, -1, -1, -1, -1, -1, -1}")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fHI_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fHI_fNO","NO")));
library_group("LTE, Signaling","LTE, Signaling","LTE_DL_HI");
palette_group("LTE, Signaling","LTE, Signaling","LTE_DL_HI");

create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fFrameModeSet",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fFDD",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f0",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f1",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f2",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f3",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f4",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f5",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBandwidthSet",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTx1",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTx2",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNormal",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNg_x5f1",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNO",
	"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fYES",
	"StdForm");
create_item ("LTE_DL_DCI_RateMatch","Downlink Control Information Rate Matcher",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_DCI_RateMatch",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fDCI_x5fRateMatch_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_DCI_RateMatch",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNormal","Normal")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fRateMatch_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fRateMatch_fNO","NO")));
library_group("LTE, Signaling","LTE, Signaling","LTE_DL_DCI_RateMatch");
palette_group("LTE, Signaling","LTE, Signaling","LTE_DL_DCI_RateMatch");

create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fCRC_fFrameModeSet",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fFDD",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fCRC_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f0",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f1",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f2",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f3",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f4",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f5",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fCRC_fBandwidthSet",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fCRC_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fTx1",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fTx2",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fCRC_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fNormal",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fNon_x5fconfig", 
	"Non_config",
	0,
	"0",
	"Non_config");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fPort0", 
	"Port0",
	0,
	"1",
	"Port0");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fPort1", 
	"Port1",
	0,
	"2",
	"Port1");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fCRC_fUE_x5fTxAntSelectionSet",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fNon_x5fconfig",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fPort0",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fPort1",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fCRC_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fNg_x5f1",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fCRC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fCRC_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fNO",
	"_nLTE_x5fDL_x5fDCI_x5fCRC_fYES",
	"StdForm");
create_item ("LTE_DL_DCI_CRC","Downlink Control Information CRC Encoder",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_DCI_CRC",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fDCI_x5fCRC_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_DCI_CRC",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fCRC_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fCRC_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fCRC_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fCRC_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fCRC_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fCRC_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fCRC_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fCRC_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fCRC_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fCRC_fNormal","Normal")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("UE_TxAntSelection","UE transmit antenna selection is not configured or applicable or UE port0 or UE port1",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fCRC_fUE_x5fTxAntSelectionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fCRC_fNon_x5fconfig","Non_config")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fCRC_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fCRC_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fCRC_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fCRC_fNO","NO")));
library_group("LTE, Signaling","LTE, Signaling","LTE_DL_DCI_CRC");
palette_group("LTE, Signaling","LTE, Signaling","LTE_DL_DCI_CRC");

create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fFrameModeSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fFDD",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f0", 
	"Config 0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f1", 
	"Config 1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f2", 
	"Config 2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f3", 
	"Config 3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f4", 
	"Config 4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f5", 
	"Config 5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f6", 
	"Config 6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f0",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f1",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f2",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f3",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f4",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f5",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig0",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig1",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig2",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig3",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig4",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig5",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig6",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig7",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f1_x5f4_x5fMHz", 
	"BW 1.4 MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f3_x5fMHz", 
	"BW 3 MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f5_x5fMHz", 
	"BW 5 MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f10_x5fMHz", 
	"BW 10 MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f15_x5fMHz", 
	"BW 15 MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f20_x5fMHz", 
	"BW 20 MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fBandwidthSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fTx1",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fTx2",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fNormal",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fNg_x5f1_x5f6", 
	"Ng 1/6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fNg_x5f1_x5f2", 
	"Ng 1/2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fNg_x5f1", 
	"Ng 1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fNg_x5f2", 
	"Ng 2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fNg_x5f1",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fSRS_x5fEnableSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fNO",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fPUSCH_x5fRB_x5fHoppingSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fNO",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fStartRB_x5f_x5f_x5fNumRBs", 
	"StartRB + NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fRB_x5findices_x5f_x5f1D_x5f", 
	"RB indices (1D)",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fRB_x5findices_x5f_x5f2D_x5f", 
	"RB indices (2D)",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fPUSCH_x5fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fStartRB_x5f_x5f_x5fNumRBs",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fRB_x5findices_x5f_x5f1D_x5f",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fRB_x5findices_x5f_x5f2D_x5f",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fMCS_x5findex", 
	"MCS index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fTransport_x5fblock_x5fsize", 
	"Transport block size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fCode_x5frate", 
	"Code rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fPUSCH_x5fConfigSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fMCS_x5findex",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fDistributed", 
	"Distributed",
	0,
	"1",
	"Distributed");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fPDSCH_x5fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fLocalized",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fDistributed",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fStartRB_x5f_x5f_x5fNumRBs", 
	"StartRB + NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fRB_x5findices_x5f_x5f1D_x5f", 
	"RB indices (1D)",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fRB_x5findices_x5f_x5f2D_x5f", 
	"RB indices (2D)",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fPDSCH_x5fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fStartRB_x5f_x5f_x5fNumRBs",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fRB_x5findices_x5f_x5f1D_x5f",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fRB_x5findices_x5f_x5f2D_x5f",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fMCS_x5findex", 
	"MCS index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fTransport_x5fblock_x5fsize", 
	"Transport block size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fCode_x5frate", 
	"Code rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fPDSCH_x5fConfigSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fMCS_x5findex",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fMIMO_x5fModeSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fSpatial_x5fMux",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fLarge_x5fDelay", 
	"Large-Delay",
	0,
	"0",
	"Large-Delay");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fZero_x5fDelay", 
	"Zero-Delay",
	0,
	"1",
	"Zero-Delay");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fCDD_x5fModeSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fLarge_x5fDelay",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fZero_x5fDelay",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fDCI_x5fGen_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fDCI_x5fGen_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fNO",
	"_nLTE_x5fDL_x5fDCI_x5fGen_fYES",
	"StdForm");
create_item ("LTE_DL_DCI_Gen","Downlink Control Information Generator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_DCI_Gen",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fDCI_x5fGen_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_DCI_Gen",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("SystemParameters","system parameters for LTE",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fNormal","Normal")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fNO","NO")),
	create_parm ("SRS_SF_Config","the cell-specific SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("DCI_Format0","parameters for DCI Format 0",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUSCH_RB_Hopping","whether uplink frequency-hopping is enabled for the mapping of VRBs to PRBs for PUSCH",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fPUSCH_x5fRB_x5fHoppingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fNO","NO")),
	create_parm ("PUSCH_Hop_bit","used to fill the hopping bit or bits in PDCCH DCI Format 0",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PUSCH_RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fPUSCH_x5fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fStartRB_x5f_x5f_x5fNumRBs","StartRB___NumRBs")),
	create_parm ("PUSCH_RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[[SF0 start RB, SF0 number of RBs], ..., [SF9 start RB, SF9 number of RBs]]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PUSCH_Config","the configuration mode of input data for PUSCH",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fPUSCH_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fMCS_x5findex","MCS_index")),
	create_parm ("PUSCH_Payload","the input payload for PUSCH, the meaning of the input is defined in PUSCH_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PUSCH_MappingType","the modulation orders for the PUSCH in each DCI",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PUSCH_NewDataIndic","New data indicator for each DCI",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1,1,1,1,1,1,1,1,1,1}")),
	create_parm ("PUSCH_TPC_cmd","TPC command for scheduled PUSCH for each DCI",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PUSCH_n_DMRS2","used in computing the cyclic shift for PUSCH DMRS for each DCI",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("UL_Idx_DAI","UL index which only applies to TDD operation",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PUSCH_CQI","CQI request",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("DCI_Format_1_1A","parameters for DCI Format 1 and 1A",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDSCH_RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fPDSCH_x5fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fLocalized","Localized")),
	create_parm ("PDSCH_ResAllocType","Resource allocation type",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PDSCH_RBG_Subset","RBG subset, active when PDSCH_ResAllocType is 1",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PDSCH_ResAllocShift","indicate a shift of the resource allocation span within a subset, active when PDSCH_ResAllocType is 1",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PDSCH_RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fPDSCH_x5fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fStartRB_x5f_x5f_x5fNumRBs","StartRB___NumRBs")),
	create_parm ("PDSCH_RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDSCH_Config","the configuration mode of input data for PDSCH",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fPDSCH_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fMCS_x5findex","MCS_index")),
	create_parm ("PDSCH_Payload","the input payload for PDSCH, the meaning of the input is defined in PDSCH_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PDSCH_MappingType","the modulation orders for the PDSCH in each DCI",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PDSCH_HARQ_ProcNum","HARQ process number for each DCI",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PDSCH_NewDataIndic","New data indicator for each DCI",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1,1,1,1,1,1,1,1,1,1}")),
	create_parm ("PDSCH_RV","Redundancy version for each DCI",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PUCCH_TPC_cmd","TPC command for scheduled PUCCH for each DCI",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("DL_Idx","DL index which only applies to TDD operation",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("DCI_Format1B","parameters for DCI Format 1B",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PDSCH_PMI_Confirm","PMI confirmation for precoding",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("DCI_Format1D","parameters for DCI Format 1D",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("DL_PwrOffset","downlink power offset",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("DCI_Format_2_2A","parameters for DCI Format 2 and 2A",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("CDD_Mode","cyclic delay diversity (CDD) mode, valid when MIMO_Mode is Spatial_Mux",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fCDD_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fLarge_x5fDelay","Large_Delay")),
	create_parm ("CdBlk_Index","codebook index for precoding, valid when MIMO_Mode is Spatial_Mux",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("DL_TB2CW_Swap","Transport block to codeword swap",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("PDSCH_UE_NumOfCWs","number of code words for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PDSCH_UE_NumOfLayers","number of layers for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fDCI_x5fGen_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDCI_x5fGen_fNO","NO")));
library_group("LTE, Signaling","LTE, Signaling","LTE_DL_DCI_Gen");
palette_group("LTE, Signaling","LTE, Signaling","LTE_DL_DCI_Gen");

create_constant_form ("_nLTE_x5fDL_x5fCFI_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fCFI_fFrameModeSet",
	"_nLTE_x5fDL_x5fCFI_fFDD",
	"_nLTE_x5fDL_x5fCFI_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fCFI_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fCFI_fConfig_x5f0",
	"_nLTE_x5fDL_x5fCFI_fConfig_x5f1",
	"_nLTE_x5fDL_x5fCFI_fConfig_x5f2",
	"_nLTE_x5fDL_x5fCFI_fConfig_x5f3",
	"_nLTE_x5fDL_x5fCFI_fConfig_x5f4",
	"_nLTE_x5fDL_x5fCFI_fConfig_x5f5",
	"_nLTE_x5fDL_x5fCFI_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fCFI_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fCFI_fBandwidthSet",
	"_nLTE_x5fDL_x5fCFI_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fCFI_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fCFI_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fCFI_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fCFI_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fCFI_fBW_x5f20_x5fMHz",
	"StdForm");
create_item ("LTE_DL_CFI","Downlink Control Format Indicator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_CFI",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fCFI_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_CFI",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fCFI_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fCFI_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fCFI_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fCFI_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fCFI_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fCFI_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")));
library_group("LTE, Signaling","LTE, Signaling","LTE_DL_CFI");
palette_group("LTE, Signaling","LTE, Signaling","LTE_DL_CFI");

create_constant_form ("_nLTE_x5fConvCoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fConvCoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fConvCoder_fFrameModeSet",
	"_nLTE_x5fConvCoder_fFDD",
	"_nLTE_x5fConvCoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fConvCoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fConvCoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fConvCoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fConvCoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fConvCoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fConvCoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fConvCoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fConvCoder_fTDD_x5fConfigSet",
	"_nLTE_x5fConvCoder_fConfig_x5f0",
	"_nLTE_x5fConvCoder_fConfig_x5f1",
	"_nLTE_x5fConvCoder_fConfig_x5f2",
	"_nLTE_x5fConvCoder_fConfig_x5f3",
	"_nLTE_x5fConvCoder_fConfig_x5f4",
	"_nLTE_x5fConvCoder_fConfig_x5f5",
	"_nLTE_x5fConvCoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fConvCoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fConvCoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fConvCoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fConvCoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fConvCoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fConvCoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fConvCoder_fBandwidthSet",
	"_nLTE_x5fConvCoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fConvCoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fConvCoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fConvCoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fConvCoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fConvCoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fConvCoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fConvCoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fConvCoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fConvCoder_fNumTxAntsSet",
	"_nLTE_x5fConvCoder_fTx1",
	"_nLTE_x5fConvCoder_fTx2",
	"_nLTE_x5fConvCoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fConvCoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fConvCoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fConvCoder_fCyclicPrefixSet",
	"_nLTE_x5fConvCoder_fNormal",
	"_nLTE_x5fConvCoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fConvCoder_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fConvCoder_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fConvCoder_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fConvCoder_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fConvCoder_fPHICH_x5fNgSet",
	"_nLTE_x5fConvCoder_fNg_x5f1_x5f6",
	"_nLTE_x5fConvCoder_fNg_x5f1_x5f2",
	"_nLTE_x5fConvCoder_fNg_x5f1",
	"_nLTE_x5fConvCoder_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fConvCoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fConvCoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fConvCoder_fETM_x5fSupportSet",
	"_nLTE_x5fConvCoder_fNO",
	"_nLTE_x5fConvCoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fConvCoder_fBCH", 
	"BCH",
	0,
	"0",
	"BCH");
create_constant_form ("_nLTE_x5fConvCoder_fPDCCH", 
	"PDCCH",
	0,
	"1",
	"PDCCH");
create_constant_form ("_nLTE_x5fConvCoder_fOthers", 
	"Others",
	0,
	"2",
	"Others");
create_form_set("_nLTE_x5fConvCoder_fChannelTypeSet",
	"_nLTE_x5fConvCoder_fBCH",
	"_nLTE_x5fConvCoder_fPDCCH",
	"_nLTE_x5fConvCoder_fOthers",
	"StdForm");
create_item ("LTE_ConvCoder","Downlink convolutional coding",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_ConvCoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fConvCoder_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_ConvCoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("InfoBitsSize","Information bits size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","40")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fConvCoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fConvCoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fConvCoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fConvCoder_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fConvCoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fConvCoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fConvCoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fConvCoder_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fConvCoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fConvCoder_fNormal","Normal")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PDCCH_UE_AggreLevel","the aggregation levels of UE-specific PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1}")),
	create_parm ("PDCCH_UE_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, -1, -1, -1, -1, -1}")),
	create_parm ("PDCCH_Common_AggreLevel","the aggregation levels of Common PDCCH search space for every subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{4}")),
	create_parm ("PDCCH_Common_DCI_Formats","the DCI Formats of the PDCCH candidates for every subframe (-1 means no DCI in corresponding candidate)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-1, -1, -1, -1}")),
	create_parm ("UE_n_RNTI","Radio network temporary identifier for UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fConvCoder_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fConvCoder_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fConvCoder_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fConvCoder_fNO","NO")),
	create_parm ("ChannelType","the channel type to be coded",
		PARM_INT,
		"_nLTE_x5fConvCoder_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fConvCoder_fBCH","BCH")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_ConvCoder");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_ConvCoder");

create_constant_form ("_nLTE_x5fSpecShaping_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fSpecShaping_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fSpecShaping_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fSpecShaping_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fSpecShaping_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fSpecShaping_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fSpecShaping_fBandwidthSet",
	"_nLTE_x5fSpecShaping_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fSpecShaping_fBW_x5f3_x5fMHz",
	"_nLTE_x5fSpecShaping_fBW_x5f5_x5fMHz",
	"_nLTE_x5fSpecShaping_fBW_x5f10_x5fMHz",
	"_nLTE_x5fSpecShaping_fBW_x5f15_x5fMHz",
	"_nLTE_x5fSpecShaping_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fSpecShaping_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fSpecShaping_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fSpecShaping_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fSpecShaping_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fSpecShaping_fOversamplingOptionSet",
	"_nLTE_x5fSpecShaping_fRatio_x5f1",
	"_nLTE_x5fSpecShaping_fRatio_x5f2",
	"_nLTE_x5fSpecShaping_fRatio_x5f4",
	"_nLTE_x5fSpecShaping_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fSpecShaping_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fSpecShaping_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fSpecShaping_fCyclicPrefixSet",
	"_nLTE_x5fSpecShaping_fNormal",
	"_nLTE_x5fSpecShaping_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fSpecShaping_fTimeWindowing", 
	"TimeWindowing",
	0,
	"0",
	"TimeWindowing");
create_constant_form ("_nLTE_x5fSpecShaping_fFIRFilter", 
	"FIRFilter",
	0,
	"1",
	"FIRFilter");
create_form_set("_nLTE_x5fSpecShaping_fSpectrumShapingTypeSet",
	"_nLTE_x5fSpecShaping_fTimeWindowing",
	"_nLTE_x5fSpecShaping_fFIRFilter",
	"StdForm");
create_constant_form ("_nLTE_x5fSpecShaping_fTukey", 
	"Tukey",
	0,
	"0",
	"Tukey");
create_constant_form ("_nLTE_x5fSpecShaping_fRaised_x5fcosine", 
	"Raised_cosine",
	0,
	"1",
	"Raised cosine");
create_form_set("_nLTE_x5fSpecShaping_fWindowTypeSet",
	"_nLTE_x5fSpecShaping_fTukey",
	"_nLTE_x5fSpecShaping_fRaised_x5fcosine",
	"StdForm");
create_constant_form ("_nLTE_x5fSpecShaping_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fSpecShaping_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fSpecShaping_fFIR_x5fwithInterpSet",
	"_nLTE_x5fSpecShaping_fNO",
	"_nLTE_x5fSpecShaping_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fSpecShaping_fRRC", 
	"RRC",
	0,
	"0",
	"RRC");
create_constant_form ("_nLTE_x5fSpecShaping_fIdeal_x5fLowpass", 
	"Ideal_Lowpass",
	0,
	"1",
	"Ideal Lowpass");
create_form_set("_nLTE_x5fSpecShaping_fFIR_x5fFilterTypeSet",
	"_nLTE_x5fSpecShaping_fRRC",
	"_nLTE_x5fSpecShaping_fIdeal_x5fLowpass",
	"StdForm");
create_item ("LTE_SpecShaping","LTE Spectrum Shaper",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_SpecShaping",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fSpecShaping_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_SpecShaping",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fSpecShaping_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSpecShaping_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fSpecShaping_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSpecShaping_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fSpecShaping_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSpecShaping_fNormal","Normal")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("SpectrumShapingType","spectrum shaping method",
		PARM_INT,
		"_nLTE_x5fSpecShaping_fSpectrumShapingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSpecShaping_fTimeWindowing","TimeWindowing")),
	create_parm ("WindowType","type of time transition windowing between two consecutive symbols, valid when SpectrumShapingType=TimeWindowing",
		PARM_INT,
		"_nLTE_x5fSpecShaping_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSpecShaping_fTukey","Tukey")),
	create_parm ("CyclicInterval","the overlapped cyclic interval between two adjacent symbols in unit of chips (without oversampling), valid when SpectrumShapingType=TimeWindowing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("CI_StartPos","the start position of cyclic interval (without oversampling), compared to the start position of CP (negative means ahead of CP)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3")),
	create_parm ("FIR_Taps","number of FIR filter taps, valid when SpectrumShapingType=FIRFilter",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("FIR_withInterp","whether spectrum-shaping FIR filter with interpolation operation or not, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fSpecShaping_fFIR_x5fwithInterpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSpecShaping_fNO","NO")),
	create_parm ("FIR_FilterType","spectrum-shaping FIR filter type, valid when SpectrumShapingType=FIRFilter",
		PARM_INT,
		"_nLTE_x5fSpecShaping_fFIR_x5fFilterTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fSpecShaping_fRRC","RRC")),
	create_parm ("RRC_Alpha","roll-off factor for root raised-cosine filter, valid when SpectrumShapingType=FIRFilter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm",".22")));
library_group("LTE, Modulation","LTE, Modulation","LTE_SpecShaping");
palette_group("LTE, Modulation","LTE, Modulation","LTE_SpecShaping");

create_item ("LTE_DL_MIMO_4Ant_Src_RangeCheck","LTE downlink MIMO 2Ants signal source range check",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MIMO_4Ant_Src_RangeCheck",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMIMO_x5f4Ant_x5fSrc_x5fRangeCheck_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_RangeCheck",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Testing (for development use only)","Testing (for development use only)","LTE_DL_MIMO_4Ant_Src_RangeCheck");
palette_group("Testing (for development use only)","Testing (for development use only)","LTE_DL_MIMO_4Ant_Src_RangeCheck");

create_item ("LTE_DL_MIMO_2Ant_Src_RangeCheck","LTE downlink MIMO 2Ants signal source range check",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MIMO_2Ant_Src_RangeCheck",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMIMO_x5f2Ant_x5fSrc_x5fRangeCheck_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_RangeCheck",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Testing (for development use only)","Testing (for development use only)","LTE_DL_MIMO_2Ant_Src_RangeCheck");
palette_group("Testing (for development use only)","Testing (for development use only)","LTE_DL_MIMO_2Ant_Src_RangeCheck");

create_item ("LTE_DL_Src_RangeCheck","LTE downlink signal source range check",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_Src_RangeCheck",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fSrc_x5fRangeCheck_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_RangeCheck",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Testing (for development use only)","Testing (for development use only)","LTE_DL_Src_RangeCheck");
palette_group("Testing (for development use only)","Testing (for development use only)","LTE_DL_Src_RangeCheck");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig0",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig1",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig2",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig3",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig4",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig5",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig6",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig7",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTx1",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTx2",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRx1",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRx2",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fMIMO_x5fModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fSpatial_x5fMux",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fLarge_x5fDelay", 
	"Large-Delay",
	0,
	"0",
	"Large-Delay");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fZero_x5fDelay", 
	"Zero-Delay",
	0,
	"1",
	"Zero-Delay");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fCDD_x5fModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fLarge_x5fDelay",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fZero_x5fDelay",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPDSCH", 
	"PDSCH",
	0,
	"0",
	"PDSCH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPCFICH", 
	"PCFICH",
	0,
	"1",
	"PCFICH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPDCCH", 
	"PDCCH",
	0,
	"2",
	"PDCCH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPBCH", 
	"PBCH",
	0,
	"3",
	"PBCH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fSS", 
	"SS",
	0,
	"4",
	"SS");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fChannelTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPDSCH",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPCFICH",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPDCCH",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPBCH",
	"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fSS",
	"StdForm");
create_item ("LTE_DL_MIMO_Deprecoder","Downlink MIMO Deprecoder",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MIMO_Deprecoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_MIMO_Deprecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fTx1","Tx1")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRx1","Rx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNO","NO")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("CDD_Mode","cyclic delay diversity (CDD) mode, valid when MIMO_Mode is Spatial_Mux",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fCDD_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fLarge_x5fDelay","Large_Delay")),
	create_parm ("CdBlk_Index","codebook index for precoding, valid when MIMO_Mode is Spatial_Mux",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumOfLayers","number of layers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fNO","NO")),
	create_parm ("ChannelType","Physical Channel Type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDeprecoder_fPDSCH","PDSCH")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_Deprecoder");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_Deprecoder");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig0",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig1",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig2",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig3",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig4",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig5",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig6",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig7",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTx1",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTx2",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRx1",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRx2",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fDistributed", 
	"Distributed",
	0,
	"1",
	"Distributed");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fLocalized",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fDistributed",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fYES",
	"StdForm");
create_item ("LTE_DL_MIMO_DemuxCIR","Downlink CIR De-multiplexer in one radio frame",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MIMO_DemuxCIR",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_MIMO_DemuxCIR",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fTx1","Tx1")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRx1","Rx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fLocalized","Localized")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fDemuxCIR_fNO","NO")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_MIMO_DemuxCIR");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_MIMO_DemuxCIR");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRx1",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRx2",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fCross_x5fCorrelation", 
	"Cross-Correlation",
	0,
	"0",
	"Cross-Correlation");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fAuto_x5fCorrelation", 
	"Auto-Correlation",
	0,
	"1",
	"Auto-Correlation");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fSyncTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fCross_x5fCorrelation",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fAuto_x5fCorrelation",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fSearch_x5fevery_x5fframe", 
	"Search every frame",
	0,
	"0",
	"Search every frame");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fSearch_x5fTrack", 
	"Search+Track",
	0,
	"1",
	"Search+Track");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fSearchTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fSearch_x5fevery_x5fframe",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fSearch_x5fTrack",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fnon", 
	"non",
	0,
	"0",
	"non");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_f_x5f100Hz", 
	"<100Hz",
	0,
	"1",
	"<100Hz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_f_x5f15kHz", 
	"<15kHz",
	0,
	"2",
	"<15kHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_f_x5f35kHz", 
	"<35kHz",
	0,
	"3",
	"<35kHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fFreqSyncSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fnon",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_f_x5f100Hz",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_f_x5f15kHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_f_x5f35kHz",
	"StdForm");
create_item ("LTE_DL_MIMO_FrameSync","Downlink time and frequency synchronizer in time domain",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MIMO_FrameSync",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMIMO_x5fFrameSync_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_MIMO_FrameSync",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRx1","Rx1")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fNormal","Normal")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("SyncType","synchronization type indicating using PSS cross-correlation between two received PSSs or auto-correlation between receiv...(Press Help for more info)",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fSyncTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fCross_x5fCorrelation","Cross_Correlation")),
	create_parm ("SearchType","start a new timing and frequence synchronization search for every frame or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fSearchTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fSearch_x5fTrack","Search_Track")),
	create_parm ("SearchRange","timing and frequence synchronization searching range for the first frame",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","3 msec")),
	create_parm ("TrackRange","timing and frequence synchronization tracking range for the frames except the first frame, valid when SearchType is set to Search+Track",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.1 msec")),
	create_parm ("FreqSync","frequency estimation range select",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFrameSync_fFreqSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFrameSync_f_x5f15kHz","_15kHz")));
library_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_DL_MIMO_FrameSync");
palette_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_DL_MIMO_FrameSync");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRx1",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRx2",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fSyncPerPort", 
	"SyncPerPort",
	0,
	"0",
	"SyncPerPort");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fAverageSync", 
	"AverageSync",
	0,
	"1",
	"AverageSync");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fSync_x5fModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fSyncPerPort",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fAverageSync",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fnon", 
	"non",
	0,
	"0",
	"non");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_f_x5f100Hz", 
	"<100Hz",
	0,
	"1",
	"<100Hz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_f_x5f15kHz", 
	"<15kHz",
	0,
	"2",
	"<15kHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_f_x5f35kHz", 
	"<35kHz",
	0,
	"3",
	"<35kHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fFreqSyncSet",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fnon",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_f_x5f100Hz",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_f_x5f15kHz",
	"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_f_x5f35kHz",
	"StdForm");
create_item ("LTE_DL_MIMO_FreqSync","Timing and freqency estimation in freqency domain",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MIMO_FreqSync",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMIMO_x5fFreqSync_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_MIMO_FreqSync",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRx1","Rx1")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fNormal","Normal")),
	create_parm ("Sync_Mode","synchronization for every port or one synchronization for all ports",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fSync_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fSyncPerPort","SyncPerPort")),
	create_parm ("FreqSync","frequency estimation range select",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fFreqSync_fFreqSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fFreqSync_f_x5f15kHz","_15kHz")));
library_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_DL_MIMO_FreqSync");
palette_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_DL_MIMO_FreqSync");

create_item ("LTE_DL_MIMO_LayerDemapper","Downlink MIMO Layer Demapper",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MIMO_LayerDemapper",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMIMO_x5fLayerDemapper_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_MIMO_LayerDemapper",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("NumOfCWs","number of code words",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("NumOfLayers","number of layers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_LayerDemapper");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_LayerDemapper");

create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPHICH_x5fDeprecoder_fFrameModeSet",
	"_nLTE_x5fPHICH_x5fDeprecoder_fFDD",
	"_nLTE_x5fPHICH_x5fDeprecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPHICH_x5fDeprecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f0",
	"_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f1",
	"_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f2",
	"_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f3",
	"_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f4",
	"_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f5",
	"_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPHICH_x5fDeprecoder_fBandwidthSet",
	"_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fPHICH_x5fDeprecoder_fNumTxAntsSet",
	"_nLTE_x5fPHICH_x5fDeprecoder_fTx1",
	"_nLTE_x5fPHICH_x5fDeprecoder_fTx2",
	"_nLTE_x5fPHICH_x5fDeprecoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fPHICH_x5fDeprecoder_fNumRxAntsSet",
	"_nLTE_x5fPHICH_x5fDeprecoder_fRx1",
	"_nLTE_x5fPHICH_x5fDeprecoder_fRx2",
	"_nLTE_x5fPHICH_x5fDeprecoder_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPHICH_x5fDeprecoder_fCyclicPrefixSet",
	"_nLTE_x5fPHICH_x5fDeprecoder_fNormal",
	"_nLTE_x5fPHICH_x5fDeprecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPHICH_x5fDeprecoder_fPHICH_x5fNgSet",
	"_nLTE_x5fPHICH_x5fDeprecoder_fNg_x5f1_x5f6",
	"_nLTE_x5fPHICH_x5fDeprecoder_fNg_x5f1_x5f2",
	"_nLTE_x5fPHICH_x5fDeprecoder_fNg_x5f1",
	"_nLTE_x5fPHICH_x5fDeprecoder_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPHICH_x5fDeprecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPHICH_x5fDeprecoder_fETM_x5fSupportSet",
	"_nLTE_x5fPHICH_x5fDeprecoder_fNO",
	"_nLTE_x5fPHICH_x5fDeprecoder_fYES",
	"StdForm");
create_item ("LTE_PHICH_Deprecoder","PHICH Deprecoder",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PHICH_Deprecoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPHICH_x5fDeprecoder_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PHICH_Deprecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDeprecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDeprecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDeprecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDeprecoder_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDeprecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDeprecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDeprecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDeprecoder_fTx1","Tx1")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDeprecoder_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDeprecoder_fRx1","Rx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDeprecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDeprecoder_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDeprecoder_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDeprecoder_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDeprecoder_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDeprecoder_fNO","NO")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_Deprecoder");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_Deprecoder");

create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPHICH_x5fLayerDemapper_fFrameModeSet",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fFDD",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPHICH_x5fLayerDemapper_fTDD_x5fConfigSet",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f0",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f1",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f2",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f3",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f4",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f5",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPHICH_x5fLayerDemapper_fBandwidthSet",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPHICH_x5fLayerDemapper_fCyclicPrefixSet",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fNormal",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPHICH_x5fLayerDemapper_fPHICH_x5fNgSet",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fNg_x5f1_x5f6",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fNg_x5f1_x5f2",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fNg_x5f1",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerDemapper_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPHICH_x5fLayerDemapper_fETM_x5fSupportSet",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fNO",
	"_nLTE_x5fPHICH_x5fLayerDemapper_fYES",
	"StdForm");
create_item ("LTE_PHICH_LayerDemapper","PHICH Layer Demapper",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PHICH_LayerDemapper",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPHICH_x5fLayerDemapper_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PHICH_LayerDemapper",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerDemapper_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerDemapper_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerDemapper_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerDemapper_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerDemapper_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerDemapper_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerDemapper_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerDemapper_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumOfLayers","number of layers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerDemapper_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerDemapper_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerDemapper_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerDemapper_fNO","NO")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_LayerDemapper");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_LayerDemapper");

create_item ("LTE_BusFork2","Copy particles from an input bus to each output bus",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_BusFork2",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fBusFork2_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_BusFork2",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("LTE, Multiplex","LTE, Multiplex","LTE_BusFork2");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_BusFork2");

create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPHICH_x5fDemodulator_fFrameModeSet",
	"_nLTE_x5fPHICH_x5fDemodulator_fFDD",
	"_nLTE_x5fPHICH_x5fDemodulator_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPHICH_x5fDemodulator_fTDD_x5fConfigSet",
	"_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f0",
	"_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f1",
	"_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f2",
	"_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f3",
	"_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f4",
	"_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f5",
	"_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPHICH_x5fDemodulator_fBandwidthSet",
	"_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPHICH_x5fDemodulator_fCyclicPrefixSet",
	"_nLTE_x5fPHICH_x5fDemodulator_fNormal",
	"_nLTE_x5fPHICH_x5fDemodulator_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPHICH_x5fDemodulator_fPHICH_x5fNgSet",
	"_nLTE_x5fPHICH_x5fDemodulator_fNg_x5f1_x5f6",
	"_nLTE_x5fPHICH_x5fDemodulator_fNg_x5f1_x5f2",
	"_nLTE_x5fPHICH_x5fDemodulator_fNg_x5f1",
	"_nLTE_x5fPHICH_x5fDemodulator_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPHICH_x5fDemodulator_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPHICH_x5fDemodulator_fETM_x5fSupportSet",
	"_nLTE_x5fPHICH_x5fDemodulator_fNO",
	"_nLTE_x5fPHICH_x5fDemodulator_fYES",
	"StdForm");
create_item ("LTE_PHICH_Demodulator","Downlink PHICH Demodulator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PHICH_Demodulator",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPHICH_x5fDemodulator_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PHICH_Demodulator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDemodulator_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDemodulator_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDemodulator_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDemodulator_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDemodulator_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDemodulator_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDemodulator_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDemodulator_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDemodulator_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDemodulator_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fDemodulator_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fDemodulator_fNO","NO")));
library_group("LTE, Modulation","LTE, Modulation","LTE_PHICH_Demodulator");
palette_group("LTE, Modulation","LTE, Modulation","LTE_PHICH_Demodulator");

create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPHICH_x5fModulator_fFrameModeSet",
	"_nLTE_x5fPHICH_x5fModulator_fFDD",
	"_nLTE_x5fPHICH_x5fModulator_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPHICH_x5fModulator_fTDD_x5fConfigSet",
	"_nLTE_x5fPHICH_x5fModulator_fConfig_x5f0",
	"_nLTE_x5fPHICH_x5fModulator_fConfig_x5f1",
	"_nLTE_x5fPHICH_x5fModulator_fConfig_x5f2",
	"_nLTE_x5fPHICH_x5fModulator_fConfig_x5f3",
	"_nLTE_x5fPHICH_x5fModulator_fConfig_x5f4",
	"_nLTE_x5fPHICH_x5fModulator_fConfig_x5f5",
	"_nLTE_x5fPHICH_x5fModulator_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPHICH_x5fModulator_fBandwidthSet",
	"_nLTE_x5fPHICH_x5fModulator_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPHICH_x5fModulator_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPHICH_x5fModulator_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPHICH_x5fModulator_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPHICH_x5fModulator_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPHICH_x5fModulator_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPHICH_x5fModulator_fCyclicPrefixSet",
	"_nLTE_x5fPHICH_x5fModulator_fNormal",
	"_nLTE_x5fPHICH_x5fModulator_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPHICH_x5fModulator_fPHICH_x5fNgSet",
	"_nLTE_x5fPHICH_x5fModulator_fNg_x5f1_x5f6",
	"_nLTE_x5fPHICH_x5fModulator_fNg_x5f1_x5f2",
	"_nLTE_x5fPHICH_x5fModulator_fNg_x5f1",
	"_nLTE_x5fPHICH_x5fModulator_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPHICH_x5fModulator_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPHICH_x5fModulator_fETM_x5fSupportSet",
	"_nLTE_x5fPHICH_x5fModulator_fNO",
	"_nLTE_x5fPHICH_x5fModulator_fYES",
	"StdForm");
create_item ("LTE_PHICH_Modulator","Downlink PHICH Modulator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PHICH_Modulator",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPHICH_x5fModulator_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PHICH_Modulator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fModulator_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fModulator_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fModulator_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fModulator_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fModulator_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fModulator_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fModulator_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fModulator_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fModulator_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fModulator_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fModulator_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fModulator_fNO","NO")));
library_group("LTE, Modulation","LTE, Modulation","LTE_PHICH_Modulator");
palette_group("LTE, Modulation","LTE, Modulation","LTE_PHICH_Modulator");

create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPHICH_x5fLayerMapper_fFrameModeSet",
	"_nLTE_x5fPHICH_x5fLayerMapper_fFDD",
	"_nLTE_x5fPHICH_x5fLayerMapper_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPHICH_x5fLayerMapper_fTDD_x5fConfigSet",
	"_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f0",
	"_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f1",
	"_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f2",
	"_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f3",
	"_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f4",
	"_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f5",
	"_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPHICH_x5fLayerMapper_fBandwidthSet",
	"_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPHICH_x5fLayerMapper_fCyclicPrefixSet",
	"_nLTE_x5fPHICH_x5fLayerMapper_fNormal",
	"_nLTE_x5fPHICH_x5fLayerMapper_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPHICH_x5fLayerMapper_fPHICH_x5fNgSet",
	"_nLTE_x5fPHICH_x5fLayerMapper_fNg_x5f1_x5f6",
	"_nLTE_x5fPHICH_x5fLayerMapper_fNg_x5f1_x5f2",
	"_nLTE_x5fPHICH_x5fLayerMapper_fNg_x5f1",
	"_nLTE_x5fPHICH_x5fLayerMapper_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPHICH_x5fLayerMapper_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPHICH_x5fLayerMapper_fETM_x5fSupportSet",
	"_nLTE_x5fPHICH_x5fLayerMapper_fNO",
	"_nLTE_x5fPHICH_x5fLayerMapper_fYES",
	"StdForm");
create_item ("LTE_PHICH_LayerMapper","PHICH Layer Mapper",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PHICH_LayerMapper",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPHICH_x5fLayerMapper_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PHICH_LayerMapper",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerMapper_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerMapper_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerMapper_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerMapper_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerMapper_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerMapper_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerMapper_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerMapper_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumOfLayers","number of layers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerMapper_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerMapper_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fLayerMapper_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fLayerMapper_fNO","NO")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_LayerMapper");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_LayerMapper");

create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fPHICH_x5fPrecoder_fFrameModeSet",
	"_nLTE_x5fPHICH_x5fPrecoder_fFDD",
	"_nLTE_x5fPHICH_x5fPrecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fPHICH_x5fPrecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f0",
	"_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f1",
	"_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f2",
	"_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f3",
	"_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f4",
	"_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f5",
	"_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fPHICH_x5fPrecoder_fBandwidthSet",
	"_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fPHICH_x5fPrecoder_fNumTxAntsSet",
	"_nLTE_x5fPHICH_x5fPrecoder_fTx1",
	"_nLTE_x5fPHICH_x5fPrecoder_fTx2",
	"_nLTE_x5fPHICH_x5fPrecoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fPHICH_x5fPrecoder_fCyclicPrefixSet",
	"_nLTE_x5fPHICH_x5fPrecoder_fNormal",
	"_nLTE_x5fPHICH_x5fPrecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fPHICH_x5fPrecoder_fPHICH_x5fNgSet",
	"_nLTE_x5fPHICH_x5fPrecoder_fNg_x5f1_x5f6",
	"_nLTE_x5fPHICH_x5fPrecoder_fNg_x5f1_x5f2",
	"_nLTE_x5fPHICH_x5fPrecoder_fNg_x5f1",
	"_nLTE_x5fPHICH_x5fPrecoder_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fPHICH_x5fPrecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fPHICH_x5fPrecoder_fETM_x5fSupportSet",
	"_nLTE_x5fPHICH_x5fPrecoder_fNO",
	"_nLTE_x5fPHICH_x5fPrecoder_fYES",
	"StdForm");
create_item ("LTE_PHICH_Precoder","PHICH Precoder",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PHICH_Precoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPHICH_x5fPrecoder_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PHICH_Precoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fPrecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fPrecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fPrecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fPrecoder_fConfig_x5f0","Config_0")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fPrecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fPrecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fPrecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fPrecoder_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fPrecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fPrecoder_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fPrecoder_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fPrecoder_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fPHICH_x5fPrecoder_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fPHICH_x5fPrecoder_fNO","NO")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_Precoder");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_PHICH_Precoder");

create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fFrameModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fFDD",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig0",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig1",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig2",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig3",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig4",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig5",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig6",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig7",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBandwidthSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTx1",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTx2",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNormal",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fMIMO_x5fModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fSpatial_x5fMux",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fLarge_x5fDelay", 
	"Large-Delay",
	0,
	"0",
	"Large-Delay");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fZero_x5fDelay", 
	"Zero-Delay",
	0,
	"1",
	"Zero-Delay");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fCDD_x5fModeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fLarge_x5fDelay",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fZero_x5fDelay",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNg_x5f1",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNO",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPDSCH", 
	"PDSCH",
	0,
	"0",
	"PDSCH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPCFICH", 
	"PCFICH",
	0,
	"1",
	"PCFICH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPDCCH", 
	"PDCCH",
	0,
	"2",
	"PDCCH");
create_constant_form ("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPBCH", 
	"PBCH",
	0,
	"3",
	"PBCH");
create_form_set("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fChannelTypeSet",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPDSCH",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPCFICH",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPDCCH",
	"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPBCH",
	"StdForm");
create_item ("LTE_DL_MIMO_Precoder","Downlink MIMO Precoder",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MIMO_Precoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMIMO_x5fPrecoder_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_MIMO_Precoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("CDD_Mode","cyclic delay diversity (CDD) mode, valid when MIMO_Mode is Spatial_Mux",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fCDD_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fLarge_x5fDelay","Large_Delay")),
	create_parm ("CdBlk_Index","codebook index for precoding, valid when MIMO_Mode is Spatial_Mux",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NumOfLayers","number of layers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fNO","NO")),
	create_parm ("ChannelType","Physical Channel Type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMIMO_x5fPrecoder_fPDSCH","PDSCH")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_Precoder");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_Precoder");

create_item ("LTE_DL_MIMO_LayerMapper","Downlink MIMO Layer Mapper",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MIMO_LayerMapper",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMIMO_x5fLayerMapper_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_MIMO_LayerMapper",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("NumOfCWs","number of code words",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("NumOfLayers","number of layers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));
library_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_LayerMapper");
palette_group("LTE, MIMO Precoder","LTE, MIMO Precoder","LTE_DL_MIMO_LayerMapper");

create_constant_form ("_nLTE_x5fDeScrambler_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fDeScrambler_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fDeScrambler_fLinkDirSet",
	"_nLTE_x5fDeScrambler_fDownlink",
	"_nLTE_x5fDeScrambler_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDeScrambler_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDeScrambler_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDeScrambler_fPayload_x5fConfigSet",
	"_nLTE_x5fDeScrambler_fMCS_x5findex",
	"_nLTE_x5fDeScrambler_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDeScrambler_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDeScrambler_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDeScrambler_fEnable64QAMSet",
	"_nLTE_x5fDeScrambler_fNO",
	"_nLTE_x5fDeScrambler_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fDeScrambler_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fDeScrambler_fMIMO_x5fModeSet",
	"_nLTE_x5fDeScrambler_fSpatial_x5fMux",
	"_nLTE_x5fDeScrambler_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fDeScrambler_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fDeScrambler_fChBit_x5fConfigSet",
	"_nLTE_x5fDeScrambler_fREspersubframe",
	"_nLTE_x5fDeScrambler_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDeScrambler_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDeScrambler_fFrameModeSet",
	"_nLTE_x5fDeScrambler_fFDD",
	"_nLTE_x5fDeScrambler_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDeScrambler_fTDD_x5fConfigSet",
	"_nLTE_x5fDeScrambler_fConfig_x5f0",
	"_nLTE_x5fDeScrambler_fConfig_x5f1",
	"_nLTE_x5fDeScrambler_fConfig_x5f2",
	"_nLTE_x5fDeScrambler_fConfig_x5f3",
	"_nLTE_x5fDeScrambler_fConfig_x5f4",
	"_nLTE_x5fDeScrambler_fConfig_x5f5",
	"_nLTE_x5fDeScrambler_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDeScrambler_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDeScrambler_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDeScrambler_fConfig0",
	"_nLTE_x5fDeScrambler_fConfig1",
	"_nLTE_x5fDeScrambler_fConfig2",
	"_nLTE_x5fDeScrambler_fConfig3",
	"_nLTE_x5fDeScrambler_fConfig4",
	"_nLTE_x5fDeScrambler_fConfig5",
	"_nLTE_x5fDeScrambler_fConfig6",
	"_nLTE_x5fDeScrambler_fConfig7",
	"_nLTE_x5fDeScrambler_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDeScrambler_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDeScrambler_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDeScrambler_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDeScrambler_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDeScrambler_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDeScrambler_fBandwidthSet",
	"_nLTE_x5fDeScrambler_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDeScrambler_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDeScrambler_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDeScrambler_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDeScrambler_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDeScrambler_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDeScrambler_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDeScrambler_fCyclicPrefixSet",
	"_nLTE_x5fDeScrambler_fNormal",
	"_nLTE_x5fDeScrambler_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDeScrambler_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDeScrambler_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDeScrambler_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDeScrambler_fStartRB_x5fNumRBs",
	"_nLTE_x5fDeScrambler_fRB_x5findices_x5f1D",
	"_nLTE_x5fDeScrambler_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDeScrambler_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDeScrambler_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDeScrambler_fNumTxAntsSet",
	"_nLTE_x5fDeScrambler_fTx1",
	"_nLTE_x5fDeScrambler_fTx2",
	"_nLTE_x5fDeScrambler_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fDeScrambler_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fDeScrambler_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fDeScrambler_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fDeScrambler_fPUSCH",
	"_nLTE_x5fDeScrambler_fPUCCH",
	"_nLTE_x5fDeScrambler_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fDeScrambler_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fDeScrambler_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fDeScrambler_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fDeScrambler_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fDeScrambler_fData_x5fOnly",
	"_nLTE_x5fDeScrambler_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fDeScrambler_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDeScrambler_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDeScrambler_fSRS_x5fEnableSet",
	"_nLTE_x5fDeScrambler_fNO",
	"_nLTE_x5fDeScrambler_fYES",
	"StdForm");
create_item ("LTE_DeScrambler","LTE Downlink and Uplink DeScrambler",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DeScrambler",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDeScrambler_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DeScrambler",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fDownlink","Downlink")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("q","Code word number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fDeScrambler_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDeScrambler_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_DeScrambler");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_DeScrambler");

create_constant_form ("_nLTE_x5fScrambler_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fScrambler_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fScrambler_fLinkDirSet",
	"_nLTE_x5fScrambler_fDownlink",
	"_nLTE_x5fScrambler_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fScrambler_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fScrambler_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fScrambler_fPayload_x5fConfigSet",
	"_nLTE_x5fScrambler_fMCS_x5findex",
	"_nLTE_x5fScrambler_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fScrambler_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fScrambler_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fScrambler_fEnable64QAMSet",
	"_nLTE_x5fScrambler_fNO",
	"_nLTE_x5fScrambler_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fScrambler_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fScrambler_fMIMO_x5fModeSet",
	"_nLTE_x5fScrambler_fSpatial_x5fMux",
	"_nLTE_x5fScrambler_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fScrambler_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fScrambler_fChBit_x5fConfigSet",
	"_nLTE_x5fScrambler_fREspersubframe",
	"_nLTE_x5fScrambler_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fScrambler_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fScrambler_fFrameModeSet",
	"_nLTE_x5fScrambler_fFDD",
	"_nLTE_x5fScrambler_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fScrambler_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fScrambler_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fScrambler_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fScrambler_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fScrambler_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fScrambler_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fScrambler_fTDD_x5fConfigSet",
	"_nLTE_x5fScrambler_fConfig_x5f0",
	"_nLTE_x5fScrambler_fConfig_x5f1",
	"_nLTE_x5fScrambler_fConfig_x5f2",
	"_nLTE_x5fScrambler_fConfig_x5f3",
	"_nLTE_x5fScrambler_fConfig_x5f4",
	"_nLTE_x5fScrambler_fConfig_x5f5",
	"_nLTE_x5fScrambler_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fScrambler_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fScrambler_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fScrambler_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fScrambler_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fScrambler_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fScrambler_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fScrambler_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fScrambler_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fScrambler_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fScrambler_fConfig0",
	"_nLTE_x5fScrambler_fConfig1",
	"_nLTE_x5fScrambler_fConfig2",
	"_nLTE_x5fScrambler_fConfig3",
	"_nLTE_x5fScrambler_fConfig4",
	"_nLTE_x5fScrambler_fConfig5",
	"_nLTE_x5fScrambler_fConfig6",
	"_nLTE_x5fScrambler_fConfig7",
	"_nLTE_x5fScrambler_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fScrambler_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fScrambler_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fScrambler_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fScrambler_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fScrambler_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fScrambler_fBandwidthSet",
	"_nLTE_x5fScrambler_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fScrambler_fBW_x5f3_x5fMHz",
	"_nLTE_x5fScrambler_fBW_x5f5_x5fMHz",
	"_nLTE_x5fScrambler_fBW_x5f10_x5fMHz",
	"_nLTE_x5fScrambler_fBW_x5f15_x5fMHz",
	"_nLTE_x5fScrambler_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fScrambler_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fScrambler_fCyclicPrefixSet",
	"_nLTE_x5fScrambler_fNormal",
	"_nLTE_x5fScrambler_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fScrambler_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fScrambler_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fScrambler_fRB_x5fAllocTypeSet",
	"_nLTE_x5fScrambler_fStartRB_x5fNumRBs",
	"_nLTE_x5fScrambler_fRB_x5findices_x5f1D",
	"_nLTE_x5fScrambler_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fScrambler_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fScrambler_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fScrambler_fNumTxAntsSet",
	"_nLTE_x5fScrambler_fTx1",
	"_nLTE_x5fScrambler_fTx2",
	"_nLTE_x5fScrambler_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fScrambler_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fScrambler_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fScrambler_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fScrambler_fPUSCH",
	"_nLTE_x5fScrambler_fPUCCH",
	"_nLTE_x5fScrambler_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fScrambler_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fScrambler_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fScrambler_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fScrambler_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fScrambler_fData_x5fOnly",
	"_nLTE_x5fScrambler_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fScrambler_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fScrambler_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fScrambler_fSRS_x5fEnableSet",
	"_nLTE_x5fScrambler_fNO",
	"_nLTE_x5fScrambler_fYES",
	"StdForm");
create_item ("LTE_Scrambler","LTE Downlink and Uplink Scrambler",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_Scrambler",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fScrambler_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_Scrambler",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fScrambler_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fDownlink","Downlink")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("n_RNTI","radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fScrambler_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fScrambler_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fScrambler_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("q","Code word number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fScrambler_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fScrambler_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fScrambler_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fScrambler_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fScrambler_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fScrambler_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fScrambler_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fScrambler_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fScrambler_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fScrambler_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fScrambler_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fScrambler_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_Scrambler");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_Scrambler");

create_constant_form ("_nLTE_x5fCRCDecoder_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fCRCDecoder_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fCRCDecoder_fLinkDirSet",
	"_nLTE_x5fCRCDecoder_fDownlink",
	"_nLTE_x5fCRCDecoder_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fCRCDecoder_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fCRCDecoder_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fCRCDecoder_fPayload_x5fConfigSet",
	"_nLTE_x5fCRCDecoder_fMCS_x5findex",
	"_nLTE_x5fCRCDecoder_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fCRCDecoder_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fCRCDecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fCRCDecoder_fEnable64QAMSet",
	"_nLTE_x5fCRCDecoder_fNO",
	"_nLTE_x5fCRCDecoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fCRCDecoder_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fCRCDecoder_fMIMO_x5fModeSet",
	"_nLTE_x5fCRCDecoder_fSpatial_x5fMux",
	"_nLTE_x5fCRCDecoder_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fCRC_x5f24A", 
	"CRC_24A",
	0,
	"0",
	"CRC_24A");
create_constant_form ("_nLTE_x5fCRCDecoder_fCRC_x5f24B", 
	"CRC_24B",
	0,
	"1",
	"CRC_24B");
create_constant_form ("_nLTE_x5fCRCDecoder_fCRC_x5f16", 
	"CRC_16",
	0,
	"2",
	"CRC_16");
create_constant_form ("_nLTE_x5fCRCDecoder_fCRC_x5f8", 
	"CRC_8",
	0,
	"3",
	"CRC_8");
create_form_set("_nLTE_x5fCRCDecoder_fCRC_x5fLengthSet",
	"_nLTE_x5fCRCDecoder_fCRC_x5f24A",
	"_nLTE_x5fCRCDecoder_fCRC_x5f24B",
	"_nLTE_x5fCRCDecoder_fCRC_x5f16",
	"_nLTE_x5fCRCDecoder_fCRC_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fCRCDecoder_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fCRCDecoder_fChBit_x5fConfigSet",
	"_nLTE_x5fCRCDecoder_fREspersubframe",
	"_nLTE_x5fCRCDecoder_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fCRCDecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fCRCDecoder_fFrameModeSet",
	"_nLTE_x5fCRCDecoder_fFDD",
	"_nLTE_x5fCRCDecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fCRCDecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fCRCDecoder_fConfig_x5f0",
	"_nLTE_x5fCRCDecoder_fConfig_x5f1",
	"_nLTE_x5fCRCDecoder_fConfig_x5f2",
	"_nLTE_x5fCRCDecoder_fConfig_x5f3",
	"_nLTE_x5fCRCDecoder_fConfig_x5f4",
	"_nLTE_x5fCRCDecoder_fConfig_x5f5",
	"_nLTE_x5fCRCDecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fCRCDecoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fCRCDecoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fCRCDecoder_fConfig0",
	"_nLTE_x5fCRCDecoder_fConfig1",
	"_nLTE_x5fCRCDecoder_fConfig2",
	"_nLTE_x5fCRCDecoder_fConfig3",
	"_nLTE_x5fCRCDecoder_fConfig4",
	"_nLTE_x5fCRCDecoder_fConfig5",
	"_nLTE_x5fCRCDecoder_fConfig6",
	"_nLTE_x5fCRCDecoder_fConfig7",
	"_nLTE_x5fCRCDecoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fCRCDecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fCRCDecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fCRCDecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fCRCDecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fCRCDecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fCRCDecoder_fBandwidthSet",
	"_nLTE_x5fCRCDecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fCRCDecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fCRCDecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fCRCDecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fCRCDecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fCRCDecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fCRCDecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fCRCDecoder_fCyclicPrefixSet",
	"_nLTE_x5fCRCDecoder_fNormal",
	"_nLTE_x5fCRCDecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fCRCDecoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fCRCDecoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fCRCDecoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fCRCDecoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fCRCDecoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fCRCDecoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fCRCDecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fCRCDecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fCRCDecoder_fNumTxAntsSet",
	"_nLTE_x5fCRCDecoder_fTx1",
	"_nLTE_x5fCRCDecoder_fTx2",
	"_nLTE_x5fCRCDecoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fCRCDecoder_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fCRCDecoder_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fCRCDecoder_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fCRCDecoder_fPUSCH",
	"_nLTE_x5fCRCDecoder_fPUCCH",
	"_nLTE_x5fCRCDecoder_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fCRCDecoder_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fCRCDecoder_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fCRCDecoder_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fCRCDecoder_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fCRCDecoder_fData_x5fOnly",
	"_nLTE_x5fCRCDecoder_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCDecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fCRCDecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fCRCDecoder_fSRS_x5fEnableSet",
	"_nLTE_x5fCRCDecoder_fNO",
	"_nLTE_x5fCRCDecoder_fYES",
	"StdForm");
create_item ("LTE_CRCDecoder","CRC decoder",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_CRCDecoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fCRCDecoder_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_CRCDecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fDownlink","Downlink")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("CRC_Length","Number of parity bits",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fCRC_x5fLengthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fCRC_x5f24A","CRC_24A")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fCRCDecoder_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCDecoder_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_CRCDecoder");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_CRCDecoder");

create_constant_form ("_nLTE_x5fCRCEncoder_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fCRCEncoder_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fCRCEncoder_fLinkDirSet",
	"_nLTE_x5fCRCEncoder_fDownlink",
	"_nLTE_x5fCRCEncoder_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fCRCEncoder_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fCRCEncoder_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fCRCEncoder_fPayload_x5fConfigSet",
	"_nLTE_x5fCRCEncoder_fMCS_x5findex",
	"_nLTE_x5fCRCEncoder_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fCRCEncoder_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fCRCEncoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fCRCEncoder_fEnable64QAMSet",
	"_nLTE_x5fCRCEncoder_fNO",
	"_nLTE_x5fCRCEncoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fCRCEncoder_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fCRCEncoder_fMIMO_x5fModeSet",
	"_nLTE_x5fCRCEncoder_fSpatial_x5fMux",
	"_nLTE_x5fCRCEncoder_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fCRC_x5f24A", 
	"CRC_24A",
	0,
	"0",
	"CRC_24A");
create_constant_form ("_nLTE_x5fCRCEncoder_fCRC_x5f24B", 
	"CRC_24B",
	0,
	"1",
	"CRC_24B");
create_constant_form ("_nLTE_x5fCRCEncoder_fCRC_x5f16", 
	"CRC_16",
	0,
	"2",
	"CRC_16");
create_constant_form ("_nLTE_x5fCRCEncoder_fCRC_x5f8", 
	"CRC_8",
	0,
	"3",
	"CRC_8");
create_form_set("_nLTE_x5fCRCEncoder_fCRC_x5fLengthSet",
	"_nLTE_x5fCRCEncoder_fCRC_x5f24A",
	"_nLTE_x5fCRCEncoder_fCRC_x5f24B",
	"_nLTE_x5fCRCEncoder_fCRC_x5f16",
	"_nLTE_x5fCRCEncoder_fCRC_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fCRCEncoder_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fCRCEncoder_fChBit_x5fConfigSet",
	"_nLTE_x5fCRCEncoder_fREspersubframe",
	"_nLTE_x5fCRCEncoder_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fCRCEncoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fCRCEncoder_fFrameModeSet",
	"_nLTE_x5fCRCEncoder_fFDD",
	"_nLTE_x5fCRCEncoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fCRCEncoder_fTDD_x5fConfigSet",
	"_nLTE_x5fCRCEncoder_fConfig_x5f0",
	"_nLTE_x5fCRCEncoder_fConfig_x5f1",
	"_nLTE_x5fCRCEncoder_fConfig_x5f2",
	"_nLTE_x5fCRCEncoder_fConfig_x5f3",
	"_nLTE_x5fCRCEncoder_fConfig_x5f4",
	"_nLTE_x5fCRCEncoder_fConfig_x5f5",
	"_nLTE_x5fCRCEncoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fCRCEncoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fCRCEncoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fCRCEncoder_fConfig0",
	"_nLTE_x5fCRCEncoder_fConfig1",
	"_nLTE_x5fCRCEncoder_fConfig2",
	"_nLTE_x5fCRCEncoder_fConfig3",
	"_nLTE_x5fCRCEncoder_fConfig4",
	"_nLTE_x5fCRCEncoder_fConfig5",
	"_nLTE_x5fCRCEncoder_fConfig6",
	"_nLTE_x5fCRCEncoder_fConfig7",
	"_nLTE_x5fCRCEncoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fCRCEncoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fCRCEncoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fCRCEncoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fCRCEncoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fCRCEncoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fCRCEncoder_fBandwidthSet",
	"_nLTE_x5fCRCEncoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fCRCEncoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fCRCEncoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fCRCEncoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fCRCEncoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fCRCEncoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fCRCEncoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fCRCEncoder_fCyclicPrefixSet",
	"_nLTE_x5fCRCEncoder_fNormal",
	"_nLTE_x5fCRCEncoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fCRCEncoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fCRCEncoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fCRCEncoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fCRCEncoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fCRCEncoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fCRCEncoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fCRCEncoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fCRCEncoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fCRCEncoder_fNumTxAntsSet",
	"_nLTE_x5fCRCEncoder_fTx1",
	"_nLTE_x5fCRCEncoder_fTx2",
	"_nLTE_x5fCRCEncoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fCRCEncoder_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fCRCEncoder_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fCRCEncoder_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fCRCEncoder_fPUSCH",
	"_nLTE_x5fCRCEncoder_fPUCCH",
	"_nLTE_x5fCRCEncoder_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fCRCEncoder_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fCRCEncoder_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fCRCEncoder_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fCRCEncoder_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fCRCEncoder_fData_x5fOnly",
	"_nLTE_x5fCRCEncoder_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fCRCEncoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fCRCEncoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fCRCEncoder_fSRS_x5fEnableSet",
	"_nLTE_x5fCRCEncoder_fNO",
	"_nLTE_x5fCRCEncoder_fYES",
	"StdForm");
create_item ("LTE_CRCEncoder","Add CRC to each Transport Block",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_CRCEncoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fCRCEncoder_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_CRCEncoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fDownlink","Downlink")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("CRC_Length","Number of parity bits",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fCRC_x5fLengthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fCRC_x5f24A","CRC_24A")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"5640 5640 5640 5640 5640 5640 5640 5640 5640 5640\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fCRCEncoder_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCRCEncoder_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_CRCEncoder");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_CRCEncoder");

create_constant_form ("_nLTE_x5fCodeBlkDeseg_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fCodeBlkDeseg_fLinkDirSet",
	"_nLTE_x5fCodeBlkDeseg_fDownlink",
	"_nLTE_x5fCodeBlkDeseg_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fCodeBlkDeseg_fPayload_x5fConfigSet",
	"_nLTE_x5fCodeBlkDeseg_fMCS_x5findex",
	"_nLTE_x5fCodeBlkDeseg_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fCodeBlkDeseg_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fCodeBlkDeseg_fEnable64QAMSet",
	"_nLTE_x5fCodeBlkDeseg_fNO",
	"_nLTE_x5fCodeBlkDeseg_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fCodeBlkDeseg_fMIMO_x5fModeSet",
	"_nLTE_x5fCodeBlkDeseg_fSpatial_x5fMux",
	"_nLTE_x5fCodeBlkDeseg_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fCodeBlkDeseg_fChBit_x5fConfigSet",
	"_nLTE_x5fCodeBlkDeseg_fREspersubframe",
	"_nLTE_x5fCodeBlkDeseg_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fCodeBlkDeseg_fFrameModeSet",
	"_nLTE_x5fCodeBlkDeseg_fFDD",
	"_nLTE_x5fCodeBlkDeseg_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fCodeBlkDeseg_fTDD_x5fConfigSet",
	"_nLTE_x5fCodeBlkDeseg_fConfig_x5f0",
	"_nLTE_x5fCodeBlkDeseg_fConfig_x5f1",
	"_nLTE_x5fCodeBlkDeseg_fConfig_x5f2",
	"_nLTE_x5fCodeBlkDeseg_fConfig_x5f3",
	"_nLTE_x5fCodeBlkDeseg_fConfig_x5f4",
	"_nLTE_x5fCodeBlkDeseg_fConfig_x5f5",
	"_nLTE_x5fCodeBlkDeseg_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fCodeBlkDeseg_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fCodeBlkDeseg_fConfig0",
	"_nLTE_x5fCodeBlkDeseg_fConfig1",
	"_nLTE_x5fCodeBlkDeseg_fConfig2",
	"_nLTE_x5fCodeBlkDeseg_fConfig3",
	"_nLTE_x5fCodeBlkDeseg_fConfig4",
	"_nLTE_x5fCodeBlkDeseg_fConfig5",
	"_nLTE_x5fCodeBlkDeseg_fConfig6",
	"_nLTE_x5fCodeBlkDeseg_fConfig7",
	"_nLTE_x5fCodeBlkDeseg_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fCodeBlkDeseg_fBandwidthSet",
	"_nLTE_x5fCodeBlkDeseg_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fCodeBlkDeseg_fBW_x5f3_x5fMHz",
	"_nLTE_x5fCodeBlkDeseg_fBW_x5f5_x5fMHz",
	"_nLTE_x5fCodeBlkDeseg_fBW_x5f10_x5fMHz",
	"_nLTE_x5fCodeBlkDeseg_fBW_x5f15_x5fMHz",
	"_nLTE_x5fCodeBlkDeseg_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fCodeBlkDeseg_fCyclicPrefixSet",
	"_nLTE_x5fCodeBlkDeseg_fNormal",
	"_nLTE_x5fCodeBlkDeseg_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fCodeBlkDeseg_fRB_x5fAllocTypeSet",
	"_nLTE_x5fCodeBlkDeseg_fStartRB_x5fNumRBs",
	"_nLTE_x5fCodeBlkDeseg_fRB_x5findices_x5f1D",
	"_nLTE_x5fCodeBlkDeseg_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fCodeBlkDeseg_fNumTxAntsSet",
	"_nLTE_x5fCodeBlkDeseg_fTx1",
	"_nLTE_x5fCodeBlkDeseg_fTx2",
	"_nLTE_x5fCodeBlkDeseg_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fCodeBlkDeseg_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fCodeBlkDeseg_fPUSCH",
	"_nLTE_x5fCodeBlkDeseg_fPUCCH",
	"_nLTE_x5fCodeBlkDeseg_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fCodeBlkDeseg_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fCodeBlkDeseg_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fCodeBlkDeseg_fData_x5fOnly",
	"_nLTE_x5fCodeBlkDeseg_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fCodeBlkDeseg_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fCodeBlkDeseg_fSRS_x5fEnableSet",
	"_nLTE_x5fCodeBlkDeseg_fNO",
	"_nLTE_x5fCodeBlkDeseg_fYES",
	"StdForm");
create_item ("LTE_CodeBlkDeseg","LTE Code block de-segmentation",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_CodeBlkDeseg",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fCodeBlkDeseg_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_CodeBlkDeseg",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fDownlink","Downlink")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fCodeBlkDeseg_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkDeseg_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_CodeBlkDeseg");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_CodeBlkDeseg");

create_constant_form ("_nLTE_x5fCodeBlkSeg_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fCodeBlkSeg_fLinkDirSet",
	"_nLTE_x5fCodeBlkSeg_fDownlink",
	"_nLTE_x5fCodeBlkSeg_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fCodeBlkSeg_fPayload_x5fConfigSet",
	"_nLTE_x5fCodeBlkSeg_fMCS_x5findex",
	"_nLTE_x5fCodeBlkSeg_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fCodeBlkSeg_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fCodeBlkSeg_fEnable64QAMSet",
	"_nLTE_x5fCodeBlkSeg_fNO",
	"_nLTE_x5fCodeBlkSeg_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fCodeBlkSeg_fMIMO_x5fModeSet",
	"_nLTE_x5fCodeBlkSeg_fSpatial_x5fMux",
	"_nLTE_x5fCodeBlkSeg_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fCodeBlkSeg_fChBit_x5fConfigSet",
	"_nLTE_x5fCodeBlkSeg_fREspersubframe",
	"_nLTE_x5fCodeBlkSeg_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fCodeBlkSeg_fFrameModeSet",
	"_nLTE_x5fCodeBlkSeg_fFDD",
	"_nLTE_x5fCodeBlkSeg_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fCodeBlkSeg_fTDD_x5fConfigSet",
	"_nLTE_x5fCodeBlkSeg_fConfig_x5f0",
	"_nLTE_x5fCodeBlkSeg_fConfig_x5f1",
	"_nLTE_x5fCodeBlkSeg_fConfig_x5f2",
	"_nLTE_x5fCodeBlkSeg_fConfig_x5f3",
	"_nLTE_x5fCodeBlkSeg_fConfig_x5f4",
	"_nLTE_x5fCodeBlkSeg_fConfig_x5f5",
	"_nLTE_x5fCodeBlkSeg_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fCodeBlkSeg_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fCodeBlkSeg_fConfig0",
	"_nLTE_x5fCodeBlkSeg_fConfig1",
	"_nLTE_x5fCodeBlkSeg_fConfig2",
	"_nLTE_x5fCodeBlkSeg_fConfig3",
	"_nLTE_x5fCodeBlkSeg_fConfig4",
	"_nLTE_x5fCodeBlkSeg_fConfig5",
	"_nLTE_x5fCodeBlkSeg_fConfig6",
	"_nLTE_x5fCodeBlkSeg_fConfig7",
	"_nLTE_x5fCodeBlkSeg_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fCodeBlkSeg_fBandwidthSet",
	"_nLTE_x5fCodeBlkSeg_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fCodeBlkSeg_fBW_x5f3_x5fMHz",
	"_nLTE_x5fCodeBlkSeg_fBW_x5f5_x5fMHz",
	"_nLTE_x5fCodeBlkSeg_fBW_x5f10_x5fMHz",
	"_nLTE_x5fCodeBlkSeg_fBW_x5f15_x5fMHz",
	"_nLTE_x5fCodeBlkSeg_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fCodeBlkSeg_fCyclicPrefixSet",
	"_nLTE_x5fCodeBlkSeg_fNormal",
	"_nLTE_x5fCodeBlkSeg_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fCodeBlkSeg_fRB_x5fAllocTypeSet",
	"_nLTE_x5fCodeBlkSeg_fStartRB_x5fNumRBs",
	"_nLTE_x5fCodeBlkSeg_fRB_x5findices_x5f1D",
	"_nLTE_x5fCodeBlkSeg_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fCodeBlkSeg_fNumTxAntsSet",
	"_nLTE_x5fCodeBlkSeg_fTx1",
	"_nLTE_x5fCodeBlkSeg_fTx2",
	"_nLTE_x5fCodeBlkSeg_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fCodeBlkSeg_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fCodeBlkSeg_fPUSCH",
	"_nLTE_x5fCodeBlkSeg_fPUCCH",
	"_nLTE_x5fCodeBlkSeg_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fCodeBlkSeg_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fCodeBlkSeg_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fCodeBlkSeg_fData_x5fOnly",
	"_nLTE_x5fCodeBlkSeg_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fCodeBlkSeg_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fCodeBlkSeg_fSRS_x5fEnableSet",
	"_nLTE_x5fCodeBlkSeg_fNO",
	"_nLTE_x5fCodeBlkSeg_fYES",
	"StdForm");
create_item ("LTE_CodeBlkSeg","LTE Code block segmentation",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_CodeBlkSeg",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fCodeBlkSeg_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_CodeBlkSeg",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fDownlink","Downlink")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fCodeBlkSeg_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fCodeBlkSeg_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_CodeBlkSeg");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_CodeBlkSeg");

create_constant_form ("_nLTE_x5fRateDematch_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fRateDematch_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fRateDematch_fLinkDirSet",
	"_nLTE_x5fRateDematch_fDownlink",
	"_nLTE_x5fRateDematch_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fRateDematch_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fRateDematch_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fRateDematch_fPayload_x5fConfigSet",
	"_nLTE_x5fRateDematch_fMCS_x5findex",
	"_nLTE_x5fRateDematch_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fRateDematch_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRateDematch_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRateDematch_fEnable64QAMSet",
	"_nLTE_x5fRateDematch_fNO",
	"_nLTE_x5fRateDematch_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fRateDematch_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fRateDematch_fMIMO_x5fModeSet",
	"_nLTE_x5fRateDematch_fSpatial_x5fMux",
	"_nLTE_x5fRateDematch_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fRateDematch_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fRateDematch_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fRateDematch_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fRateDematch_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fRateDematch_fUE_x5fCategorySet",
	"_nLTE_x5fRateDematch_fCategory1",
	"_nLTE_x5fRateDematch_fCategory2",
	"_nLTE_x5fRateDematch_fCategory3",
	"_nLTE_x5fRateDematch_fCategory4",
	"_nLTE_x5fRateDematch_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fRateDematch_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fRateDematch_fChBit_x5fConfigSet",
	"_nLTE_x5fRateDematch_fREspersubframe",
	"_nLTE_x5fRateDematch_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fRateDematch_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fRateDematch_fFrameModeSet",
	"_nLTE_x5fRateDematch_fFDD",
	"_nLTE_x5fRateDematch_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fRateDematch_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fRateDematch_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fRateDematch_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fRateDematch_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fRateDematch_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fRateDematch_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fRateDematch_fTDD_x5fConfigSet",
	"_nLTE_x5fRateDematch_fConfig_x5f0",
	"_nLTE_x5fRateDematch_fConfig_x5f1",
	"_nLTE_x5fRateDematch_fConfig_x5f2",
	"_nLTE_x5fRateDematch_fConfig_x5f3",
	"_nLTE_x5fRateDematch_fConfig_x5f4",
	"_nLTE_x5fRateDematch_fConfig_x5f5",
	"_nLTE_x5fRateDematch_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fRateDematch_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fRateDematch_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fRateDematch_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fRateDematch_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fRateDematch_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fRateDematch_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fRateDematch_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fRateDematch_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fRateDematch_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fRateDematch_fConfig0",
	"_nLTE_x5fRateDematch_fConfig1",
	"_nLTE_x5fRateDematch_fConfig2",
	"_nLTE_x5fRateDematch_fConfig3",
	"_nLTE_x5fRateDematch_fConfig4",
	"_nLTE_x5fRateDematch_fConfig5",
	"_nLTE_x5fRateDematch_fConfig6",
	"_nLTE_x5fRateDematch_fConfig7",
	"_nLTE_x5fRateDematch_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fRateDematch_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fRateDematch_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fRateDematch_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fRateDematch_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fRateDematch_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fRateDematch_fBandwidthSet",
	"_nLTE_x5fRateDematch_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fRateDematch_fBW_x5f3_x5fMHz",
	"_nLTE_x5fRateDematch_fBW_x5f5_x5fMHz",
	"_nLTE_x5fRateDematch_fBW_x5f10_x5fMHz",
	"_nLTE_x5fRateDematch_fBW_x5f15_x5fMHz",
	"_nLTE_x5fRateDematch_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fRateDematch_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fRateDematch_fCyclicPrefixSet",
	"_nLTE_x5fRateDematch_fNormal",
	"_nLTE_x5fRateDematch_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fRateDematch_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fRateDematch_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fRateDematch_fRB_x5fAllocTypeSet",
	"_nLTE_x5fRateDematch_fStartRB_x5fNumRBs",
	"_nLTE_x5fRateDematch_fRB_x5findices_x5f1D",
	"_nLTE_x5fRateDematch_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fRateDematch_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fRateDematch_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fRateDematch_fNumTxAntsSet",
	"_nLTE_x5fRateDematch_fTx1",
	"_nLTE_x5fRateDematch_fTx2",
	"_nLTE_x5fRateDematch_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fRateDematch_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fRateDematch_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fRateDematch_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fRateDematch_fPUSCH",
	"_nLTE_x5fRateDematch_fPUCCH",
	"_nLTE_x5fRateDematch_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fRateDematch_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fRateDematch_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fRateDematch_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fRateDematch_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fRateDematch_fData_x5fOnly",
	"_nLTE_x5fRateDematch_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fRateDematch_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRateDematch_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRateDematch_fSRS_x5fEnableSet",
	"_nLTE_x5fRateDematch_fNO",
	"_nLTE_x5fRateDematch_fYES",
	"StdForm");
create_item ("LTE_RateDematch","Downlink and Uplink SCH Rate Dematching",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_RateDematch",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fRateDematch_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_RateDematch",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fRateDematch_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fDownlink","Downlink")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fRateDematch_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fRateDematch_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fRateDematch_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RV_Idx","Redundancy Version Index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fRateDematch_fUE_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fCategory1","Category1")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fRateDematch_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fRateDematch_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fRateDematch_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fRateDematch_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fRateDematch_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fRateDematch_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fRateDematch_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fRateDematch_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fRateDematch_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fRateDematch_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fRateDematch_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateDematch_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_RateDematch");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_RateDematch");

create_constant_form ("_nLTE_x5fRateMatch_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fRateMatch_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fRateMatch_fLinkDirSet",
	"_nLTE_x5fRateMatch_fDownlink",
	"_nLTE_x5fRateMatch_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fRateMatch_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fRateMatch_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fRateMatch_fPayload_x5fConfigSet",
	"_nLTE_x5fRateMatch_fMCS_x5findex",
	"_nLTE_x5fRateMatch_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fRateMatch_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRateMatch_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRateMatch_fEnable64QAMSet",
	"_nLTE_x5fRateMatch_fNO",
	"_nLTE_x5fRateMatch_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fRateMatch_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fRateMatch_fMIMO_x5fModeSet",
	"_nLTE_x5fRateMatch_fSpatial_x5fMux",
	"_nLTE_x5fRateMatch_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fCategory1", 
	"Category1",
	0,
	"0",
	"Category 1");
create_constant_form ("_nLTE_x5fRateMatch_fCategory2", 
	"Category2",
	0,
	"1",
	"Category 2");
create_constant_form ("_nLTE_x5fRateMatch_fCategory3", 
	"Category3",
	0,
	"2",
	"Category 3");
create_constant_form ("_nLTE_x5fRateMatch_fCategory4", 
	"Category4",
	0,
	"3",
	"Category 4");
create_constant_form ("_nLTE_x5fRateMatch_fCategory5", 
	"Category5",
	0,
	"4",
	"Category 5");
create_form_set("_nLTE_x5fRateMatch_fUE_x5fCategorySet",
	"_nLTE_x5fRateMatch_fCategory1",
	"_nLTE_x5fRateMatch_fCategory2",
	"_nLTE_x5fRateMatch_fCategory3",
	"_nLTE_x5fRateMatch_fCategory4",
	"_nLTE_x5fRateMatch_fCategory5",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fRateMatch_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fRateMatch_fChBit_x5fConfigSet",
	"_nLTE_x5fRateMatch_fREspersubframe",
	"_nLTE_x5fRateMatch_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fRateMatch_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fRateMatch_fFrameModeSet",
	"_nLTE_x5fRateMatch_fFDD",
	"_nLTE_x5fRateMatch_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fRateMatch_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fRateMatch_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fRateMatch_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fRateMatch_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fRateMatch_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fRateMatch_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fRateMatch_fTDD_x5fConfigSet",
	"_nLTE_x5fRateMatch_fConfig_x5f0",
	"_nLTE_x5fRateMatch_fConfig_x5f1",
	"_nLTE_x5fRateMatch_fConfig_x5f2",
	"_nLTE_x5fRateMatch_fConfig_x5f3",
	"_nLTE_x5fRateMatch_fConfig_x5f4",
	"_nLTE_x5fRateMatch_fConfig_x5f5",
	"_nLTE_x5fRateMatch_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fRateMatch_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fRateMatch_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fRateMatch_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fRateMatch_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fRateMatch_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fRateMatch_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fRateMatch_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fRateMatch_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fRateMatch_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fRateMatch_fConfig0",
	"_nLTE_x5fRateMatch_fConfig1",
	"_nLTE_x5fRateMatch_fConfig2",
	"_nLTE_x5fRateMatch_fConfig3",
	"_nLTE_x5fRateMatch_fConfig4",
	"_nLTE_x5fRateMatch_fConfig5",
	"_nLTE_x5fRateMatch_fConfig6",
	"_nLTE_x5fRateMatch_fConfig7",
	"_nLTE_x5fRateMatch_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fRateMatch_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fRateMatch_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fRateMatch_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fRateMatch_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fRateMatch_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fRateMatch_fBandwidthSet",
	"_nLTE_x5fRateMatch_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fRateMatch_fBW_x5f3_x5fMHz",
	"_nLTE_x5fRateMatch_fBW_x5f5_x5fMHz",
	"_nLTE_x5fRateMatch_fBW_x5f10_x5fMHz",
	"_nLTE_x5fRateMatch_fBW_x5f15_x5fMHz",
	"_nLTE_x5fRateMatch_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fRateMatch_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fRateMatch_fCyclicPrefixSet",
	"_nLTE_x5fRateMatch_fNormal",
	"_nLTE_x5fRateMatch_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fRateMatch_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fRateMatch_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fRateMatch_fRB_x5fAllocTypeSet",
	"_nLTE_x5fRateMatch_fStartRB_x5fNumRBs",
	"_nLTE_x5fRateMatch_fRB_x5findices_x5f1D",
	"_nLTE_x5fRateMatch_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fRateMatch_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fRateMatch_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fRateMatch_fNumTxAntsSet",
	"_nLTE_x5fRateMatch_fTx1",
	"_nLTE_x5fRateMatch_fTx2",
	"_nLTE_x5fRateMatch_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fRateMatch_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fRateMatch_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fRateMatch_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fRateMatch_fPUSCH",
	"_nLTE_x5fRateMatch_fPUCCH",
	"_nLTE_x5fRateMatch_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fRateMatch_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fRateMatch_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fRateMatch_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fRateMatch_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fRateMatch_fData_x5fOnly",
	"_nLTE_x5fRateMatch_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fRateMatch_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fRateMatch_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fRateMatch_fSRS_x5fEnableSet",
	"_nLTE_x5fRateMatch_fNO",
	"_nLTE_x5fRateMatch_fYES",
	"StdForm");
create_item ("LTE_RateMatch","Downlink and Uplink SCH Rate Matching",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_RateMatch",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fRateMatch_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_RateMatch",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fRateMatch_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fDownlink","Downlink")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fRateMatch_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fRateMatch_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fRateMatch_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("RV_Idx","Redundancy Version Index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("UE_Category","defines UE capability, used to get the total number of soft channel bits for rate-matching in downlink",
		PARM_INT,
		"_nLTE_x5fRateMatch_fUE_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fCategory1","Category1")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fRateMatch_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fRateMatch_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fRateMatch_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fRateMatch_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fRateMatch_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fRateMatch_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fRateMatch_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fRateMatch_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fRateMatch_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fRateMatch_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fRateMatch_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRateMatch_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_RateMatch");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_RateMatch");

create_constant_form ("_nLTE_x5fTurboDecoder_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fTurboDecoder_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fTurboDecoder_fLinkDirSet",
	"_nLTE_x5fTurboDecoder_fDownlink",
	"_nLTE_x5fTurboDecoder_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fTurboDecoder_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fTurboDecoder_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fTurboDecoder_fPayload_x5fConfigSet",
	"_nLTE_x5fTurboDecoder_fMCS_x5findex",
	"_nLTE_x5fTurboDecoder_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fTurboDecoder_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fTurboDecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fTurboDecoder_fEnable64QAMSet",
	"_nLTE_x5fTurboDecoder_fNO",
	"_nLTE_x5fTurboDecoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fTurboDecoder_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fTurboDecoder_fMIMO_x5fModeSet",
	"_nLTE_x5fTurboDecoder_fSpatial_x5fMux",
	"_nLTE_x5fTurboDecoder_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fTurboDecoder_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fTurboDecoder_fChBit_x5fConfigSet",
	"_nLTE_x5fTurboDecoder_fREspersubframe",
	"_nLTE_x5fTurboDecoder_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fTurboDecoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fTurboDecoder_fFrameModeSet",
	"_nLTE_x5fTurboDecoder_fFDD",
	"_nLTE_x5fTurboDecoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fTurboDecoder_fTDD_x5fConfigSet",
	"_nLTE_x5fTurboDecoder_fConfig_x5f0",
	"_nLTE_x5fTurboDecoder_fConfig_x5f1",
	"_nLTE_x5fTurboDecoder_fConfig_x5f2",
	"_nLTE_x5fTurboDecoder_fConfig_x5f3",
	"_nLTE_x5fTurboDecoder_fConfig_x5f4",
	"_nLTE_x5fTurboDecoder_fConfig_x5f5",
	"_nLTE_x5fTurboDecoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fTurboDecoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fTurboDecoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fTurboDecoder_fConfig0",
	"_nLTE_x5fTurboDecoder_fConfig1",
	"_nLTE_x5fTurboDecoder_fConfig2",
	"_nLTE_x5fTurboDecoder_fConfig3",
	"_nLTE_x5fTurboDecoder_fConfig4",
	"_nLTE_x5fTurboDecoder_fConfig5",
	"_nLTE_x5fTurboDecoder_fConfig6",
	"_nLTE_x5fTurboDecoder_fConfig7",
	"_nLTE_x5fTurboDecoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fTurboDecoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fTurboDecoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fTurboDecoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fTurboDecoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fTurboDecoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fTurboDecoder_fBandwidthSet",
	"_nLTE_x5fTurboDecoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fTurboDecoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fTurboDecoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fTurboDecoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fTurboDecoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fTurboDecoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fTurboDecoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fTurboDecoder_fCyclicPrefixSet",
	"_nLTE_x5fTurboDecoder_fNormal",
	"_nLTE_x5fTurboDecoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fTurboDecoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fTurboDecoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fTurboDecoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fTurboDecoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fTurboDecoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fTurboDecoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fTurboDecoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fTurboDecoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fTurboDecoder_fNumTxAntsSet",
	"_nLTE_x5fTurboDecoder_fTx1",
	"_nLTE_x5fTurboDecoder_fTx2",
	"_nLTE_x5fTurboDecoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fTurboDecoder_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fTurboDecoder_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fTurboDecoder_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fTurboDecoder_fPUSCH",
	"_nLTE_x5fTurboDecoder_fPUCCH",
	"_nLTE_x5fTurboDecoder_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fTurboDecoder_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fTurboDecoder_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fTurboDecoder_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fTurboDecoder_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fTurboDecoder_fData_x5fOnly",
	"_nLTE_x5fTurboDecoder_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboDecoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fTurboDecoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fTurboDecoder_fSRS_x5fEnableSet",
	"_nLTE_x5fTurboDecoder_fNO",
	"_nLTE_x5fTurboDecoder_fYES",
	"StdForm");
create_item ("LTE_TurboDecoder","LTE turbo decoder",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_TurboDecoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fTurboDecoder_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_TurboDecoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fDownlink","Downlink")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fTurboDecoder_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboDecoder_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("TC_Iteration","Turbo decoder iteration number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_TurboDecoder");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_TurboDecoder");

create_constant_form ("_nLTE_x5fTurboCoder_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fTurboCoder_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fTurboCoder_fLinkDirSet",
	"_nLTE_x5fTurboCoder_fDownlink",
	"_nLTE_x5fTurboCoder_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fTurboCoder_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fTurboCoder_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fTurboCoder_fPayload_x5fConfigSet",
	"_nLTE_x5fTurboCoder_fMCS_x5findex",
	"_nLTE_x5fTurboCoder_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fTurboCoder_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fTurboCoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fTurboCoder_fEnable64QAMSet",
	"_nLTE_x5fTurboCoder_fNO",
	"_nLTE_x5fTurboCoder_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fTurboCoder_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fTurboCoder_fMIMO_x5fModeSet",
	"_nLTE_x5fTurboCoder_fSpatial_x5fMux",
	"_nLTE_x5fTurboCoder_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fTurboCoder_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fTurboCoder_fChBit_x5fConfigSet",
	"_nLTE_x5fTurboCoder_fREspersubframe",
	"_nLTE_x5fTurboCoder_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fTurboCoder_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fTurboCoder_fFrameModeSet",
	"_nLTE_x5fTurboCoder_fFDD",
	"_nLTE_x5fTurboCoder_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fTurboCoder_fTDD_x5fConfigSet",
	"_nLTE_x5fTurboCoder_fConfig_x5f0",
	"_nLTE_x5fTurboCoder_fConfig_x5f1",
	"_nLTE_x5fTurboCoder_fConfig_x5f2",
	"_nLTE_x5fTurboCoder_fConfig_x5f3",
	"_nLTE_x5fTurboCoder_fConfig_x5f4",
	"_nLTE_x5fTurboCoder_fConfig_x5f5",
	"_nLTE_x5fTurboCoder_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fTurboCoder_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fTurboCoder_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fTurboCoder_fConfig0",
	"_nLTE_x5fTurboCoder_fConfig1",
	"_nLTE_x5fTurboCoder_fConfig2",
	"_nLTE_x5fTurboCoder_fConfig3",
	"_nLTE_x5fTurboCoder_fConfig4",
	"_nLTE_x5fTurboCoder_fConfig5",
	"_nLTE_x5fTurboCoder_fConfig6",
	"_nLTE_x5fTurboCoder_fConfig7",
	"_nLTE_x5fTurboCoder_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fTurboCoder_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fTurboCoder_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fTurboCoder_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fTurboCoder_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fTurboCoder_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fTurboCoder_fBandwidthSet",
	"_nLTE_x5fTurboCoder_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fTurboCoder_fBW_x5f3_x5fMHz",
	"_nLTE_x5fTurboCoder_fBW_x5f5_x5fMHz",
	"_nLTE_x5fTurboCoder_fBW_x5f10_x5fMHz",
	"_nLTE_x5fTurboCoder_fBW_x5f15_x5fMHz",
	"_nLTE_x5fTurboCoder_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fTurboCoder_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fTurboCoder_fCyclicPrefixSet",
	"_nLTE_x5fTurboCoder_fNormal",
	"_nLTE_x5fTurboCoder_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fTurboCoder_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fTurboCoder_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fTurboCoder_fRB_x5fAllocTypeSet",
	"_nLTE_x5fTurboCoder_fStartRB_x5fNumRBs",
	"_nLTE_x5fTurboCoder_fRB_x5findices_x5f1D",
	"_nLTE_x5fTurboCoder_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fTurboCoder_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fTurboCoder_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fTurboCoder_fNumTxAntsSet",
	"_nLTE_x5fTurboCoder_fTx1",
	"_nLTE_x5fTurboCoder_fTx2",
	"_nLTE_x5fTurboCoder_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fTurboCoder_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fTurboCoder_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fTurboCoder_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fTurboCoder_fPUSCH",
	"_nLTE_x5fTurboCoder_fPUCCH",
	"_nLTE_x5fTurboCoder_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fTurboCoder_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fTurboCoder_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fTurboCoder_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fTurboCoder_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fTurboCoder_fData_x5fOnly",
	"_nLTE_x5fTurboCoder_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fTurboCoder_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fTurboCoder_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fTurboCoder_fSRS_x5fEnableSet",
	"_nLTE_x5fTurboCoder_fNO",
	"_nLTE_x5fTurboCoder_fYES",
	"StdForm");
create_item ("LTE_TurboCoder","LTE turbo encoder",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_TurboCoder",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fTurboCoder_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_TurboCoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fDownlink","Downlink")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fTurboCoder_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fTurboCoder_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Channel Coding","LTE, Channel Coding","LTE_TurboCoder");
palette_group("LTE, Channel Coding","LTE, Channel Coding","LTE_TurboCoder");

create_item ("LTE_SSCH","LTE downlink SSCH(M) Sequence generator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_SSCH",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fSSCH_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_SSCH",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("LTE, Sync Signal","LTE, Sync Signal","LTE_SSCH");
palette_group("LTE, Sync Signal","LTE, Sync Signal","LTE_SSCH");

create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fChEstimator_fFrameModeSet",
	"_nLTE_x5fDL_x5fChEstimator_fFDD",
	"_nLTE_x5fDL_x5fChEstimator_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fChEstimator_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fChEstimator_fConfig_x5f0",
	"_nLTE_x5fDL_x5fChEstimator_fConfig_x5f1",
	"_nLTE_x5fDL_x5fChEstimator_fConfig_x5f2",
	"_nLTE_x5fDL_x5fChEstimator_fConfig_x5f3",
	"_nLTE_x5fDL_x5fChEstimator_fConfig_x5f4",
	"_nLTE_x5fDL_x5fChEstimator_fConfig_x5f5",
	"_nLTE_x5fDL_x5fChEstimator_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fChEstimator_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fChEstimator_fConfig0",
	"_nLTE_x5fDL_x5fChEstimator_fConfig1",
	"_nLTE_x5fDL_x5fChEstimator_fConfig2",
	"_nLTE_x5fDL_x5fChEstimator_fConfig3",
	"_nLTE_x5fDL_x5fChEstimator_fConfig4",
	"_nLTE_x5fDL_x5fChEstimator_fConfig5",
	"_nLTE_x5fDL_x5fChEstimator_fConfig6",
	"_nLTE_x5fDL_x5fChEstimator_fConfig7",
	"_nLTE_x5fDL_x5fChEstimator_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fChEstimator_fBandwidthSet",
	"_nLTE_x5fDL_x5fChEstimator_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fChEstimator_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fChEstimator_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fChEstimator_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fChEstimator_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fChEstimator_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fChEstimator_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fChEstimator_fTx1",
	"_nLTE_x5fDL_x5fChEstimator_fTx2",
	"_nLTE_x5fDL_x5fChEstimator_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fChEstimator_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fChEstimator_fRx1",
	"_nLTE_x5fDL_x5fChEstimator_fRx2",
	"_nLTE_x5fDL_x5fChEstimator_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fChEstimator_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fChEstimator_fNormal",
	"_nLTE_x5fDL_x5fChEstimator_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fLinear", 
	"Linear",
	0,
	"0",
	"Linear");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fMMSE_x5f2D", 
	"MMSE_2D",
	0,
	"1",
	"MMSE_2D");
create_constant_form ("_nLTE_x5fDL_x5fChEstimator_fFor_x5fEVM", 
	"For EVM",
	0,
	"2",
	"For EVM");
create_form_set("_nLTE_x5fDL_x5fChEstimator_fChEstimatorModeSet",
	"_nLTE_x5fDL_x5fChEstimator_fLinear",
	"_nLTE_x5fDL_x5fChEstimator_fMMSE_x5f2D",
	"_nLTE_x5fDL_x5fChEstimator_fFor_x5fEVM",
	"StdForm");
create_item ("LTE_DL_ChEstimator","Downlink channel estimator and interpolator for FDD and TDD",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_ChEstimator",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fChEstimator_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_ChEstimator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fChEstimator_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChEstimator_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fChEstimator_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChEstimator_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fChEstimator_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChEstimator_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fChEstimator_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChEstimator_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fChEstimator_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChEstimator_fTx1","Tx1")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fChEstimator_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChEstimator_fRx1","Rx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fChEstimator_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChEstimator_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChEstimatorMode","mode of interpolation algorithm in channel estimator",
		PARM_INT,
		"_nLTE_x5fDL_x5fChEstimator_fChEstimatorModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fChEstimator_fLinear","Linear")),
	create_parm ("MMSE_RBWinLen","number of RBs for each MMSE-2D interpolation",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SNR","SNR in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("Tmax","the maximum delay of multi-path channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 usec")),
	create_parm ("Fmax","the maximum doppler frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100 Hz")));
library_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_DL_ChEstimator");
palette_group("LTE, Sync Equalization","LTE, Sync Equalization","LTE_DL_ChEstimator");

create_constant_form ("_nLTE_x5fDL_x5fMuxFrame_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxFrame_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxFrame_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxFrame_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxFrame_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxFrame_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMuxFrame_fBandwidthSet",
	"_nLTE_x5fDL_x5fMuxFrame_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMuxFrame_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMuxFrame_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMuxFrame_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMuxFrame_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMuxFrame_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxFrame_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMuxFrame_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMuxFrame_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMuxFrame_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMuxFrame_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMuxFrame_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMuxFrame_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMuxFrame_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMuxFrame_fRatio_x5f8",
	"StdForm");
create_item ("LTE_DL_MuxFrame","Downlink radio frame multiplexer",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MuxFrame",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMuxFrame_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_MuxFrame",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxFrame_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxFrame_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxFrame_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxFrame_fRatio_x5f2","Ratio_2")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_MuxFrame");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_MuxFrame");

create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fDemuxFrame_fBandwidthSet",
	"_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fDemuxFrame_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fDemuxFrame_fRx1",
	"_nLTE_x5fDL_x5fDemuxFrame_fRx2",
	"_nLTE_x5fDL_x5fDemuxFrame_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fDemuxFrame_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fDemuxFrame_fRatio_x5f1",
	"_nLTE_x5fDL_x5fDemuxFrame_fRatio_x5f2",
	"_nLTE_x5fDL_x5fDemuxFrame_fRatio_x5f4",
	"_nLTE_x5fDL_x5fDemuxFrame_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fDemuxFrame_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fDemuxFrame_fNormal",
	"_nLTE_x5fDL_x5fDemuxFrame_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fDemuxFrame_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fDemuxFrame_fPreDownsamplingSet",
	"_nLTE_x5fDL_x5fDemuxFrame_fNO",
	"_nLTE_x5fDL_x5fDemuxFrame_fYES",
	"StdForm");
create_item ("LTE_DL_DemuxFrame","Downlink Radio Frame De-multiplexer with Frequency Offset Compensator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_DemuxFrame",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fDemuxFrame_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_DemuxFrame",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxFrame_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxFrame_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxFrame_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxFrame_fRx1","Rx1")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxFrame_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxFrame_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxFrame_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxFrame_fNormal","Normal")),
	create_parm ("IdleInterval","idle interval between two consecutive radio frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("PreDownsampling","pre-downsampling to 1X symbol rate ?",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxFrame_fPreDownsamplingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxFrame_fNO","NO")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_DemuxFrame");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_DemuxFrame");

create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fFrameModeSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fFDD",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f0",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f1",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f2",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f3",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f4",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f5",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig0",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig1",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig2",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig3",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig4",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig5",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig6",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig7",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fBandwidthSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fTx1",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fTx2",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fRx1",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fRx2",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fNormal",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fDistributed", 
	"Distributed",
	0,
	"1",
	"Distributed");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fLocalized",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fDistributed",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fNO",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fNg_x5f1",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fDemuxOFDMSym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fDemuxOFDMSym_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fNO",
	"_nLTE_x5fDL_x5fDemuxOFDMSym_fYES",
	"StdForm");
create_item ("LTE_DL_DemuxOFDMSym","Downlink OFDM Symbol De-multiplexer in one radio frame",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_DemuxOFDMSym",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fDemuxOFDMSym_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_DemuxOFDMSym",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fTx1","Tx1")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fRx1","Rx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fLocalized","Localized")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fNO","NO")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxOFDMSym_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxOFDMSym_fNO","NO")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_DemuxOFDMSym");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_DemuxOFDMSym");

create_constant_form ("_nLTE_x5fDL_x5fPilot_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fPilot_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fPilot_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fPilot_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fPilot_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fPilot_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fPilot_fBandwidthSet",
	"_nLTE_x5fDL_x5fPilot_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fPilot_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fPilot_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fPilot_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fPilot_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fPilot_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fPilot_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fPilot_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fPilot_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fPilot_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fPilot_fTx1",
	"_nLTE_x5fDL_x5fPilot_fTx2",
	"_nLTE_x5fDL_x5fPilot_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fPilot_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fPilot_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fPilot_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fPilot_fNormal",
	"_nLTE_x5fDL_x5fPilot_fExtended",
	"StdForm");
create_item ("LTE_DL_Pilot","Downlink pilot generator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_Pilot",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fPilot_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_Pilot",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fPilot_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fPilot_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fPilot_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fPilot_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fPilot_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fPilot_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("LTE, Sync Signal","LTE, Sync Signal","LTE_DL_Pilot");
palette_group("LTE, Sync Signal","LTE, Sync Signal","LTE_DL_Pilot");

create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fDemuxSlot_fBandwidthSet",
	"_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");
create_form_set("_nLTE_x5fDL_x5fDemuxSlot_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fDemuxSlot_fRx1",
	"_nLTE_x5fDL_x5fDemuxSlot_fRx2",
	"_nLTE_x5fDL_x5fDemuxSlot_fRx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fDemuxSlot_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fDemuxSlot_fRatio_x5f1",
	"_nLTE_x5fDL_x5fDemuxSlot_fRatio_x5f2",
	"_nLTE_x5fDL_x5fDemuxSlot_fRatio_x5f4",
	"_nLTE_x5fDL_x5fDemuxSlot_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fDemuxSlot_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fDemuxSlot_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fDemuxSlot_fNormal",
	"_nLTE_x5fDL_x5fDemuxSlot_fExtended",
	"StdForm");
create_item ("LTE_DL_DemuxSlot","Downlink Slot De-multiplexer for LTE DL receiver",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_DemuxSlot",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fDemuxSlot_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_DemuxSlot",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxSlot_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxSlot_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxSlot_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxSlot_fRx1","Rx1")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxSlot_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxSlot_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fDemuxSlot_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fDemuxSlot_fNormal","Normal")),
	create_parm ("Sym_StartPos","start position (without oversampling) to get the OFDM symbol for FFT operation for long CP and short CP symbols respecti...(Press Help for more info)",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{-3,-3}")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_DemuxSlot");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_DemuxSlot");

create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMuxSlot_fBandwidthSet",
	"_nLTE_x5fDL_x5fMuxSlot_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMuxSlot_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMuxSlot_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMuxSlot_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMuxSlot_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMuxSlot_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");
create_form_set("_nLTE_x5fDL_x5fMuxSlot_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fMuxSlot_fRatio_x5f1",
	"_nLTE_x5fDL_x5fMuxSlot_fRatio_x5f2",
	"_nLTE_x5fDL_x5fMuxSlot_fRatio_x5f4",
	"_nLTE_x5fDL_x5fMuxSlot_fRatio_x5f8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMuxSlot_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMuxSlot_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMuxSlot_fNormal",
	"_nLTE_x5fDL_x5fMuxSlot_fExtended",
	"StdForm");
create_item ("LTE_DL_MuxSlot","Downlink slot multiplexer",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MuxSlot",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMuxSlot_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_MuxSlot",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxSlot_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxSlot_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxSlot_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxSlot_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxSlot_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxSlot_fNormal","Normal")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_MuxSlot");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_MuxSlot");

create_item ("LTE_PSCH","P-SCH generator",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_PSCH",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fPSCH_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_PSCH",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("LTE, Sync Signal","LTE, Sync Signal","LTE_PSCH");
palette_group("LTE, Sync Signal","LTE, Sync Signal","LTE_PSCH");

create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fFrameModeSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fFDD",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f0",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f1",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f2",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f3",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f4",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f5",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig0",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig1",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig2",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig3",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig4",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig5",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig6",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig7",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fBandwidthSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fTx1",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fTx2",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fNormal",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fLocalized", 
	"Localized",
	0,
	"0",
	"Localized");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fDistributed", 
	"Distributed",
	0,
	"1",
	"Distributed");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fRB_x5fMappingTypeSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fLocalized",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fDistributed",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fNO",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fNg_x5f1",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fNg_x5f2",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fP_x5fB_x5f3",
	"StdForm");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDL_x5fMuxOFDMSym_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDL_x5fMuxOFDMSym_fETM_x5fSupportSet",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fNO",
	"_nLTE_x5fDL_x5fMuxOFDMSym_fYES",
	"StdForm");
create_item ("LTE_DL_MuxOFDMSym","Downlink OFDM Symbol Multiplexer in one radio frame",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_MuxOFDMSym",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDL_x5fMuxOFDMSym_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_MuxOFDMSym",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fTx1","Tx1")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RB_MappingType","the mapping type of VRBs to PRBs",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fRB_x5fMappingTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fLocalized","Localized")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fNO","NO")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("RS_EPRE","transmit energy per resource element (RE) for transmitted cell specific RS for each antenna port, in unit of dBm/15kHz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-25")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ETM_Support","ETM support or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fMuxOFDMSym_fETM_x5fSupportSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fMuxOFDMSym_fNO","NO")));
library_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_MuxOFDMSym");
palette_group("LTE, Multiplex","LTE, Multiplex","LTE_DL_MuxOFDMSym");

create_constant_form ("_nLTE_x5fDemapper_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fDemapper_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fDemapper_fLinkDirSet",
	"_nLTE_x5fDemapper_fDownlink",
	"_nLTE_x5fDemapper_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fDemapper_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fDemapper_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fDemapper_fPayload_x5fConfigSet",
	"_nLTE_x5fDemapper_fMCS_x5findex",
	"_nLTE_x5fDemapper_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fDemapper_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDemapper_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDemapper_fEnable64QAMSet",
	"_nLTE_x5fDemapper_fNO",
	"_nLTE_x5fDemapper_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fDemapper_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fDemapper_fMIMO_x5fModeSet",
	"_nLTE_x5fDemapper_fSpatial_x5fMux",
	"_nLTE_x5fDemapper_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fDemapper_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fDemapper_fChBit_x5fConfigSet",
	"_nLTE_x5fDemapper_fREspersubframe",
	"_nLTE_x5fDemapper_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fDemapper_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fDemapper_fFrameModeSet",
	"_nLTE_x5fDemapper_fFDD",
	"_nLTE_x5fDemapper_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDemapper_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDemapper_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDemapper_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDemapper_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDemapper_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDemapper_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fDemapper_fTDD_x5fConfigSet",
	"_nLTE_x5fDemapper_fConfig_x5f0",
	"_nLTE_x5fDemapper_fConfig_x5f1",
	"_nLTE_x5fDemapper_fConfig_x5f2",
	"_nLTE_x5fDemapper_fConfig_x5f3",
	"_nLTE_x5fDemapper_fConfig_x5f4",
	"_nLTE_x5fDemapper_fConfig_x5f5",
	"_nLTE_x5fDemapper_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fDemapper_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fDemapper_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fDemapper_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fDemapper_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fDemapper_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fDemapper_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fDemapper_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fDemapper_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fDemapper_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDemapper_fConfig0",
	"_nLTE_x5fDemapper_fConfig1",
	"_nLTE_x5fDemapper_fConfig2",
	"_nLTE_x5fDemapper_fConfig3",
	"_nLTE_x5fDemapper_fConfig4",
	"_nLTE_x5fDemapper_fConfig5",
	"_nLTE_x5fDemapper_fConfig6",
	"_nLTE_x5fDemapper_fConfig7",
	"_nLTE_x5fDemapper_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fDemapper_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fDemapper_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fDemapper_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fDemapper_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fDemapper_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fDemapper_fBandwidthSet",
	"_nLTE_x5fDemapper_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDemapper_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDemapper_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDemapper_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDemapper_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDemapper_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fDemapper_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fDemapper_fCyclicPrefixSet",
	"_nLTE_x5fDemapper_fNormal",
	"_nLTE_x5fDemapper_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fDemapper_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fDemapper_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fDemapper_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDemapper_fStartRB_x5fNumRBs",
	"_nLTE_x5fDemapper_fRB_x5findices_x5f1D",
	"_nLTE_x5fDemapper_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fDemapper_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fDemapper_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fDemapper_fNumTxAntsSet",
	"_nLTE_x5fDemapper_fTx1",
	"_nLTE_x5fDemapper_fTx2",
	"_nLTE_x5fDemapper_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fDemapper_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fDemapper_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fDemapper_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fDemapper_fPUSCH",
	"_nLTE_x5fDemapper_fPUCCH",
	"_nLTE_x5fDemapper_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fDemapper_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fDemapper_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fDemapper_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fDemapper_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fDemapper_fData_x5fOnly",
	"_nLTE_x5fDemapper_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fDemapper_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fDemapper_fSRS_x5fEnableSet",
	"_nLTE_x5fDemapper_fNO",
	"_nLTE_x5fDemapper_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fDemapper_fHard", 
	"Hard",
	0,
	"0",
	"Hard");
create_constant_form ("_nLTE_x5fDemapper_fSoft", 
	"Soft",
	0,
	"1",
	"Soft");
create_constant_form ("_nLTE_x5fDemapper_fCSI", 
	"CSI",
	0,
	"2",
	"CSI");
create_form_set("_nLTE_x5fDemapper_fDemapperTypeSet",
	"_nLTE_x5fDemapper_fHard",
	"_nLTE_x5fDemapper_fSoft",
	"_nLTE_x5fDemapper_fCSI",
	"StdForm");
create_item ("LTE_Demapper","De-mapper",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_Demapper",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fDemapper_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_Demapper",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fDemapper_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fDownlink","Downlink")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fDemapper_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fDemapper_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fDemapper_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fDemapper_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDemapper_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDemapper_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDemapper_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDemapper_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDemapper_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDemapper_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDemapper_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fDemapper_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fDemapper_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fDemapper_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("DemapperType","demodulator type",
		PARM_INT,
		"_nLTE_x5fDemapper_fDemapperTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDemapper_fHard","Hard")),
	create_parm ("DemapperMaxLevel","the maximum level for soft demapping output when DemapperType is Soft or CSI",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")));
library_group("LTE, Modulation","LTE, Modulation","LTE_Demapper");
palette_group("LTE, Modulation","LTE, Modulation","LTE_Demapper");

create_constant_form ("_nLTE_x5fMapper_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");
create_constant_form ("_nLTE_x5fMapper_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");
create_form_set("_nLTE_x5fMapper_fLinkDirSet",
	"_nLTE_x5fMapper_fDownlink",
	"_nLTE_x5fMapper_fUplink",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");
create_constant_form ("_nLTE_x5fMapper_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");
create_constant_form ("_nLTE_x5fMapper_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");
create_form_set("_nLTE_x5fMapper_fPayload_x5fConfigSet",
	"_nLTE_x5fMapper_fMCS_x5findex",
	"_nLTE_x5fMapper_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fMapper_fCode_x5frate",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fMapper_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fMapper_fEnable64QAMSet",
	"_nLTE_x5fMapper_fNO",
	"_nLTE_x5fMapper_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fSpatial_x5fMux", 
	"Spatial_Mux",
	0,
	"0",
	"Spatial_Mux");
create_constant_form ("_nLTE_x5fMapper_fTx_x5fDiv", 
	"Tx_Div",
	0,
	"1",
	"Tx_Div");
create_form_set("_nLTE_x5fMapper_fMIMO_x5fModeSet",
	"_nLTE_x5fMapper_fSpatial_x5fMux",
	"_nLTE_x5fMapper_fTx_x5fDiv",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fREspersubframe", 
	"REspersubframe",
	0,
	"0",
	"REs per subframe");
create_constant_form ("_nLTE_x5fMapper_fChannelbitsize", 
	"Channelbitsize",
	0,
	"1",
	"Channel bit size");
create_form_set("_nLTE_x5fMapper_fChBit_x5fConfigSet",
	"_nLTE_x5fMapper_fREspersubframe",
	"_nLTE_x5fMapper_fChannelbitsize",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");
create_constant_form ("_nLTE_x5fMapper_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");
create_form_set("_nLTE_x5fMapper_fFrameModeSet",
	"_nLTE_x5fMapper_fFDD",
	"_nLTE_x5fMapper_fTDD",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fMapper_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fMapper_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fMapper_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fMapper_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fMapper_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fMapper_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");
create_form_set("_nLTE_x5fMapper_fTDD_x5fConfigSet",
	"_nLTE_x5fMapper_fConfig_x5f0",
	"_nLTE_x5fMapper_fConfig_x5f1",
	"_nLTE_x5fMapper_fConfig_x5f2",
	"_nLTE_x5fMapper_fConfig_x5f3",
	"_nLTE_x5fMapper_fConfig_x5f4",
	"_nLTE_x5fMapper_fConfig_x5f5",
	"_nLTE_x5fMapper_fConfig_x5f6",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");
create_constant_form ("_nLTE_x5fMapper_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");
create_constant_form ("_nLTE_x5fMapper_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");
create_constant_form ("_nLTE_x5fMapper_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");
create_constant_form ("_nLTE_x5fMapper_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");
create_constant_form ("_nLTE_x5fMapper_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");
create_constant_form ("_nLTE_x5fMapper_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");
create_constant_form ("_nLTE_x5fMapper_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");
create_constant_form ("_nLTE_x5fMapper_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");
create_form_set("_nLTE_x5fMapper_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fMapper_fConfig0",
	"_nLTE_x5fMapper_fConfig1",
	"_nLTE_x5fMapper_fConfig2",
	"_nLTE_x5fMapper_fConfig3",
	"_nLTE_x5fMapper_fConfig4",
	"_nLTE_x5fMapper_fConfig5",
	"_nLTE_x5fMapper_fConfig6",
	"_nLTE_x5fMapper_fConfig7",
	"_nLTE_x5fMapper_fConfig8",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fMapper_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fMapper_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fMapper_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fMapper_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fMapper_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fMapper_fBandwidthSet",
	"_nLTE_x5fMapper_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fMapper_fBW_x5f3_x5fMHz",
	"_nLTE_x5fMapper_fBW_x5f5_x5fMHz",
	"_nLTE_x5fMapper_fBW_x5f10_x5fMHz",
	"_nLTE_x5fMapper_fBW_x5f15_x5fMHz",
	"_nLTE_x5fMapper_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nLTE_x5fMapper_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");
create_form_set("_nLTE_x5fMapper_fCyclicPrefixSet",
	"_nLTE_x5fMapper_fNormal",
	"_nLTE_x5fMapper_fExtended",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");
create_constant_form ("_nLTE_x5fMapper_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");
create_constant_form ("_nLTE_x5fMapper_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");
create_form_set("_nLTE_x5fMapper_fRB_x5fAllocTypeSet",
	"_nLTE_x5fMapper_fStartRB_x5fNumRBs",
	"_nLTE_x5fMapper_fRB_x5findices_x5f1D",
	"_nLTE_x5fMapper_fRB_x5findices_x5f2D",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");
create_constant_form ("_nLTE_x5fMapper_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");
create_constant_form ("_nLTE_x5fMapper_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");
create_form_set("_nLTE_x5fMapper_fNumTxAntsSet",
	"_nLTE_x5fMapper_fTx1",
	"_nLTE_x5fMapper_fTx2",
	"_nLTE_x5fMapper_fTx4",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");
create_constant_form ("_nLTE_x5fMapper_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");
create_constant_form ("_nLTE_x5fMapper_fboth", 
	"both",
	0,
	"2",
	"both");
create_form_set("_nLTE_x5fMapper_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fMapper_fPUSCH",
	"_nLTE_x5fMapper_fPUCCH",
	"_nLTE_x5fMapper_fboth",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");
create_constant_form ("_nLTE_x5fMapper_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");
create_constant_form ("_nLTE_x5fMapper_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");
create_form_set("_nLTE_x5fMapper_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fMapper_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fMapper_fData_x5fOnly",
	"_nLTE_x5fMapper_fControl_x5fOnly",
	"StdForm");
create_constant_form ("_nLTE_x5fMapper_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fMapper_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fMapper_fSRS_x5fEnableSet",
	"_nLTE_x5fMapper_fNO",
	"_nLTE_x5fMapper_fYES",
	"StdForm");
create_item ("LTE_Mapper","Mapper",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_Mapper",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fMapper_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_Mapper",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fMapper_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fDownlink","Downlink")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fMapper_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fMapper_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fYES","YES")),
	create_parm ("MIMO_Mode","MIMO mode",
		PARM_INT,
		"_nLTE_x5fMapper_fMIMO_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fSpatial_x5fMux","Spatial_Mux")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("ChBit_Config","the configuration mode of code word size",
		PARM_INT,
		"_nLTE_x5fMapper_fChBit_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fREspersubframe","REspersubframe")),
	create_parm ("NumChBits","the number of channel bits",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640}")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fMapper_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fMapper_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fMapper_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fMapper_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fMapper_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fNormal","Normal")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fMapper_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fMapper_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fTx1","Tx1")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fMapper_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fPUSCH","PUSCH")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fMapper_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fMapper_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fMapper_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));
library_group("LTE, Modulation","LTE, Modulation","LTE_Mapper");
palette_group("LTE, Modulation","LTE, Modulation","LTE_Mapper");

create_constant_form ("_nLTE_x5fFFT_fInverse", 
	"Inverse",
	0,
	"0",
	"Inverse");
create_constant_form ("_nLTE_x5fFFT_fForward", 
	"Forward",
	0,
	"1",
	"Forward");
create_form_set("_nLTE_x5fFFT_fDirectionSet",
	"_nLTE_x5fFFT_fInverse",
	"_nLTE_x5fFFT_fForward",
	"StdForm");
create_item ("LTE_FFT","Complex fast Fourier transform",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_FFT",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fFFT_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_FFT",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("InputSize","number of input samples to read",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","256")),
	create_parm ("FFTSize","number of the transform size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","256")),
	create_parm ("Direction","direction of transform",
		PARM_INT,
		"_nLTE_x5fFFT_fDirectionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fFFT_fForward","Forward")));
library_group("LTE, Modulation","LTE, Modulation","LTE_FFT");
palette_group("LTE, Modulation","LTE, Modulation","LTE_FFT");

create_constant_form ("_nLTE_x5fBCH_x5fGen_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");
create_form_set("_nLTE_x5fBCH_x5fGen_fBandwidthSet",
	"_nLTE_x5fBCH_x5fGen_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fBCH_x5fGen_fBW_x5f3_x5fMHz",
	"_nLTE_x5fBCH_x5fGen_fBW_x5f5_x5fMHz",
	"_nLTE_x5fBCH_x5fGen_fBW_x5f10_x5fMHz",
	"_nLTE_x5fBCH_x5fGen_fBW_x5f15_x5fMHz",
	"_nLTE_x5fBCH_x5fGen_fBW_x5f20_x5fMHz",
	"StdForm");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nLTE_x5fBCH_x5fGen_fFrameIncreasedSet",
	"_nLTE_x5fBCH_x5fGen_fNO",
	"_nLTE_x5fBCH_x5fGen_fYES",
	"StdForm");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");
create_form_set("_nLTE_x5fBCH_x5fGen_fPHICH_x5fDurationSet",
	"_nLTE_x5fBCH_x5fGen_fNormal_x5fDuration",
	"_nLTE_x5fBCH_x5fGen_fExtended_x5fDuration",
	"StdForm");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");
create_constant_form ("_nLTE_x5fBCH_x5fGen_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");
create_form_set("_nLTE_x5fBCH_x5fGen_fPHICH_x5fNgSet",
	"_nLTE_x5fBCH_x5fGen_fNg_x5f1_x5f6",
	"_nLTE_x5fBCH_x5fGen_fNg_x5f1_x5f2",
	"_nLTE_x5fBCH_x5fGen_fNg_x5f1",
	"_nLTE_x5fBCH_x5fGen_fNg_x5f2",
	"StdForm");
create_item ("LTE_BCH_Gen","generator for 24 BCH information bits",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_BCH_Gen",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fBCH_x5fGen_lsdfltestars",
	SPComponentAnnotFmt,
	"SYM_LTE_BCH_Gen",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fBCH_x5fGen_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBCH_x5fGen_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fBCH_x5fGen_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBCH_x5fGen_fNO","NO")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fBCH_x5fGen_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBCH_x5fGen_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fBCH_x5fGen_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBCH_x5fGen_fNg_x5f1_x5f6","Ng_1_6")));
library_group("LTE, Signaling","LTE, Signaling","LTE_BCH_Gen");
palette_group("LTE, Signaling","LTE, Signaling","LTE_BCH_Gen");

