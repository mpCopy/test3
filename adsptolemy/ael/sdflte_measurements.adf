set_design_type( sigproc_net );

create_constant_form ("_nLTE_x5fUL_x5fEVM_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");

create_form_set("_nLTE_x5fUL_x5fEVM_fFrameModeSet",
	"_nLTE_x5fUL_x5fEVM_fFDD",
	"_nLTE_x5fUL_x5fEVM_fTDD",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");

create_form_set("_nLTE_x5fUL_x5fEVM_fTDD_x5fConfigSet",
	"_nLTE_x5fUL_x5fEVM_fConfig_x5f0",
	"_nLTE_x5fUL_x5fEVM_fConfig_x5f1",
	"_nLTE_x5fUL_x5fEVM_fConfig_x5f2",
	"_nLTE_x5fUL_x5fEVM_fConfig_x5f3",
	"_nLTE_x5fUL_x5fEVM_fConfig_x5f4",
	"_nLTE_x5fUL_x5fEVM_fConfig_x5f5",
	"_nLTE_x5fUL_x5fEVM_fConfig_x5f6",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");

create_form_set("_nLTE_x5fUL_x5fEVM_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fUL_x5fEVM_fConfig0",
	"_nLTE_x5fUL_x5fEVM_fConfig1",
	"_nLTE_x5fUL_x5fEVM_fConfig2",
	"_nLTE_x5fUL_x5fEVM_fConfig3",
	"_nLTE_x5fUL_x5fEVM_fConfig4",
	"_nLTE_x5fUL_x5fEVM_fConfig5",
	"_nLTE_x5fUL_x5fEVM_fConfig6",
	"_nLTE_x5fUL_x5fEVM_fConfig7",
	"_nLTE_x5fUL_x5fEVM_fConfig8",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");

create_form_set("_nLTE_x5fUL_x5fEVM_fBandwidthSet",
	"_nLTE_x5fUL_x5fEVM_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fUL_x5fEVM_fBW_x5f3_x5fMHz",
	"_nLTE_x5fUL_x5fEVM_fBW_x5f5_x5fMHz",
	"_nLTE_x5fUL_x5fEVM_fBW_x5f10_x5fMHz",
	"_nLTE_x5fUL_x5fEVM_fBW_x5f15_x5fMHz",
	"_nLTE_x5fUL_x5fEVM_fBW_x5f20_x5fMHz",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");

create_form_set("_nLTE_x5fUL_x5fEVM_fOversamplingOptionSet",
	"_nLTE_x5fUL_x5fEVM_fRatio_x5f1",
	"_nLTE_x5fUL_x5fEVM_fRatio_x5f2",
	"_nLTE_x5fUL_x5fEVM_fRatio_x5f4",
	"_nLTE_x5fUL_x5fEVM_fRatio_x5f8",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");

create_form_set("_nLTE_x5fUL_x5fEVM_fCyclicPrefixSet",
	"_nLTE_x5fUL_x5fEVM_fNormal",
	"_nLTE_x5fUL_x5fEVM_fExtended",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fHalfCarrierShift_x5fEnableSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fFrameIncreasedSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fboth", 
	"both",
	0,
	"2",
	"both");

create_form_set("_nLTE_x5fUL_x5fEVM_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fUL_x5fEVM_fPUSCH",
	"_nLTE_x5fUL_x5fEVM_fPUCCH",
	"_nLTE_x5fUL_x5fEVM_fboth",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fDFTSwap_x5fEnableSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fPUSCH_x5fHoppingEnableSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_finterSubFrame", 
	"interSubFrame",
	0,
	"0",
	"interSubFrame");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fintraAndInterSubFrame", 
	"intraAndInterSubFrame",
	0,
	"1",
	"intraAndInterSubFrame");

create_form_set("_nLTE_x5fUL_x5fEVM_fPUSCH_x5fHoppingModeSet",
	"_nLTE_x5fUL_x5fEVM_finterSubFrame",
	"_nLTE_x5fUL_x5fEVM_fintraAndInterSubFrame",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fzero_x5for_x5fzz", 
	"zero_or_zz",
	0,
	"0",
	"0 or 00");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fone_x5for_x5fzone", 
	"one_or_zone",
	0,
	"1",
	"1 or 01");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fonezero", 
	"onezero",
	0,
	"2",
	"10");

create_constant_form ("_nLTE_x5fUL_x5fEVM_foneone", 
	"oneone",
	0,
	"3",
	"11");

create_form_set("_nLTE_x5fUL_x5fEVM_fPUSCH_x5fHoppingBitsSet",
	"_nLTE_x5fUL_x5fEVM_fzero_x5for_x5fzz",
	"_nLTE_x5fUL_x5fEVM_fone_x5for_x5fzone",
	"_nLTE_x5fUL_x5fEVM_fonezero",
	"_nLTE_x5fUL_x5fEVM_foneone",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");

create_form_set("_nLTE_x5fUL_x5fEVM_fRB_x5fAllocTypeSet",
	"_nLTE_x5fUL_x5fEVM_fStartRB_x5fNumRBs",
	"_nLTE_x5fUL_x5fEVM_fRB_x5findices_x5f1D",
	"_nLTE_x5fUL_x5fEVM_fRB_x5findices_x5f2D",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fGroupHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fSeqHop_x5fEnableSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fFormat_x5f1", 
	"Format_1",
	0,
	"0",
	"Format 1");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fFormat_x5f1a", 
	"Format_1a",
	0,
	"1",
	"Format 1a");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fFormat_x5f1b", 
	"Format_1b",
	0,
	"2",
	"Format 1b");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fShortened_x5f1", 
	"Shortened_1",
	0,
	"3",
	"Shortened 1");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fShortened_x5f1a", 
	"Shortened_1a",
	0,
	"4",
	"Shortened 1a");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fShortened_x5f1b", 
	"Shortened_1b",
	0,
	"5",
	"Shortened 1b");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fFormat_x5f2", 
	"Format_2",
	0,
	"6",
	"Format 2");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fFormat_x5f2a", 
	"Format_2a",
	0,
	"7",
	"Format 2a");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fFormat_x5f2b", 
	"Format_2b",
	0,
	"8",
	"Format 2b");

create_form_set("_nLTE_x5fUL_x5fEVM_fPUCCH_x5fFormatSet",
	"_nLTE_x5fUL_x5fEVM_fFormat_x5f1",
	"_nLTE_x5fUL_x5fEVM_fFormat_x5f1a",
	"_nLTE_x5fUL_x5fEVM_fFormat_x5f1b",
	"_nLTE_x5fUL_x5fEVM_fShortened_x5f1",
	"_nLTE_x5fUL_x5fEVM_fShortened_x5f1a",
	"_nLTE_x5fUL_x5fEVM_fShortened_x5f1b",
	"_nLTE_x5fUL_x5fEVM_fFormat_x5f2",
	"_nLTE_x5fUL_x5fEVM_fFormat_x5f2a",
	"_nLTE_x5fUL_x5fEVM_fFormat_x5f2b",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fPRACH_x5fEnableSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fPRACH_x5fHS_x5fflagSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fSRS_x5fEnableSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fSRS_x5fMaxUpPtsSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fShowRxAlgorithmParametersSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fPUSCH_x5fDMRS", 
	"PUSCH_DMRS",
	0,
	"0",
	"PUSCH_DMRS");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fPUCCH_x5fDMRS", 
	"PUCCH_DMRS",
	0,
	"1",
	"PUCCH_DMRS");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fS_x5fRS", 
	"S_RS",
	0,
	"2",
	"S_RS");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fPRACH", 
	"PRACH",
	0,
	"3",
	"PRACH");

create_form_set("_nLTE_x5fUL_x5fEVM_fSyncTypeSet",
	"_nLTE_x5fUL_x5fEVM_fPUSCH_x5fDMRS",
	"_nLTE_x5fUL_x5fEVM_fPUCCH_x5fDMRS",
	"_nLTE_x5fUL_x5fEVM_fS_x5fRS",
	"_nLTE_x5fUL_x5fEVM_fPRACH",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fRBDetManual", 
	"RBDetManual",
	0,
	"0",
	"Manual");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fRBDetAuto", 
	"RBDetAuto",
	0,
	"1",
	"Auto");

create_form_set("_nLTE_x5fUL_x5fEVM_fRBAutoDetectSet",
	"_nLTE_x5fUL_x5fEVM_fRBDetManual",
	"_nLTE_x5fUL_x5fEVM_fRBDetAuto",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fPUSCHIncludeInAnalysisSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fPUCCHIncludeInAnalysisSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fSRSIncludeInAnalysisSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fPRACHIncludeInAnalysisSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fPUSCHAutoSyncSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fPUCCHAutoSyncSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fSRSAutoSyncSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fFRAME", 
	"ANALYSIS_BOUNDARY_FRAME",
	0,
	"0",
	"ANALYSIS_BOUNDARY_FRAME");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fHALFFRAME", 
	"ANALYSIS_BOUNDARY_HALFFRAME",
	0,
	"1",
	"ANALYSIS_BOUNDARY_HALFFRAME");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fSUBFRAME", 
	"ANALYSIS_BOUNDARY_SUBFRAME",
	0,
	"2",
	"ANALYSIS_BOUNDARY_SUBFRAME");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fSLOT", 
	"ANALYSIS_BOUNDARY_SLOT",
	0,
	"3",
	"ANALYSIS_BOUNDARY_SLOT");

create_form_set("_nLTE_x5fUL_x5fEVM_fAnalysisBoundarySet",
	"_nLTE_x5fUL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fFRAME",
	"_nLTE_x5fUL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fHALFFRAME",
	"_nLTE_x5fUL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fSUBFRAME",
	"_nLTE_x5fUL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fSLOT",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fCPLengthAutoDetectSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fMirrorFreqSpectrumSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fTrainingOff", 
	"TrainingOff",
	0,
	"0",
	"Off");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fRS_x5fTraining", 
	"RS_Training",
	0,
	"1",
	"RS");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fRS_x5fDataTraining", 
	"RS_DataTraining",
	0,
	"2",
	"RS_Data");

create_form_set("_nLTE_x5fUL_x5fEVM_fEqualizerTrainingSet",
	"_nLTE_x5fUL_x5fEVM_fTrainingOff",
	"_nLTE_x5fUL_x5fEVM_fRS_x5fTraining",
	"_nLTE_x5fUL_x5fEVM_fRS_x5fDataTraining",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fEVMMiniOff", 
	"EVMMiniOff",
	0,
	"0",
	"Off");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fEVMMini3GPP", 
	"EVMMini3GPP",
	0,
	"1",
	"3GPP");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fEVMMiniTracking", 
	"EVMMiniTracking",
	0,
	"2",
	"Tracking");

create_form_set("_nLTE_x5fUL_x5fEVM_fEVMMinimizationSet",
	"_nLTE_x5fUL_x5fEVM_fEVMMiniOff",
	"_nLTE_x5fUL_x5fEVM_fEVMMini3GPP",
	"_nLTE_x5fUL_x5fEVM_fEVMMiniTracking",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fEVMMinimizationAmpSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fEVMMinimizationTimingSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fEVMMinimizationFreqPhaseSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fEVMMinimizationIQOffsetSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fMAX_x5fEVMWIN_x5fSTART_x5fEND", 
	"MAX_EVMWIN_START_END",
	0,
	"0",
	"Max of EVM Window Start/End");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fMIN_x5fEVMWIN_x5fSTART_x5fEND", 
	"MIN_EVMWIN_START_END",
	0,
	"1",
	"Min of EVM Window Start/End");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fEVMWIN_x5fSTART", 
	"EVMWIN_START",
	0,
	"2",
	"EVM Window Start");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fEVMWIN_x5fSTART_x5fEnd", 
	"EVMWIN_START_End",
	0,
	"3",
	"EVM Window End");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fEVMWIN_x5fCenter", 
	"EVMWIN_Center",
	0,
	"4",
	"EVM Window Center");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fPERCENT_x5fFFT_x5fSIZE", 
	"PERCENT_FFT_SIZE",
	0,
	"5",
	"Percent of FFT Size");

create_form_set("_nLTE_x5fUL_x5fEVM_fSymTimeAdjModeSet",
	"_nLTE_x5fUL_x5fEVM_fMAX_x5fEVMWIN_x5fSTART_x5fEND",
	"_nLTE_x5fUL_x5fEVM_fMIN_x5fEVMWIN_x5fSTART_x5fEND",
	"_nLTE_x5fUL_x5fEVM_fEVMWIN_x5fSTART",
	"_nLTE_x5fUL_x5fEVM_fEVMWIN_x5fSTART_x5fEnd",
	"_nLTE_x5fUL_x5fEVM_fEVMWIN_x5fCenter",
	"_nLTE_x5fUL_x5fEVM_fPERCENT_x5fFFT_x5fSIZE",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fReportEVMIndBSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fPowerBoostNormalizeSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fUL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fUL_x5fEVM_fSaveConstellationSet",
	"_nLTE_x5fUL_x5fEVM_fNO",
	"_nLTE_x5fUL_x5fEVM_fYES",
	"StdForm");

create_item ("LTE_UL_EVM","Uplink EVM measurement",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_UL_EVM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nLTE_x5fUL_x5fEVM_lsdflte_x5fmeasurements",
	SPComponentAnnotFmt,
	"SYM_LTE_UL_EVM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RLoad","load resistance",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("SystemParameters","system parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fConfig4","Config4")),
	create_parm ("Bandwidth","Bandwidth",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("OversamplingOption","oversampling ratio option",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("HalfCarrierShift_Enable","whether or not to enable 1/2 subcarrier shifting",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fHalfCarrierShift_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fYES","YES")),
	create_parm ("FrameNum","frame number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("FrameIncreased","frame number increasing or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fFrameIncreasedSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("PUSCH_Parameters","PUSCH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fPUSCH","PUSCH")),
	create_parm ("MappingType","the modulation orders for the PUSCH in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("DFTSwap_Enable","PUSCH DFT swap is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fDFTSwap_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("PUSCH_HoppingEnable","whether PUSCH frequency-hopping is enabled or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPUSCH_x5fHoppingEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("PUSCH_HoppingMode","PUSCH frequency hopping mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPUSCH_x5fHoppingModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_finterSubFrame","interSubFrame")),
	create_parm ("PUSCH_HoppingOffset","the offset used for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_Hopping_Nsb","number of sub-bands for PUSCH frequency hopping",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUSCH_HoppingBits","information in hopping bits",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPUSCH_x5fHoppingBitsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fzero_x5for_x5fzz","zero_or_zz")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for PUSCH, in the fomats of [start RB, number of RBs] or[SF0 start RB, SF0 number of RBs ... SF9 start RB, SF9 number of RBs]",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("GroupHop_Enable","whether enable group hopping for DMRS on PUCCH and PUSCH or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fGroupHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("SeqHop_Enable","whether enable sequence hopping for DMRS on PUSCH  or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fSeqHop_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("PUSCH_Delta_ss","used in determining the sequence-shift pattern for PUSCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_n_DMRS1","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUSCH_n_DMRS2","used in computing the cyclic shift for PUSCH DMRS",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PUCCH_Parameters","PUCCH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUCCH_Format","PUCCH format",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPUCCH_x5fFormatSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fFormat_x5f1","Format_1")),
	create_parm ("PUCCH_Delta_shift","used to calculate PUCCH cyclic shift Alfa",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PUCCH_SF_Alloc","which sub frames contain the PUCCH, valid when PUCCH_PUSCH is other than PUSCH",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")),
	create_parm ("PUCCH_NRB2","number of RBs used for transmisstion PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PUCCH_n1","resources used for transmisstion PUCCH format 1/1a/1b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PUCCH_n2","resources used for transmission PUCCH format 2/2a/2b",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","11")),
	create_parm ("PRACH_Parameters","PRACH parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PRACH_Enable","whether or not to enable PRACH",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPRACH_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("PRACH_Config","PRACH configuration index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_ResourceIndex","the PRACH Resource Index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_PrmbleIndex","preamble indexes, used to select preamble sequences from 64 preambles available in this cell",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("PRACH_RBOffset","PRACH frequency offset, the first RB available for PRACH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_LogicalIndex","logical index of root ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_Ncs","cyclic shifts of ZC sequence",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_HS_flag","high speed flag",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPRACH_x5fHS_x5fflagSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("SRS_Parameters","SRS parameters for LTE uplink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("SRS_BandwidthConfig","the cell-specific SRS bandwidth configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","7")),
	create_parm ("SRS_SF_Config","the cell-specific SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_MaxUpPts","whether enable the reconfiguration of maximum m_SRS_0 or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fSRS_x5fMaxUpPtsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("SRS_Bandwidth","the UE-specific SRS bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_HoppingBandwidth","the SRS hopping bandwidth",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("SRS_FreqPosition","the SRS frequency domain position",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_ConfigIndex","the UE-specific SRS configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_TransmissionComb","transmission comb",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_CyclicShift","used in computing the cyclic shift of SRS",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PowerParameters","power-related parameters",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PUSCH_PwrOffset","the power offset in dB for PUSCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUSCH_RS_PwrOffset","the power offset in dB for PUSCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_PwrOffset","the power offset in dB for PUCCH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PUCCH_RS_PwrOffset","the power offset in dB for PUCCH RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PRACH_PwrOffset","the power offset in dB for PRACH",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRS_PwrOffset","the power offset in dB for SRS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ShowRxAlgorithmParameters","show parameters for LTE uplink EVM measurement algorithm",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fShowRxAlgorithmParametersSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("SyncType","Initial synchronization type",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fSyncTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fPUSCH_x5fDMRS","PUSCH_DMRS")),
	create_parm ("RBAutoDetect","defines the RB allocation and modulation format detection mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fRBAutoDetectSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fRBDetAuto","RBDetAuto")),
	create_parm ("PUSCHIncludeInAnalysis","whether or not PUSCH is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPUSCHIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fYES","YES")),
	create_parm ("PUCCHIncludeInAnalysis","whether or not PUCCH is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPUCCHIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("SRSIncludeInAnalysis","whether or not SRS is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fSRSIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("PRACHIncludeInAnalysis","whether or not PRACH is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPRACHIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("PUSCHAutoSync","specify the sync slot type for PUSCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPUSCHAutoSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fYES","YES")),
	create_parm ("PUSCHSyncSlot","specify a slot index in a radio frame used for initial synchronization",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","6")),
	create_parm ("PUCCHAutoSync","specify the sync slot type for PUCCH",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPUCCHAutoSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fYES","YES")),
	create_parm ("PUCCHSyncSlot","specify the slot to use as the sync slot",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SRSAutoSync","specify the sync slot type for SRS",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fSRSAutoSyncSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fYES","YES")),
	create_parm ("SRSSyncSlot","specify the slot to use as the sync slot",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("ResLenInSlots","Result length in slots",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","20")),
	create_parm ("MeasOffset","specifies measurement offset in symbols, from which EVM is computed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MeasInterval","specifies measurement interval in symbols used for EVM computation, starting from the slot and symbol offset specified by MeasOffset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","140")),
	create_parm ("AnalysisBoundary","analysis start boundary",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fAnalysisBoundarySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fFRAME","ANALYSIS_BOUNDARY_FRAME")),
	create_parm ("CPLengthAutoDetect","specifies Cyclic Prefix length auto detect or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fCPLengthAutoDetectSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("MirrorFreqSpectrum","whether or not the entire frequency spectrum be flipped around the carrier frequency",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fMirrorFreqSpectrumSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("EqualizerTraining","Specify how equalizer is trained",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fEqualizerTrainingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fRS_x5fTraining","RS_Training")),
	create_parm ("EVMMinimization","specifies the amplitude err, timing err and frequency and phase err tracking and compensation mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fEVMMinimizationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fEVMMini3GPP","EVMMini3GPP")),
	create_parm ("EVMMinimizationAmp","whether or not tracking the amplitude err",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fEVMMinimizationAmpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("EVMMinimizationTiming","whether or not tracking the timing err",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fEVMMinimizationTimingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("EVMMinimizationFreqPhase","whether or not tracking the freq and phase err",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fEVMMinimizationFreqPhaseSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("EVMMinimizationIQOffset","whether or not tracking the IQ offset",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fEVMMinimizationIQOffsetSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("SymTimeAdjMode","symbol timing adjust mode",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fSymTimeAdjModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fMAX_x5fEVMWIN_x5fSTART_x5fEND","MAX_EVMWIN_START_END")),
	create_parm ("SymTimeAdj","specify how much data in cyclic prefix portion, backing up from the exact symbol timing are included for FFT computation in percentage of FFT length",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3.125")),
	create_parm ("ReportEVMIndB","specifies the EVM units in dB or not",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fReportEVMIndBSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("PowerBoostNormalize","whether or not the constellation be normalized",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fPowerBoostNormalizeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fYES","YES")),
	create_parm ("FramesToMeas","number of frames that will be averaged if AverageType is RMS (Video)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("SaveConstellation","if set YES, the measured vector used for EVM calculation shall be saved to Data File",
		PARM_INT,
		"_nLTE_x5fUL_x5fEVM_fSaveConstellationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fUL_x5fEVM_fNO","NO")),
	create_parm ("DisplayFrame","the Frame number for display some vector measurement results",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));


create_constant_form ("_nLTE_x5fDL_x5fEVM_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");

create_form_set("_nLTE_x5fDL_x5fEVM_fFrameModeSet",
	"_nLTE_x5fDL_x5fEVM_fFDD",
	"_nLTE_x5fDL_x5fEVM_fTDD",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");

create_form_set("_nLTE_x5fDL_x5fEVM_fTDD_x5fConfigSet",
	"_nLTE_x5fDL_x5fEVM_fConfig_x5f0",
	"_nLTE_x5fDL_x5fEVM_fConfig_x5f1",
	"_nLTE_x5fDL_x5fEVM_fConfig_x5f2",
	"_nLTE_x5fDL_x5fEVM_fConfig_x5f3",
	"_nLTE_x5fDL_x5fEVM_fConfig_x5f4",
	"_nLTE_x5fDL_x5fEVM_fConfig_x5f5",
	"_nLTE_x5fDL_x5fEVM_fConfig_x5f6",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");

create_form_set("_nLTE_x5fDL_x5fEVM_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fDL_x5fEVM_fConfig0",
	"_nLTE_x5fDL_x5fEVM_fConfig1",
	"_nLTE_x5fDL_x5fEVM_fConfig2",
	"_nLTE_x5fDL_x5fEVM_fConfig3",
	"_nLTE_x5fDL_x5fEVM_fConfig4",
	"_nLTE_x5fDL_x5fEVM_fConfig5",
	"_nLTE_x5fDL_x5fEVM_fConfig6",
	"_nLTE_x5fDL_x5fEVM_fConfig7",
	"_nLTE_x5fDL_x5fEVM_fConfig8",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");

create_form_set("_nLTE_x5fDL_x5fEVM_fBandwidthSet",
	"_nLTE_x5fDL_x5fEVM_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fDL_x5fEVM_fBW_x5f3_x5fMHz",
	"_nLTE_x5fDL_x5fEVM_fBW_x5f5_x5fMHz",
	"_nLTE_x5fDL_x5fEVM_fBW_x5f10_x5fMHz",
	"_nLTE_x5fDL_x5fEVM_fBW_x5f15_x5fMHz",
	"_nLTE_x5fDL_x5fEVM_fBW_x5f20_x5fMHz",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");

create_form_set("_nLTE_x5fDL_x5fEVM_fNumTxAntsSet",
	"_nLTE_x5fDL_x5fEVM_fTx1",
	"_nLTE_x5fDL_x5fEVM_fTx2",
	"_nLTE_x5fDL_x5fEVM_fTx4",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRx1", 
	"Rx1",
	0,
	"0",
	"Rx1");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRx2", 
	"Rx2",
	0,
	"1",
	"Rx2");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRx4", 
	"Rx4",
	0,
	"2",
	"Rx4");

create_form_set("_nLTE_x5fDL_x5fEVM_fNumRxAntsSet",
	"_nLTE_x5fDL_x5fEVM_fRx1",
	"_nLTE_x5fDL_x5fEVM_fRx2",
	"_nLTE_x5fDL_x5fEVM_fRx4",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRatio_x5f1", 
	"Ratio_1",
	0,
	"0",
	"Ratio 1");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRatio_x5f2", 
	"Ratio_2",
	0,
	"1",
	"Ratio 2");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRatio_x5f4", 
	"Ratio_4",
	0,
	"2",
	"Ratio 4");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRatio_x5f8", 
	"Ratio_8",
	0,
	"3",
	"Ratio 8");

create_form_set("_nLTE_x5fDL_x5fEVM_fOversamplingOptionSet",
	"_nLTE_x5fDL_x5fEVM_fRatio_x5f1",
	"_nLTE_x5fDL_x5fEVM_fRatio_x5f2",
	"_nLTE_x5fDL_x5fEVM_fRatio_x5f4",
	"_nLTE_x5fDL_x5fEVM_fRatio_x5f8",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");

create_form_set("_nLTE_x5fDL_x5fEVM_fCyclicPrefixSet",
	"_nLTE_x5fDL_x5fEVM_fNormal",
	"_nLTE_x5fDL_x5fEVM_fExtended",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fSS_x5fPerTxAntSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");

create_form_set("_nLTE_x5fDL_x5fEVM_fRB_x5fAllocTypeSet",
	"_nLTE_x5fDL_x5fEVM_fStartRB_x5fNumRBs",
	"_nLTE_x5fDL_x5fEVM_fRB_x5findices_x5f1D",
	"_nLTE_x5fDL_x5fEVM_fRB_x5findices_x5f2D",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNormal_x5fDuration", 
	"Normal_Duration",
	0,
	"0",
	"Normal_Duration");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fExtended_x5fDuration", 
	"Extended_Duration",
	0,
	"1",
	"Extended_Duration");

create_form_set("_nLTE_x5fDL_x5fEVM_fPHICH_x5fDurationSet",
	"_nLTE_x5fDL_x5fEVM_fNormal_x5fDuration",
	"_nLTE_x5fDL_x5fEVM_fExtended_x5fDuration",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNg_x5f1_x5f6", 
	"Ng_1_6",
	0,
	"0",
	"Ng 1/6");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNg_x5f1_x5f2", 
	"Ng_1_2",
	0,
	"1",
	"Ng 1/2");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNg_x5f1", 
	"Ng_1",
	0,
	"2",
	"Ng 1");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNg_x5f2", 
	"Ng_2",
	0,
	"3",
	"Ng 2");

create_form_set("_nLTE_x5fDL_x5fEVM_fPHICH_x5fNgSet",
	"_nLTE_x5fDL_x5fEVM_fNg_x5f1_x5f6",
	"_nLTE_x5fDL_x5fEVM_fNg_x5f1_x5f2",
	"_nLTE_x5fDL_x5fEVM_fNg_x5f1",
	"_nLTE_x5fDL_x5fEVM_fNg_x5f2",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fp_x5fB_x5fp_x5fA_x5f1", 
	"p_B_p_A_1",
	0,
	"0",
	"p_B_p_A_1");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fP_x5fB_x5f0", 
	"P_B_0",
	0,
	"1",
	"P_B_0");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fP_x5fB_x5f1", 
	"P_B_1",
	0,
	"2",
	"P_B_1");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fP_x5fB_x5f2", 
	"P_B_2",
	0,
	"3",
	"P_B_2");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fP_x5fB_x5f3", 
	"P_B_3",
	0,
	"4",
	"P_B_3");

create_form_set("_nLTE_x5fDL_x5fEVM_fPDSCH_x5fPowerRatioSet",
	"_nLTE_x5fDL_x5fEVM_fp_x5fB_x5fp_x5fA_x5f1",
	"_nLTE_x5fDL_x5fEVM_fP_x5fB_x5f0",
	"_nLTE_x5fDL_x5fEVM_fP_x5fB_x5f1",
	"_nLTE_x5fDL_x5fEVM_fP_x5fB_x5f2",
	"_nLTE_x5fDL_x5fEVM_fP_x5fB_x5f3",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fShowRxAlgorithmParametersSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fP_x5fSS", 
	"P_SS",
	0,
	"0",
	"P_SS");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRS", 
	"RS",
	0,
	"1",
	"RS");

create_form_set("_nLTE_x5fDL_x5fEVM_fSyncTypeSet",
	"_nLTE_x5fDL_x5fEVM_fP_x5fSS",
	"_nLTE_x5fDL_x5fEVM_fRS",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fPDSCHIncludeInAnalysisSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fP_x5fSSIncludeInAnalysisSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fS_x5fSSIncludeInAnalysisSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fPBCHIncludeInAnalysisSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fPHICHIncludeInAnalysisSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fPCFICHIncludeInAnalysisSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fPDCCHIncludeInAnalysisSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fRSIncludeInAnalysisSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fCellIDAuto", 
	"CellIDAuto",
	0,
	"0",
	"CellIDAuto");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fCellIDManual", 
	"CellIDManual",
	0,
	"1",
	"CellIDManual");

create_form_set("_nLTE_x5fDL_x5fEVM_fCellIDDetectModeSet",
	"_nLTE_x5fDL_x5fEVM_fCellIDAuto",
	"_nLTE_x5fDL_x5fEVM_fCellIDManual",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fAutodetect", 
	"Autodetect",
	0,
	"0",
	"Autodetect");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fPort0", 
	"Port0",
	0,
	"1",
	"Port0");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fPort1", 
	"Port1",
	0,
	"2",
	"Port1");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fPort2", 
	"Port2",
	0,
	"3",
	"Port2");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fPort3", 
	"Port3",
	0,
	"4",
	"Port3");

create_form_set("_nLTE_x5fDL_x5fEVM_fRef_x5fTxAntSet",
	"_nLTE_x5fDL_x5fEVM_fAutodetect",
	"_nLTE_x5fDL_x5fEVM_fPort0",
	"_nLTE_x5fDL_x5fEVM_fPort1",
	"_nLTE_x5fDL_x5fEVM_fPort2",
	"_nLTE_x5fDL_x5fEVM_fPort3",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRx0", 
	"Rx0",
	0,
	"0",
	"Rx0");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRx1", 
	"Rx1",
	0,
	"1",
	"Rx1");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRx2", 
	"Rx2",
	0,
	"2",
	"Rx2");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRx3", 
	"Rx3",
	0,
	"3",
	"Rx3");

create_form_set("_nLTE_x5fDL_x5fEVM_fRef_x5fInputChannelSet",
	"_nLTE_x5fDL_x5fEVM_fRx0",
	"_nLTE_x5fDL_x5fEVM_fRx1",
	"_nLTE_x5fDL_x5fEVM_fRx2",
	"_nLTE_x5fDL_x5fEVM_fRx3",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fIncludeInactiveAntennaPathsSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNoDecoding", 
	"NoDecoding",
	0,
	"0",
	"NoDecoding");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fDecoding", 
	"Decoding",
	0,
	"1",
	"Decoding");

create_form_set("_nLTE_x5fDL_x5fEVM_fMIMODecodingSet",
	"_nLTE_x5fDL_x5fEVM_fNoDecoding",
	"_nLTE_x5fDL_x5fEVM_fDecoding",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRBDetManual", 
	"RBDetManual",
	0,
	"0",
	"Manual");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRBDetAuto", 
	"RBDetAuto",
	0,
	"1",
	"Auto");

create_form_set("_nLTE_x5fDL_x5fEVM_fRBAutoDetectSet",
	"_nLTE_x5fDL_x5fEVM_fRBDetManual",
	"_nLTE_x5fDL_x5fEVM_fRBDetAuto",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fFRAME", 
	"ANALYSIS_BOUNDARY_FRAME",
	0,
	"0",
	"ANALYSIS_BOUNDARY_FRAME");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fHALFFRAME", 
	"ANALYSIS_BOUNDARY_HALFFRAME",
	0,
	"1",
	"ANALYSIS_BOUNDARY_HALFFRAME");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fSUBFRAME", 
	"ANALYSIS_BOUNDARY_SUBFRAME",
	0,
	"2",
	"ANALYSIS_BOUNDARY_SUBFRAME");

create_form_set("_nLTE_x5fDL_x5fEVM_fAnalysisBoundarySet",
	"_nLTE_x5fDL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fFRAME",
	"_nLTE_x5fDL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fHALFFRAME",
	"_nLTE_x5fDL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fSUBFRAME",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fCPLengthAutoDetectSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fMirrorFreqSpectrumSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fEqTraingOff", 
	"EqTraingOff",
	0,
	"0",
	"EqTraingOff");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fRS_x5fTraining", 
	"RS_Training",
	0,
	"1",
	"RS_Training");

create_form_set("_nLTE_x5fDL_x5fEVM_fEqualizerTrainingSet",
	"_nLTE_x5fDL_x5fEVM_fEqTraingOff",
	"_nLTE_x5fDL_x5fEVM_fRS_x5fTraining",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fOff", 
	"Off",
	0,
	"0",
	"Off");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fTracking", 
	"Tracking",
	0,
	"1",
	"Tracking");

create_form_set("_nLTE_x5fDL_x5fEVM_fEVMMinimizationSet",
	"_nLTE_x5fDL_x5fEVM_fOff",
	"_nLTE_x5fDL_x5fEVM_fTracking",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fEVMMinimizationAmpSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fEVMMinimizationTimingSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fEVMMinimizationFreqPhaseSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fMAX_x5fEVMWIN_x5fSTART_x5fEND", 
	"MAX_EVMWIN_START_END",
	0,
	"0",
	"Max of EVM Window Start/End");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fMIN_x5fEVMWIN_x5fSTART_x5fEND", 
	"MIN_EVMWIN_START_END",
	0,
	"1",
	"Min of EVM Window Start/End");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fEVMWIN_x5fSTART", 
	"EVMWIN_START",
	0,
	"2",
	"EVM Window Start");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fEVMWIN_x5fSTART_x5fEnd", 
	"EVMWIN_START_End",
	0,
	"3",
	"EVM Window End");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fEVMWIN_x5fCenter", 
	"EVMWIN_Center",
	0,
	"4",
	"EVM Window Center");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fPERCENT_x5fFFT_x5fSIZE", 
	"PERCENT_FFT_SIZE",
	0,
	"5",
	"Percent of FFT Size");

create_form_set("_nLTE_x5fDL_x5fEVM_fSymTimeAdjModeSet",
	"_nLTE_x5fDL_x5fEVM_fMAX_x5fEVMWIN_x5fSTART_x5fEND",
	"_nLTE_x5fDL_x5fEVM_fMIN_x5fEVMWIN_x5fSTART_x5fEND",
	"_nLTE_x5fDL_x5fEVM_fEVMWIN_x5fSTART",
	"_nLTE_x5fDL_x5fEVM_fEVMWIN_x5fSTART_x5fEnd",
	"_nLTE_x5fDL_x5fEVM_fEVMWIN_x5fCenter",
	"_nLTE_x5fDL_x5fEVM_fPERCENT_x5fFFT_x5fSIZE",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fReportEVMIndBSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fPowerBoostNormalizeSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fDL_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fDL_x5fEVM_fSaveConstellationSet",
	"_nLTE_x5fDL_x5fEVM_fNO",
	"_nLTE_x5fDL_x5fEVM_fYES",
	"StdForm");

create_item ("LTE_DL_EVM","Downlink EVM measurement",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_DL_EVM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_nLTE_x5fDL_x5fEVM_lsdflte_x5fmeasurements",
	SPComponentAnnotFmt,
	"SYM_LTE_DL_EVM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RLoad","load resistance",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2500 MHz")),
	create_parm ("SystemParameters","system parameters for LTE downlink signals",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fTx1","Tx1")),
	create_parm ("NumRxAnts","number of Rx Antennas",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fNumRxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fRx1","Rx1")),
	create_parm ("OversamplingOption","Ratio 1, Ratio 2, Ratio 4, Ratio 8",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fOversamplingOptionSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fRatio_x5f2","Ratio_2")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNormal","Normal")),
	create_parm ("CellID_Sector","the index of cell identity within the physical-layer cell-identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CellID_Group","the index of cell identity group",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SS_PerTxAnt","whether synchronization signals (P-SS and S-SS) are transmitted on each transmit antenna",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fSS_x5fPerTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNO","NO")),
	create_parm ("UEs_MIMO_Mode","MIMO Mode for each UE, 1 for TD, 0 for SM",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CDD_Mode","CDD Mode for each UE, 1 for Zero-Delay, 0 for Large-Delay",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_CdBlk_Index","codebook index for precoding for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0}")),
	create_parm ("UEs_NumOfCWs","number of code words for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1}")),
	create_parm ("UEs_NumOfLayers","number of layers for each UE",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{1, 1, 1, 1, 1, 1}")),
	create_parm ("UE1_Parameters","parameters for coded UE1",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("UE1_MappingType","the modulation orders for UE 1 in each subframe, valid when UE1_Payload is not set to MCS index",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("UE1_RB_Alloc","the RB allocation for UE 1, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("OtherUEs_Parameters","parameters for other uncoded Ues",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("OtherUEs_MappingType","the modulation orders for other UEs  except UE 1 in all subframes",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0}")),
	create_parm ("UE2_RB_Alloc","the RB allocation for UE 2, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE3_RB_Alloc","the RB allocation for UE 3, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE4_RB_Alloc","the RB allocation for UE 4, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE5_RB_Alloc","the RB allocation for UE 5, in the formats of [start RB, number of RBs] or [ [SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("UE6_RB_Alloc","the RB allocation for UE 6, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0}")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PHICH_Duration","type of PHICH duration",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fPHICH_x5fDurationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNormal_x5fDuration","Normal_Duration")),
	create_parm ("PHICH_Ng","PHICH Ng value",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fPHICH_x5fNgSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNg_x5f1_x5f6","Ng_1_6")),
	create_parm ("PCFICH_Rb","PCFICH-to-RS EPRE ratio in dB in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Ra","PHICH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PHICH_Rb","PHICH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Ra","PBCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PBCH_Rb","PBCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Ra","PDCCH-to-RS EPRE ratio in dB  in symbols with RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDCCH_Rb","PDCCH-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PDSCH_PowerRatio","PDSCH Cell Specific Ratio",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fPDSCH_x5fPowerRatioSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fp_x5fB_x5fp_x5fA_x5f1","p_B_p_A_1")),
	create_parm ("UEs_Pa","PDSCH-to-RS EPRE ratio in dB in symbols without RS for each UE",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}")),
	create_parm ("PSS_Ra","PSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SSS_Ra","SSS-to-RS EPRE ratio in dB in symbols without RS",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ShowRxAlgorithmParameters","show parameters for LTE downlink EVM measurement algorithm",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fShowRxAlgorithmParametersSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fYES","YES")),
	create_parm ("SyncType","Initial synchronization type",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fSyncTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fP_x5fSS","P_SS")),
	create_parm ("PDSCHIncludeInAnalysis","whether or not PDSCH is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fPDSCHIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fYES","YES")),
	create_parm ("P_SSIncludeInAnalysis","whether or not P_SS is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fP_x5fSSIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fYES","YES")),
	create_parm ("S_SSIncludeInAnalysis","whether or not S_SS is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fS_x5fSSIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fYES","YES")),
	create_parm ("PBCHIncludeInAnalysis","whether or not PBCH is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fPBCHIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fYES","YES")),
	create_parm ("PHICHIncludeInAnalysis","whether or not PHICH is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fPHICHIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fYES","YES")),
	create_parm ("PCFICHIncludeInAnalysis","whether or not PCFICH is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fPCFICHIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fYES","YES")),
	create_parm ("PDCCHIncludeInAnalysis","whether or not PDCCH is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fPDCCHIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fYES","YES")),
	create_parm ("RSIncludeInAnalysis","whether or not RS is included in computing composite results such as EVM, EVMPk and OFDMRBErrorMagSpectrum",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fRSIncludeInAnalysisSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fYES","YES")),
	create_parm ("CellIDDetectMode","Cell ID detect mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fCellIDDetectModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fCellIDAuto","CellIDAuto")),
	create_parm ("Ref_TxAnt","determines the Tx antenna port and works with Ref_InputChannel to determine which Tx/Rx path to use for initial equalization",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fRef_x5fTxAntSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fAutodetect","Autodetect")),
	create_parm ("Ref_InputChannel","determines the Rx antenna port and works with Ref_TxAnt to determine which Tx/Rx path to use for initial equalization",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fRef_x5fInputChannelSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fRx0","Rx0")),
	create_parm ("AntDetThresh","specify threshold level of RS power level in dB relative to that of a reference antenna port for automatic detection of active antenna",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-36")),
	create_parm ("IncludeInactiveAntennaPaths","means only Tx/Rx antenna paths that have an average RS power above the threshold will be displayed on the MIMO traces",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fIncludeInactiveAntennaPathsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNO","NO")),
	create_parm ("MIMODecoding","specifies the MIMO decoding",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fMIMODecodingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fDecoding","Decoding")),
	create_parm ("RBAutoDetect","defines the RB allocation and modulation format detection mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fRBAutoDetectSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fRBDetAuto","RBDetAuto")),
	create_parm ("ResLenInSlots","Result length in slots",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","20")),
	create_parm ("MeasOffset","specifies measurement offset in symbols, from which EVM is computed",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MeasInterval","specifies measurement interval in symbols used for EVM computation, starting from the slot and symbol offset specified by MeasOffset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","140")),
	create_parm ("AnalysisBoundary","analysis start boundary",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fAnalysisBoundarySet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fANALYSIS_x5fBOUNDARY_x5fFRAME","ANALYSIS_BOUNDARY_FRAME")),
	create_parm ("CPLengthAutoDetect","specifies Cyclic Prefix length auto detect or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fCPLengthAutoDetectSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNO","NO")),
	create_parm ("MirrorFreqSpectrum","whether or not the entire frequency spectrum be flipped around the carrier frequency",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fMirrorFreqSpectrumSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNO","NO")),
	create_parm ("EqualizerTraining","specify how equalizer is trained",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fEqualizerTrainingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fRS_x5fTraining","RS_Training")),
	create_parm ("EqualizerTrainingMovingAvgLength","specify window length of the equalizer moving average for subcarrier smoothing",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("EVMMinimization","specifies the amplitude err, timing err and frequency and phase err tracking and compensation mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fEVMMinimizationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fTracking","Tracking")),
	create_parm ("EVMMinimizationAmp","whether or not tracking the amplitude err",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fEVMMinimizationAmpSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNO","NO")),
	create_parm ("EVMMinimizationTiming","whether or not tracking the timing err",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fEVMMinimizationTimingSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNO","NO")),
	create_parm ("EVMMinimizationFreqPhase","whether or not tracking the freq and phase err",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fEVMMinimizationFreqPhaseSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNO","NO")),
	create_parm ("SymTimeAdjMode","symbol timing adjust mode",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fSymTimeAdjModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fMAX_x5fEVMWIN_x5fSTART_x5fEND","MAX_EVMWIN_START_END")),
	create_parm ("SymTimeAdj","specify how much data in cyclic prefix portion, backing up from the exact symbol timing are included for FFT computation in percentage of FFT length",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-3.125")),
	create_parm ("ReportEVMIndB","specifies the EVM units in dB or not",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fReportEVMIndBSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNO","NO")),
	create_parm ("PowerBoostNormalize","whether or not the constellation be normalized",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fPowerBoostNormalizeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fYES","YES")),
	create_parm ("SaveConstellation","if set YES, the measured vector used for EVM calculation shall be saved to Data File",
		PARM_INT,
		"_nLTE_x5fDL_x5fEVM_fSaveConstellationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fDL_x5fEVM_fNO","NO")),
	create_parm ("FramesToMeas","number of frames that will be measured",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("DisplayFrame","the Frame number for display some vector measurement results",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));


create_constant_form ("_nLTE_x5fBER_x5fFER_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");

create_constant_form ("_nLTE_x5fBER_x5fFER_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");

create_form_set("_nLTE_x5fBER_x5fFER_fLinkDirSet",
	"_nLTE_x5fBER_x5fFER_fDownlink",
	"_nLTE_x5fBER_x5fFER_fUplink",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fRawBits", 
	"RawBits",
	0,
	"0",
	"RawBits");

create_constant_form ("_nLTE_x5fBER_x5fFER_fChannelBits", 
	"ChannelBits",
	0,
	"1",
	"ChannelBits");

create_form_set("_nLTE_x5fBER_x5fFER_fSourceTypeSet",
	"_nLTE_x5fBER_x5fFER_fRawBits",
	"_nLTE_x5fBER_x5fFER_fChannelBits",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fFDD", 
	"FDD",
	0,
	"0",
	"FDD");

create_constant_form ("_nLTE_x5fBER_x5fFER_fTDD", 
	"TDD",
	0,
	"1",
	"TDD");

create_form_set("_nLTE_x5fBER_x5fFER_fFrameModeSet",
	"_nLTE_x5fBER_x5fFER_fFDD",
	"_nLTE_x5fBER_x5fFER_fTDD",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig_x5f0", 
	"Config_0",
	0,
	"0",
	"Config 0");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig_x5f1", 
	"Config_1",
	0,
	"1",
	"Config 1");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig_x5f2", 
	"Config_2",
	0,
	"2",
	"Config 2");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig_x5f3", 
	"Config_3",
	0,
	"3",
	"Config 3");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig_x5f4", 
	"Config_4",
	0,
	"4",
	"Config 4");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig_x5f5", 
	"Config_5",
	0,
	"5",
	"Config 5");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig_x5f6", 
	"Config_6",
	0,
	"6",
	"Config 6");

create_form_set("_nLTE_x5fBER_x5fFER_fTDD_x5fConfigSet",
	"_nLTE_x5fBER_x5fFER_fConfig_x5f0",
	"_nLTE_x5fBER_x5fFER_fConfig_x5f1",
	"_nLTE_x5fBER_x5fFER_fConfig_x5f2",
	"_nLTE_x5fBER_x5fFER_fConfig_x5f3",
	"_nLTE_x5fBER_x5fFER_fConfig_x5f4",
	"_nLTE_x5fBER_x5fFER_fConfig_x5f5",
	"_nLTE_x5fBER_x5fFER_fConfig_x5f6",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig0", 
	"Config0",
	0,
	"0",
	"Config 0");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig1", 
	"Config1",
	0,
	"1",
	"Config 1");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig2", 
	"Config2",
	0,
	"2",
	"Config 2");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig3", 
	"Config3",
	0,
	"3",
	"Config 3");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig4", 
	"Config4",
	0,
	"4",
	"Config 4");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig5", 
	"Config5",
	0,
	"5",
	"Config 5");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig6", 
	"Config6",
	0,
	"6",
	"Config 6");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig7", 
	"Config7",
	0,
	"7",
	"Config 7");

create_constant_form ("_nLTE_x5fBER_x5fFER_fConfig8", 
	"Config8",
	0,
	"8",
	"Config 8");

create_form_set("_nLTE_x5fBER_x5fFER_fSpecialSF_x5fConfigSet",
	"_nLTE_x5fBER_x5fFER_fConfig0",
	"_nLTE_x5fBER_x5fFER_fConfig1",
	"_nLTE_x5fBER_x5fFER_fConfig2",
	"_nLTE_x5fBER_x5fFER_fConfig3",
	"_nLTE_x5fBER_x5fFER_fConfig4",
	"_nLTE_x5fBER_x5fFER_fConfig5",
	"_nLTE_x5fBER_x5fFER_fConfig6",
	"_nLTE_x5fBER_x5fFER_fConfig7",
	"_nLTE_x5fBER_x5fFER_fConfig8",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBW_x5f1_x5f4_x5fMHz", 
	"BW_1_4_MHz",
	0,
	"0",
	"BW 1.4 MHz");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBW_x5f3_x5fMHz", 
	"BW_3_MHz",
	0,
	"1",
	"BW 3 MHz");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBW_x5f5_x5fMHz", 
	"BW_5_MHz",
	0,
	"2",
	"BW 5 MHz");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBW_x5f10_x5fMHz", 
	"BW_10_MHz",
	0,
	"3",
	"BW 10 MHz");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBW_x5f15_x5fMHz", 
	"BW_15_MHz",
	0,
	"4",
	"BW 15 MHz");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBW_x5f20_x5fMHz", 
	"BW_20_MHz",
	0,
	"5",
	"BW 20 MHz");

create_form_set("_nLTE_x5fBER_x5fFER_fBandwidthSet",
	"_nLTE_x5fBER_x5fFER_fBW_x5f1_x5f4_x5fMHz",
	"_nLTE_x5fBER_x5fFER_fBW_x5f3_x5fMHz",
	"_nLTE_x5fBER_x5fFER_fBW_x5f5_x5fMHz",
	"_nLTE_x5fBER_x5fFER_fBW_x5f10_x5fMHz",
	"_nLTE_x5fBER_x5fFER_fBW_x5f15_x5fMHz",
	"_nLTE_x5fBER_x5fFER_fBW_x5f20_x5fMHz",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");

create_constant_form ("_nLTE_x5fBER_x5fFER_fExtended", 
	"Extended",
	0,
	"1",
	"Extended");

create_form_set("_nLTE_x5fBER_x5fFER_fCyclicPrefixSet",
	"_nLTE_x5fBER_x5fFER_fNormal",
	"_nLTE_x5fBER_x5fFER_fExtended",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fMCS_x5findex", 
	"MCS_index",
	0,
	"0",
	"MCS index");

create_constant_form ("_nLTE_x5fBER_x5fFER_fTransport_x5fblock_x5fsize", 
	"Transport_block_size",
	0,
	"1",
	"Transport block size");

create_constant_form ("_nLTE_x5fBER_x5fFER_fCode_x5frate", 
	"Code_rate",
	0,
	"2",
	"Code rate");

create_form_set("_nLTE_x5fBER_x5fFER_fPayload_x5fConfigSet",
	"_nLTE_x5fBER_x5fFER_fMCS_x5findex",
	"_nLTE_x5fBER_x5fFER_fTransport_x5fblock_x5fsize",
	"_nLTE_x5fBER_x5fFER_fCode_x5frate",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fStartRB_x5fNumRBs", 
	"StartRB_NumRBs",
	0,
	"0",
	"StartRB + NumRBs");

create_constant_form ("_nLTE_x5fBER_x5fFER_fRB_x5findices_x5f1D", 
	"RB_indices_1D",
	0,
	"1",
	"RB indices (1D)");

create_constant_form ("_nLTE_x5fBER_x5fFER_fRB_x5findices_x5f2D", 
	"RB_indices_2D",
	0,
	"2",
	"RB indices (2D)");

create_form_set("_nLTE_x5fBER_x5fFER_fRB_x5fAllocTypeSet",
	"_nLTE_x5fBER_x5fFER_fStartRB_x5fNumRBs",
	"_nLTE_x5fBER_x5fFER_fRB_x5findices_x5f1D",
	"_nLTE_x5fBER_x5fFER_fRB_x5findices_x5f2D",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fTx1", 
	"Tx1",
	0,
	"0",
	"Tx1");

create_constant_form ("_nLTE_x5fBER_x5fFER_fTx2", 
	"Tx2",
	0,
	"1",
	"Tx2");

create_constant_form ("_nLTE_x5fBER_x5fFER_fTx4", 
	"Tx4",
	0,
	"2",
	"Tx4");

create_form_set("_nLTE_x5fBER_x5fFER_fNumTxAntsSet",
	"_nLTE_x5fBER_x5fFER_fTx1",
	"_nLTE_x5fBER_x5fFER_fTx2",
	"_nLTE_x5fBER_x5fFER_fTx4",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fPUSCH", 
	"PUSCH",
	0,
	"0",
	"PUSCH");

create_constant_form ("_nLTE_x5fBER_x5fFER_fPUCCH", 
	"PUCCH",
	0,
	"1",
	"PUCCH");

create_constant_form ("_nLTE_x5fBER_x5fFER_fboth", 
	"both",
	0,
	"2",
	"both");

create_form_set("_nLTE_x5fBER_x5fFER_fPUCCH_x5fPUSCHSet",
	"_nLTE_x5fBER_x5fFER_fPUSCH",
	"_nLTE_x5fBER_x5fFER_fPUCCH",
	"_nLTE_x5fBER_x5fFER_fboth",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fBER_x5fFER_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fBER_x5fFER_fSRS_x5fEnableSet",
	"_nLTE_x5fBER_x5fFER_fNO",
	"_nLTE_x5fBER_x5fFER_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fNone", 
	"None",
	0,
	"0",
	"None");

create_constant_form ("_nLTE_x5fBER_x5fFER_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");

create_form_set("_nLTE_x5fBER_x5fFER_fPlotSet",
	"_nLTE_x5fBER_x5fFER_fNone",
	"_nLTE_x5fBER_x5fFER_fRectangular",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fBER_x5fFER_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fBER_x5fFER_fControlSimulationSet",
	"_nLTE_x5fBER_x5fFER_fNO",
	"_nLTE_x5fBER_x5fFER_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBER_x5fvs_x5findex", 
	"BER vs index",
	0,
	"0",
	"BER vs index");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f10_x5fbits", 
	"BER vs index every 10 bits",
	0,
	"1",
	"BER vs index every 10 bits");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f100_x5fbits", 
	"BER vs index every 100 bits",
	0,
	"2",
	"BER vs index every 100 bits");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f1000_x5fbits", 
	"BER vs index every 1000 bits",
	0,
	"3",
	"BER vs index every 1000 bits");

create_constant_form ("_nLTE_x5fBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5fBitsPerFrame_x5fbits", 
	"BER vs index every BitsPerFrame bits",
	0,
	"4",
	"BER vs index every BitsPerFrame bits");

create_constant_form ("_nLTE_x5fBER_x5fFER_fFinal_x5fBER", 
	"Final BER",
	0,
	"5",
	"Final BER");

create_form_set("_nLTE_x5fBER_x5fFER_fOutputBERSet",
	"_nLTE_x5fBER_x5fFER_fBER_x5fvs_x5findex",
	"_nLTE_x5fBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f10_x5fbits",
	"_nLTE_x5fBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f100_x5fbits",
	"_nLTE_x5fBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f1000_x5fbits",
	"_nLTE_x5fBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5fBitsPerFrame_x5fbits",
	"_nLTE_x5fBER_x5fFER_fFinal_x5fBER",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fFER_x5fvs_x5fframe", 
	"FER vs frame",
	0,
	"0",
	"FER vs frame");

create_constant_form ("_nLTE_x5fBER_x5fFER_fFER_x5fvs_x5fframe_x5fevery_x5f10_x5fframes", 
	"FER vs frame every 10 frames",
	0,
	"1",
	"FER vs frame every 10 frames");

create_constant_form ("_nLTE_x5fBER_x5fFER_fFinal_x5fFER", 
	"Final FER",
	0,
	"2",
	"Final FER");

create_constant_form ("_nLTE_x5fBER_x5fFER_fNo_x5fFER", 
	"No FER",
	0,
	"3",
	"No FER");

create_form_set("_nLTE_x5fBER_x5fFER_fOutputFERSet",
	"_nLTE_x5fBER_x5fFER_fFER_x5fvs_x5fframe",
	"_nLTE_x5fBER_x5fFER_fFER_x5fvs_x5fframe_x5fevery_x5f10_x5fframes",
	"_nLTE_x5fBER_x5fFER_fFinal_x5fFER",
	"_nLTE_x5fBER_x5fFER_fNo_x5fFER",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fBER_x5fFER_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fBER_x5fFER_fEnable64QAMSet",
	"_nLTE_x5fBER_x5fFER_fNO",
	"_nLTE_x5fBER_x5fFER_fYES",
	"StdForm");

create_constant_form ("_nLTE_x5fBER_x5fFER_fData_x5fand_x5fControl_x5fMultiplexing", 
	"Data_and_Control_Multiplexing",
	0,
	"0",
	"Data and Control Multiplexing");

create_constant_form ("_nLTE_x5fBER_x5fFER_fData_x5fOnly", 
	"Data_Only",
	0,
	"1",
	"Data Only");

create_constant_form ("_nLTE_x5fBER_x5fFER_fControl_x5fOnly", 
	"Control_Only",
	0,
	"2",
	"Control Only");

create_form_set("_nLTE_x5fBER_x5fFER_fPUSCH_x5fTransModeSet",
	"_nLTE_x5fBER_x5fFER_fData_x5fand_x5fControl_x5fMultiplexing",
	"_nLTE_x5fBER_x5fFER_fData_x5fOnly",
	"_nLTE_x5fBER_x5fFER_fControl_x5fOnly",
	"StdForm");

create_item ("LTE_BER_FER","Bit Error Rate and Frame Error Rate estimation in LTE library",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_BER_FER",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nLTE_x5fBER_x5fFER_lsdflte_x5fmeasurements",
	SPComponentAnnotFmt,
	"SYM_LTE_BER_FER",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("LinkDir","link direction",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fDownlink","Downlink")),
	create_parm ("SourceType","The source is including channel coding or not",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fSourceTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fRawBits","RawBits")),
	create_parm ("FrameMode","frame mode",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fFrameModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fFDD","FDD")),
	create_parm ("TDD_Config","downlink and uplink allocations for TDD",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fTDD_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fConfig_x5f0","Config_0")),
	create_parm ("SpecialSF_Config","special subframe configuration for TDD",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fSpecialSF_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fConfig4","Config4")),
	create_parm ("Bandwidth","bandwidth",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fBandwidthSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fBW_x5f5_x5fMHz","BW_5_MHz")),
	create_parm ("CyclicPrefix","type of cyclic prefix",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fCyclicPrefixSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fNormal","Normal")),
	create_parm ("MappingType","the modulation orders for the UE in each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}")),
	create_parm ("Payload_Config","the configuration mode of input data for payload",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fPayload_x5fConfigSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fTransport_x5fblock_x5fsize","Transport_block_size")),
	create_parm ("Payload","the input payload, the meaning of the input is defined in Payload_Config",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555}")),
	create_parm ("RB_AllocType","RB allocation type",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fRB_x5fAllocTypeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fStartRB_x5fNumRBs","StartRB_NumRBs")),
	create_parm ("RB_Alloc","the RB allocation for the UE, in the formats of [start RB, number of RBs] or [[SF0 start RB, SF0 number of RBs], ",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0, 25}")),
	create_parm ("NumTxAnts","number of Tx Antennas",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fNumTxAntsSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fTx1","Tx1")),
	create_parm ("NumOfLayers","number of layers for one codeword can be up to 2 for DL (for transmit diversity, it should be set to 1), and be up to 1 for UL",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PDCCH_SymsPerSF","number of OFDM symbols of PDCCH for each subframe",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}")),
	create_parm ("PUCCH_PUSCH","PUCCH and PUSCH selection",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fPUCCH_x5fPUSCHSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fPUSCH","PUSCH")),
	create_parm ("SRS_Enable","sounding reference symbol is enable",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fSRS_x5fEnableSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fNO","NO")),
	create_parm ("SRS_SF_Config","SRS subframe configuration",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Plot","Plot data when set to 'Rectangular' and Simulation Setup set to 'Open Data Display when simulation completes'",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fPlotSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fNone","None")),
	create_parm ("FrameDelay","Delay frame numbers for ref input pin",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FrameStart","Data collection start frame index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("FrameStop","Data collection stop frame index when EstRelVariance is not met",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("ControlSimulation","Let sink control how long the simulation will run?",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fControlSimulationSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fYES","YES")),
	create_parm ("EstRelVariance","BER estimation relative variance",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.01")),
	create_parm ("OutputBER","BER output",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fOutputBERSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fFinal_x5fBER","Final_BER")),
	create_parm ("OutputFER","FER output",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fOutputFERSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fFinal_x5fFER","Final_FER")),
	create_parm ("StatusUpdatePeriod","Status update period in number of bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1000")),
	create_parm ("Enable64QAM","indicates whether 64QAM is allowed in uplink",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fEnable64QAMSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fYES","YES")),
	create_parm ("PUSCH_TransMode","whether control and data are sent via PUSCH",
		PARM_INT,
		"_nLTE_x5fBER_x5fFER_fPUSCH_x5fTransModeSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fBER_x5fFER_fData_x5fand_x5fControl_x5fMultiplexing","Data_and_Control_Multiplexing")),
	create_parm ("RI_NumInfoBits","RI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("RI_BetaOffsetIndex","RI offset values, used in calculating the number of coded RI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_NumInfoBits","CQI information bits size",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{0}")),
	create_parm ("CQI_BetaOffsetIndex","CQI offset values, used in calculating the number of coded CQI symbols",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","{2}")));


create_constant_form ("_n_x5fLTE_x5fRF_x5fCM_fNone", 
	"None",
	0,
	"0",
	"None");

create_constant_form ("_n_x5fLTE_x5fRF_x5fCM_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");

create_form_set("_n_x5fLTE_x5fRF_x5fCM_fPlotSet",
	"_n_x5fLTE_x5fRF_x5fCM_fNone",
	"_n_x5fLTE_x5fRF_x5fCM_fRectangular",
	"StdForm");

create_item ("_LTE_RF_CM","Cubic Metric (CM) measurement",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_RF_CM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLTE_x5fRF_x5fCM_lsdflte_x5fmeasurements",
	SPComponentAnnotFmt,
	"SYM_LTE_RF_CM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_n_x5fLTE_x5fRF_x5fCM_fPlotSet",
		UNITLESS_UNIT,
		prm("_n_x5fLTE_x5fRF_x5fCM_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")));


create_constant_form ("_nLTE_x5fRF_x5fCM_fNone", 
	"None",
	0,
	"0",
	"None");

create_constant_form ("_nLTE_x5fRF_x5fCM_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");

create_form_set("_nLTE_x5fRF_x5fCM_fPlotSet",
	"_nLTE_x5fRF_x5fCM_fNone",
	"_nLTE_x5fRF_x5fCM_fRectangular",
	"StdForm");

create_item ("LTE_RF_CM","Cubic Metric (CM) measurement",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_RF_CM",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_RF_CM",
	SPDesignAnnotFmt,
	"SYM_LTE_RF_CM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_nLTE_x5fRF_x5fCM_fPlotSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRF_x5fCM_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")));


create_constant_form ("_n_x5fLTE_x5fRF_x5fCCDF_fNone", 
	"None",
	0,
	"0",
	"None");

create_constant_form ("_n_x5fLTE_x5fRF_x5fCCDF_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");

create_form_set("_n_x5fLTE_x5fRF_x5fCCDF_fPlotSet",
	"_n_x5fLTE_x5fRF_x5fCCDF_fNone",
	"_n_x5fLTE_x5fRF_x5fCCDF_fRectangular",
	"StdForm");

create_constant_form ("_n_x5fLTE_x5fRF_x5fCCDF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_n_x5fLTE_x5fRF_x5fCCDF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_n_x5fLTE_x5fRF_x5fCCDF_fOutputPeakMeanSet",
	"_n_x5fLTE_x5fRF_x5fCCDF_fNO",
	"_n_x5fLTE_x5fRF_x5fCCDF_fYES",
	"StdForm");

create_item ("_LTE_RF_CCDF","CCDF measurement",
	"L",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_LTE_RF_CCDF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fLTE_x5fRF_x5fCCDF_lsdflte_x5fmeasurements",
	SPComponentAnnotFmt,
	"SYM_LTE_RF_CCDF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_n_x5fLTE_x5fRF_x5fCCDF_fPlotSet",
		UNITLESS_UNIT,
		prm("_n_x5fLTE_x5fRF_x5fCCDF_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")),
	create_parm ("NumBins","Number of points in the CCDF curve",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("OutputPeakMean","Output signal peak and mean values",
		PARM_INT,
		"_n_x5fLTE_x5fRF_x5fCCDF_fOutputPeakMeanSet",
		UNITLESS_UNIT,
		prm("_n_x5fLTE_x5fRF_x5fCCDF_fNO","NO")));


create_constant_form ("_nLTE_x5fRF_x5fCCDF_fNone", 
	"None",
	0,
	"0",
	"None");

create_constant_form ("_nLTE_x5fRF_x5fCCDF_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");

create_form_set("_nLTE_x5fRF_x5fCCDF_fPlotSet",
	"_nLTE_x5fRF_x5fCCDF_fNone",
	"_nLTE_x5fRF_x5fCCDF_fRectangular",
	"StdForm");

create_constant_form ("_nLTE_x5fRF_x5fCCDF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nLTE_x5fRF_x5fCCDF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nLTE_x5fRF_x5fCCDF_fOutputPeakMeanSet",
	"_nLTE_x5fRF_x5fCCDF_fNO",
	"_nLTE_x5fRF_x5fCCDF_fYES",
	"StdForm");

create_item ("LTE_RF_CCDF","CCDF measurement",
	"L",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_LTE_RF_CCDF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"LTE_RF_CCDF",
	SPDesignAnnotFmt,
	"SYM_LTE_RF_CCDF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_nLTE_x5fRF_x5fCCDF_fPlotSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRF_x5fCCDF_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")),
	create_parm ("NumBins","Number of points in the CCDF curve",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("OutputPeakMean","Output signal peak and mean values",
		PARM_INT,
		"_nLTE_x5fRF_x5fCCDF_fOutputPeakMeanSet",
		UNITLESS_UNIT,
		prm("_nLTE_x5fRF_x5fCCDF_fNO","NO")));
