set_design_type( sigproc_net );


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fClass_x5f3", 
	"Class 3",
	0,
	"0",
	"Class 3");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fClass_x5f4", 
	"Class 4",
	0,
	"1",
	"Class 4");


create_form_set("_nHSUPA_x5fUE_x5fTX_fSourcePowerClassSet",
	"_nHSUPA_x5fUE_x5fTX_fClass_x5f3",
	"_nHSUPA_x5fUE_x5fTX_fClass_x5f4",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fPowerMeasurementSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fACLR_x5fMeasurementSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fPCDE_x5fMeasurementSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fEVM_x5fMeasurementSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fEnableSourceNoiseSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fMirrorSourceSpectrumSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fMirrorMeasSpectrumSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fRF_x5fMirrorFreqSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fMeasMirrorFreqSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fACLR_x5fnone", 
	"ACLR_none",
	0,
	"0",
	"ACLR_none");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fACLR_x5fHamming_x5f0_x5f54", 
	"ACLR_Hamming 0.54",
	0,
	"1",
	"ACLR_Hamming 0.54");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fACLR_x5fHanning_x5f0_x5f50", 
	"ACLR_Hanning 0.50",
	0,
	"2",
	"ACLR_Hanning 0.50");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fACLR_x5fGaussian_x5f0_x5f75", 
	"ACLR_Gaussian 0.75",
	0,
	"3",
	"ACLR_Gaussian 0.75");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fACLR_x5fKaiser_x5f7_x5f865", 
	"ACLR_Kaiser 7.865",
	0,
	"4",
	"ACLR_Kaiser 7.865");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fACLR_x5f8510_x5f6_x5f0", 
	"ACLR_8510 6.0",
	0,
	"5",
	"ACLR_8510 6.0");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fACLR_x5fBlackman", 
	"ACLR_Blackman",
	0,
	"6",
	"ACLR_Blackman");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fACLR_x5fBlackman_x5fHarris", 
	"ACLR_Blackman-Harris",
	0,
	"7",
	"ACLR_Blackman-Harris");


create_form_set("_nHSUPA_x5fUE_x5fTX_fACLR_x5fSpecMeasWindowSet",
	"_nHSUPA_x5fUE_x5fTX_fACLR_x5fnone",
	"_nHSUPA_x5fUE_x5fTX_fACLR_x5fHamming_x5f0_x5f54",
	"_nHSUPA_x5fUE_x5fTX_fACLR_x5fHanning_x5f0_x5f50",
	"_nHSUPA_x5fUE_x5fTX_fACLR_x5fGaussian_x5f0_x5f75",
	"_nHSUPA_x5fUE_x5fTX_fACLR_x5fKaiser_x5f7_x5f865",
	"_nHSUPA_x5fUE_x5fTX_fACLR_x5f8510_x5f6_x5f0",
	"_nHSUPA_x5fUE_x5fTX_fACLR_x5fBlackman",
	"_nHSUPA_x5fUE_x5fTX_fACLR_x5fBlackman_x5fHarris",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fEVM_x5fExcludeTransitionSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fEnableESGSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fInternal", 
	"Internal",
	0,
	"0",
	"Internal");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fExternal", 
	"External",
	0,
	"1",
	"External");


create_form_set("_nHSUPA_x5fUE_x5fTX_fESG_x5fClkRefSet",
	"_nHSUPA_x5fUE_x5fTX_fInternal",
	"_nHSUPA_x5fUE_x5fTX_fExternal",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fthrough", 
	"through",
	0,
	"0",
	"through");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_ffilter_x5f2100kHz", 
	"filter_2100kHz",
	0,
	"1",
	"filter_2100kHz");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_ffilter_x5f40MHz", 
	"filter_40MHz",
	0,
	"2",
	"filter_40MHz");


create_form_set("_nHSUPA_x5fUE_x5fTX_fESG_x5fIQFilterSet",
	"_nHSUPA_x5fUE_x5fTX_fthrough",
	"_nHSUPA_x5fUE_x5fTX_ffilter_x5f2100kHz",
	"_nHSUPA_x5fUE_x5fTX_ffilter_x5f40MHz",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fESG_x5fAutoScalingSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fESG_x5fArbOnSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNO", 
	"NO",
	0,
	"0",
	"NO");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fYES", 
	"YES",
	0,
	"1",
	"YES");


create_form_set("_nHSUPA_x5fUE_x5fTX_fESG_x5fRFPowOnSet",
	"_nHSUPA_x5fUE_x5fTX_fNO",
	"_nHSUPA_x5fUE_x5fTX_fYES",
	"StdForm");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fNeither", 
	"Neither",
	0,
	"0",
	"Neither");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fEvent1", 
	"Event1",
	0,
	"1",
	"Event1");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fEvent2", 
	"Event2",
	0,
	"2",
	"Event2");


create_constant_form ("_nHSUPA_x5fUE_x5fTX_fBoth", 
	"Both",
	0,
	"3",
	"Both");


create_form_set("_nHSUPA_x5fUE_x5fTX_fESG_x5fEventMarkerTypeSet",
	"_nHSUPA_x5fUE_x5fTX_fNeither",
	"_nHSUPA_x5fUE_x5fTX_fEvent1",
	"_nHSUPA_x5fUE_x5fTX_fEvent2",
	"_nHSUPA_x5fUE_x5fTX_fBoth",
	"StdForm");


create_item ("HSUPA_UE_TX","HSUPA UE Tx test",
	"HSUPA_UE_TX",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST | ITEM_UNIQUE,
	-1,
	"BMP_HSUPA_UE_TX",
	"Component Parameters",
	NULL,
	ARFWTBNetlistFmt,
	"HSUPA_UE_TX",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_UE_TX",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RequiredParameters","Required Parameters",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("CE_TimeStep","Circuit envelope simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1/3.84 MHz/8")),
	create_parm ("WTB_TimeStep","Set CE_TimeStep <= 1/3.84e6/SamplesPerChip. <br> SamplesPerChip is in Signal Parameters tab/category.",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("FSource","Source carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1950 MHz")),
	create_parm ("SourcePowerClass","Source power class",
		PARM_INT,
		"_nHSUPA_x5fUE_x5fTX_fSourcePowerClassSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fClass_x5f3","Class_3")),
	create_parm ("FMeasurement","Measurement carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1950 MHz")),
	create_parm ("MeasurementInfo","Available Measurements <br> Each measurement has parameters on its tab/category below.",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("PowerMeasurement","Enable power measurement?",
		PARM_INT,
		"_nHSUPA_x5fUE_x5fTX_fPowerMeasurementSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fYES","YES")),
	create_parm ("ACLR_Measurement","Enable ACLR  measurement?",
		PARM_INT,
		"_nHSUPA_x5fUE_x5fTX_fACLR_x5fMeasurementSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fNO","NO")),
	create_parm ("PCDE_Measurement","Enable peak code domain error  measurement?",
		PARM_INT,
		"_nHSUPA_x5fUE_x5fTX_fPCDE_x5fMeasurementSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fNO","NO")),
	create_parm ("EVM_Measurement","Enable EVM  measurement?",
		PARM_INT,
		"_nHSUPA_x5fUE_x5fTX_fEVM_x5fMeasurementSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fNO","NO")),
	create_parm ("BasicParameters","Basic Parameters",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("SourceR","Source resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("SourceTemp","Source resistor temperature",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","-273.15")),
	create_parm ("EnableSourceNoise","Enable source thermal noise?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fEnableSourceNoiseSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fNO","NO")),
	create_parm ("MeasR","Measurement resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("MirrorSourceSpectrum","Mirror source spectrum about carrier?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fMirrorSourceSpectrumSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fNO","NO")),
	create_parm ("MirrorMeasSpectrum","Mirror meas spectrum about carrier?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fMirrorMeasSpectrumSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fNO","NO")),
	create_parm ("RF_MirrorFreq","Mirror source frequency for spectrum/envelope measurement?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fRF_x5fMirrorFreqSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fNO","NO")),
	create_parm ("MeasMirrorFreq","Mirror meas frequency for spectrum/envelope measurement?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fMeasMirrorFreqSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fNO","NO")),
	create_parm ("DUT_DelayBound","DUT delay bound",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","10.0 usec")),
	create_parm ("TestBenchSeed","Random number generator seed",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1234567")),
	create_parm ("SignalParameters","Signal Parameters",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("GainImbalance","Gain imbalance, Q vs I",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","Phase imbalance, Q vs I",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset (percent)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset (percent)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SamplesPerChip","Samples per chip",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("RRC_FilterLength","RRC filter length (chips)",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("PowerMeasurementParameters","Power Measurement",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PowerDisplayPages","Power measurement display pages: <br> 3GPPFDD_UE_TX_Power Equations <br> 3GPPFDD_UE_TX_Power Table <br> 3GPPFDD_UE_TX_Power Figures",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("PowerStartSlot","Start slot",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PowerSlotsMeasured","Slots measured",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("ACLR_MeasurementParameters","ACLR Measurement",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("ACLR_DisplayPages","ACLR measurement display pages: <br> 3GPPFDD_UE_TX_ACLR Equations <br> 3GPPFDD_UE_TX_ACLR Table <br> 3GPPFDD_UE_TX_ACLR Figures",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("ACLR_Start","Measurement start",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("ACLR_Stop","Measurement stop",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","(2560/3.84) usec")),
	create_parm ("ACLR_Slots","Measurement slots",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ACLR_SpecMeasResBW","Spectrum resolution bandwidth",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0")),
	create_parm ("ACLR_SpecMeasWindow","Window type",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fACLR_x5fSpecMeasWindowSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fACLR_x5fnone","ACLR_none")),
	create_parm ("PCDE_MeasurementParameters","PCDE Measurement",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("PCDE_DisplayPages","PCDE measurement display pages: <br> 3GPPFDD_UE_TX_PCDE Equations <br> 3GPPFDD_UE_TX_PCDE Table <br> 3GPPFDD_UE_TX_PCDE Figures",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("PCDE_StartSlot","Start slot",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("EVM_MeasurementParameters","EVM Measurement",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("EVM_DisplayPages","EVM measurement display pages: <br> 3GPPFDD_UE_TX_EVM Equations <br> 3GPPFDD_UE_TX_EVM Table",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"\"")),
	create_parm ("EVM_Start","Measurement start",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("EVM_SlotsMeasured","Slots to measure",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("EVM_ExcludeTransition","select YES for predictable power changes",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fEVM_x5fExcludeTransitionSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fNO","NO")),
	create_parm ("SignalToESG_Parameters","Signal to ESG",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"Category\"")),
	create_parm ("EnableESG","Enable signal to ESG?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fEnableESGSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fNO","NO")),
	create_parm ("ESG_Instrument","ESG instrument address",
		PARM_STRING | PARM_NO_DISPLAY,
		"InstrumentFormSet",
		UNITLESS_UNIT,
		prm("InstrumentForm","\"[GPIB0::19::INSTR][localhost][4790]\"")),
	create_parm ("ESG_Start","Signal start",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("ESG_Stop","Signal stop",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","(2560/3.84) usec")),
	create_parm ("ESG_Slots","Slots to ESG",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","15")),
	create_parm ("ESG_Power","ESG RF output power (dBm)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-20.0")),
	create_parm ("ESG_ClkRef","Waveform clock reference",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fESG_x5fClkRefSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fInternal","Internal")),
	create_parm ("ESG_ExtClkRefFreq","External clock reference freq",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","10 MHz")),
	create_parm ("ESG_IQFilter","IQ filter",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fESG_x5fIQFilterSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fthrough","through")),
	create_parm ("ESG_SampleClkRate","Sequencer sample clock rate",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","30.72 MHz")),
	create_parm ("ESG_Filename","ESG waveform storage filename",
		PARM_STRING | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"HSUPA_UL\"")),
	create_parm ("ESG_AutoScaling","Activate auto scaling?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fESG_x5fAutoScalingSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fYES","YES")),
	create_parm ("ESG_ArbOn","Select waveform and turn ArbOn after download?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fESG_x5fArbOnSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fYES","YES")),
	create_parm ("ESG_RFPowOn","Turn RF ON after download?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fESG_x5fRFPowOnSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fYES","YES")),
	create_parm ("ESG_EventMarkerType","Event marker type",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUE_x5fTX_fESG_x5fEventMarkerTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUE_x5fTX_fEvent1","Event1")),
	create_parm ("ESG_MarkerLength","ESG marker length",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")));
