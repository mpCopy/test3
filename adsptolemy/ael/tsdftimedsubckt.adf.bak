set_design_type( sigproc_net );
create_item ("CktAGCLoopFilter","Circuit AGC Loop Filter",
	"C",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_CktAGCLoopFilter",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"CktAGCLoopFilter",
	SPDesignAnnotFmt,
	"SYM_DSN_CktAGCLoopFilter",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("DampingFactor","loop damping factor",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.707")),
	create_parm ("NormalizedZero","loop normalized zero",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("BW","closed loop -3dB frequency",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","4500")),
	create_parm ("ExternalGain","open loop gain external to this filter",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1000")),
	create_parm ("C2","loop filter internal capacitor value",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		CAPACITANCE_UNIT,
		prm("StdForm","0.0000000002")),
	create_parm ("OpAmpGain0","loop filter internal opamp gain at DC in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","120")),
	create_parm ("OpAmpBW","loop filter internal opamp bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100MHz")),
	create_parm ("OpAmpVEE","loop filter internal opamp negative supply voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","-100")),
	create_parm ("OpAmpVCC","loop filter internal opamp positive supply voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","100")),
	create_parm ("MaxTimeStep","circuit transient cosimulation maximum time step value",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.000001")),
	create_parm ("RefV","reference voltage for control loop opamp",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0.1")));
library_group("Timed, Filters","Timed, Filters","CktAGCLoopFilter");
palette_group("Timed, Filters","Timed, Filters","CktAGCLoopFilter");

create_constant_form ("_nRF_x5fDemodExtOscRC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fDemodExtOscRC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fDemodExtOscRC_fMirrorSpectrumSet",
	"_nRF_x5fDemodExtOscRC_fNO",
	"_nRF_x5fDemodExtOscRC_fYES",
	"StdForm");
create_constant_form ("_nRF_x5fDemodExtOscRC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fDemodExtOscRC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fDemodExtOscRC_fSquareRootSet",
	"_nRF_x5fDemodExtOscRC_fNO",
	"_nRF_x5fDemodExtOscRC_fYES",
	"StdForm");
create_item ("RF_DemodExtOscRC","RF demodulator with External Oscilator",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_DemodExtOscRC",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_DemodExtOscRC",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_DemodExtOscRC",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","Input resistance",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50 Ohm")),
	create_parm ("RTemp","Physical temperature",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","-273.15")),
	create_parm ("MirrorSpectrum","Mirror spectrum about carrier?",
		PARM_INT,
		"_nRF_x5fDemodExtOscRC_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fDemodExtOscRC_fNO","NO")),
	create_parm ("GainImbalance","Gain imbalance in dB, Q vs I",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","0")),
	create_parm ("PhaseImbalance","Phase imbalance in degrees, Q vs I",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")),
	create_parm ("Sensitivity","Voltage output sensitivity, Vout/Vin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("SymbolRate","Symbol rate",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","3.84 MHz")),
	create_parm ("SampPerSym","Sample per symbol",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("FilterLength","Filter length",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("ExcessBW","Excess bandwidth for RC filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")),
	create_parm ("SquareRoot","Squareroot ?",
		PARM_INT,
		"_nRF_x5fDemodExtOscRC_fSquareRootSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fDemodExtOscRC_fYES","YES")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_DemodExtOscRC");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_DemodExtOscRC");

create_item ("VItoPower","Baseband voltage and current signal to power converter",
	"V",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_VItoPower",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"VItoPower",
	SPDesignAnnotFmt,
	"VItoPower",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("NumStart","sample number to start integration for power in watts",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Signal Converters","Signal Converters","VItoPower");
palette_group("Signal Converters","Signal Converters","VItoPower");

create_constant_form ("_nVcGainRF_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_nVcGainRF_fTOI", 
	"TOI",
	0,
	"1",
	"TOI");
create_constant_form ("_nVcGainRF_fdBc1", 
	"dBc1",
	0,
	"2",
	"dBc1");
create_constant_form ("_nVcGainRF_fTOI_x5fdBc1", 
	"TOI+dBc1",
	0,
	"3",
	"TOI+dBc1");
create_constant_form ("_nVcGainRF_fPSat_x5fGCSat_x5fTOI", 
	"PSat+GCSat+TOI",
	0,
	"4",
	"PSat+GCSat+TOI");
create_constant_form ("_nVcGainRF_fPSat_x5fGCSat_x5fdBc1", 
	"PSat+GCSat+dBc1",
	0,
	"5",
	"PSat+GCSat+dBc1");
create_constant_form ("_nVcGainRF_fPSat_x5fGCSat_x5fTOI_x5fdBc1", 
	"PSat+GCSat+TOI+dBc1",
	0,
	"6",
	"PSat+GCSat+TOI+dBc1");
create_constant_form ("_nVcGainRF_fGain_x5fcompression_x5fdata_x5fpoints_x5fvs_x5finput_x5fpower", 
	"Gain compression data points vs input power",
	0,
	"7",
	"Gain compression data points vs input power");
create_form_set("_nVcGainRF_fGCTypeSet",
	"_nVcGainRF_fnone",
	"_nVcGainRF_fTOI",
	"_nVcGainRF_fdBc1",
	"_nVcGainRF_fTOI_x5fdBc1",
	"_nVcGainRF_fPSat_x5fGCSat_x5fTOI",
	"_nVcGainRF_fPSat_x5fGCSat_x5fdBc1",
	"_nVcGainRF_fPSat_x5fGCSat_x5fTOI_x5fdBc1",
	"_nVcGainRF_fGain_x5fcompression_x5fdata_x5fpoints_x5fvs_x5finput_x5fpower",
	"StdForm");
create_constant_form ("_nVcGainRF_fdB_x5fV", 
	"dB/V",
	0,
	"0",
	"dB/V");
create_constant_form ("_nVcGainRF_flinear", 
	"linear",
	0,
	"1",
	"linear");
create_form_set("_nVcGainRF_fVcTypeSet",
	"_nVcGainRF_fdB_x5fV",
	"_nVcGainRF_flinear",
	"StdForm");
create_item ("VcGainRF","Voltage controlled complex gain with gain compression",
	"V",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_VcGainRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"VcGainRF",
	SPDesignAnnotFmt,
	"SYM_DSN_VcGainRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("NoiseFigure","input noise figure, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("GCType","Gain compression type",
		PARM_INT,
		"_nVcGainRF_fGCTypeSet",
		UNITLESS_UNIT,
		prm("_nVcGainRF_fnone","none")),
	create_parm ("TOIout","Third order intercept power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","3")),
	create_parm ("dBc1out","1 dB gain compression power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1")),
	create_parm ("PSat","Saturation power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1")),
	create_parm ("GCSat","Gain compression at saturation; dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("GComp","Array of triple values for large signal gain change vs signal power",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0  0  0\"")),
	create_parm ("VMin","minimum limit for tune voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")),
	create_parm ("VMax","maximum limit for tune voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","40")),
	create_parm ("Min_dB","minimum dB at VMin for linear operation",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-10")),
	create_parm ("Max_dB","maximum dB at VMax for linear operation",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","70")),
	create_parm ("VcType","control voltage to gain characteristic",
		PARM_INT,
		"_nVcGainRF_fVcTypeSet",
		UNITLESS_UNIT,
		prm("_nVcGainRF_fdB_x5fV","dB_V")));
library_group("Timed, Nonlinear","Timed, Nonlinear","VcGainRF");
palette_group("Timed, Nonlinear","Timed, Nonlinear","VcGainRF");

create_item ("SP_LoopFilter211","Second order control loop filter, 2 poles (with one integrator), one zero, signal processing",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SP_LoopFilter211",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SP_LoopFilter211",
	SPDesignAnnotFmt,
	"SYM_DSN_SP_LoopFilter211",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("DampingFactor","loop damping factor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.707")),
	create_parm ("NormalizedZero","loop normalized zero",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("BW","closed loop -3dB frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","4.5e3")),
	create_parm ("ExternalGain","open loop gain external to this filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1000")));
library_group("Timed, Filters","Timed, Filters","SP_LoopFilter211");
palette_group("Timed, Filters","Timed, Filters","SP_LoopFilter211");

create_item ("SP_LoopFilter110","Second order control loop filter, one pole, one zero, signal processing",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SP_LoopFilter110",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SP_LoopFilter110",
	SPDesignAnnotFmt,
	"SYM_DSN_SP_LoopFilter110",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("DampingFactor","loop damping factor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.707")),
	create_parm ("NormalizedZero","loop normalized zero",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("BW","closed loop -3dB frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","6.5e6")),
	create_parm ("ExternalGain","open loop gain external to this filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","7.5e6")));
library_group("Timed, Filters","Timed, Filters","SP_LoopFilter110");
palette_group("Timed, Filters","Timed, Filters","SP_LoopFilter110");

create_item ("RFtoPower","RF signal envelope to power converter",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RFtoPower",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RFtoPower",
	SPDesignAnnotFmt,
	"RFtoPower",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RefR","RF signal reference resistance",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50")),
	create_parm ("NumStart","sample number to start integration for power in watts",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Signal Converters","Signal Converters","RFtoPower");
palette_group("Signal Converters","Signal Converters","RFtoPower");

create_item ("RF_RX_IFout1","Single down-conversion RF receiver with IF output",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_RX_IFout1",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_RX_IFout1",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_RX_IFout1",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RX_AntTemp","receiving antenna noise temperature, in Kelvin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","150.0")),
	create_parm ("RX_Gain","receiver power gain, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.0")),
	create_parm ("RX_NF","receiver noise figure, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5.0")),
	create_parm ("RF_Freq","RF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900e6")),
	create_parm ("RF_BW","RF filter bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","25e6")),
	create_parm ("IF_Freq","IF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","400e3")),
	create_parm ("IF_BW","IF bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","30e3")),
	create_parm ("IP3in","IP3 at receiver input",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","3.2e-6")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_RX_IFout1");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_RX_IFout1");

create_item ("RF_RX_IFout","Double down-conversion RF receiver with IF output",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_RX_IFout",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_RX_IFout",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_RX_IFout",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RX_AntTemp","receiving antenna noise temperature, in Kelvin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","150.0")),
	create_parm ("RX_Gain","receiver power gain, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.0")),
	create_parm ("RX_NF","receiver noise figure, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5.0")),
	create_parm ("RF_Freq","RF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900e6")),
	create_parm ("RF_BW","RF filter bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","25e6")),
	create_parm ("IF_Freq1","first IF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100e6")),
	create_parm ("IF_Freq2","second IF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","400e3")),
	create_parm ("IF_BW","IF bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","30e3")),
	create_parm ("IP3in","IP3 at receiver input",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","3.2e-6")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_RX_IFout");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_RX_IFout");

create_item ("RF_RX_IFout_SBlock","RF receiver with IF output and user specified S21 parameter file for the IF filter",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_RX_IFout_SBlock",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_RX_IFout_SBlock",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_RX_IFout_SBlock",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RX_AntTemp","receiving antenna noise temperature, in Kelvin",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","150.0")),
	create_parm ("RX_Gain","receiver power gain, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.0")),
	create_parm ("RX_NF","receiver noise figure, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5.0")),
	create_parm ("RF_Freq","RF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900e6")),
	create_parm ("RF_BW","RF filter bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","25e6")),
	create_parm ("IF_Freq","IF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100e6")),
	create_parm ("File","file for S21 data in Touchtone format",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"myfile.s2p\"")),
	create_parm ("N","number of points for S21 data impulse response",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2048")),
	create_parm ("IP3in","IP3 at receiver input",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","3.2e-6")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_RX_IFout_SBlock");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_RX_IFout_SBlock");

create_item ("RF_TX_IFin_SBlock","RF transmitter with IF input and user specified S21 parameter file for TX filter",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_TX_IFin_SBlock",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_TX_IFin_SBlock",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_TX_IFin_SBlock",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("IF_Freq","IF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","400e3")),
	create_parm ("RF_Freq","RF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900e6")),
	create_parm ("File","file for S21 data in Touchtone format",
		PARM_STRING,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"myfile.s2p\"")),
	create_parm ("N","number of points for S21 data impulse response",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2048")),
	create_parm ("TX_Gain","transmitter power gain, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","80")),
	create_parm ("PSat","saturated output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","32")),
	create_parm ("NDensity","noise spectral density at output, in dBm/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-173.975")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_TX_IFin_SBlock");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_TX_IFin_SBlock");

create_item ("RF_TX_IFin","RF transmitter with IF input and 2 filter-amplifier pairs",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_TX_IFin",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_TX_IFin",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_TX_IFin",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("IF_Freq","IF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","400e3")),
	create_parm ("RF_Freq","RF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900e6")),
	create_parm ("RF_BW","RF bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","30e3")),
	create_parm ("TX_Gain","transmitter power gain, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","80")),
	create_parm ("PSat","saturated output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","32")),
	create_parm ("NDensity","noise spectral density at output, in dBm/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-173.975")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_TX_IFin");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_TX_IFin");

create_item ("RF_TX_IFin1","RF transmitter with IF input and 1 filter-amplifier pair",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_TX_IFin1",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_TX_IFin1",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_TX_IFin1",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("IF_Freq","IF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","400e3")),
	create_parm ("RF_Freq","RF frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900e6")),
	create_parm ("RF_BW","RF bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","30e3")),
	create_parm ("TX_Gain","transmitter power gain, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","80")),
	create_parm ("PSat","saturated output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","32")),
	create_parm ("NDensity","noise spectral density at output, in dBm/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-173.975")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_TX_IFin1");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_TX_IFin1");

create_item ("RF_PAE_TestFixture","RF power amplifier test fixture to measure power added efficiency",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_PAE_TestFixture",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_PAE_TestFixture",
	SPDesignAnnotFmt,
	"RF_PAE_TestFixture",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TStep","system level simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("FCarrier","input signal RF carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_PAE_TestFixture");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_PAE_TestFixture");

create_constant_form ("_nRF_x5fModulatorRC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fModulatorRC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fModulatorRC_fSquareRootSet",
	"_nRF_x5fModulatorRC_fNO",
	"_nRF_x5fModulatorRC_fYES",
	"StdForm");
create_constant_form ("_nRF_x5fModulatorRC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fModulatorRC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fModulatorRC_fMirrorSpectrumSet",
	"_nRF_x5fModulatorRC_fNO",
	"_nRF_x5fModulatorRC_fYES",
	"StdForm");
create_item ("RF_ModulatorRC","RF modulator with raised cosine filters",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_ModulatorRC",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_ModulatorRC",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_ModulatorRC",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","Source resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","Temperature",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1900 MHz")),
	create_parm ("Power","Power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01 W")),
	create_parm ("VRef","Reference voltage for output power calibration",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1 V")),
	create_parm ("SymbolRate","Symbol rate",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","25e3")),
	create_parm ("SampPerSym","Samples per symbol period",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("FilterLength","Length of raised cosine filters in number of symbols",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("ExcessBW","Raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.35")),
	create_parm ("SquareRoot","Square-root raised-cosine model?",
		PARM_INT,
		"_nRF_x5fModulatorRC_fSquareRootSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fModulatorRC_fYES","YES")),
	create_parm ("MirrorSpectrum","Mirror spectrum about carrier?",
		PARM_INT,
		"_nRF_x5fModulatorRC_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fModulatorRC_fNO","NO")),
	create_parm ("GainImbalance","Gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","Phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_ModulatorRC");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_ModulatorRC");

create_constant_form ("_nRF_x5fModulator_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fModulator_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fModulator_fMirrorSpectrumSet",
	"_nRF_x5fModulator_fNO",
	"_nRF_x5fModulator_fYES",
	"StdForm");
create_item ("RF_Modulator","RF modulator",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_Modulator",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_Modulator",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_Modulator",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","Source resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","Temperature",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1900 MHz")),
	create_parm ("Power","Power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01 W")),
	create_parm ("VRef","Reference voltage for output power calibration",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1 V")),
	create_parm ("SamplingRate","Sampling rate",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","25e3")),
	create_parm ("MirrorSpectrum","Mirror spectrum about carrier?",
		PARM_INT,
		"_nRF_x5fModulator_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fModulator_fNO","NO")),
	create_parm ("GainImbalance","Gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","Phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_Modulator");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_Modulator");

create_constant_form ("_nRF_x5fModFIR_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nRF_x5fModFIR_fInvert", 
	"Invert",
	0,
	"1",
	"Invert");
create_form_set("_nRF_x5fModFIR_fPhasePolaritySet",
	"_nRF_x5fModFIR_fNormal",
	"_nRF_x5fModFIR_fInvert",
	"StdForm");
create_item ("RF_ModFIR","RF modulator with user defined FIR filter taps",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_ModFIR",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_ModFIR",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_ModFIR",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2e9")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("VRef","reference voltage for output power calibration",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("SymbolRate","symbol rate",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","25e3")),
	create_parm ("SampPerSym","samples per symbol period",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("FilterTaps","FIR filter taps",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"<$HPEESOF_DIR/adsptolemy/lib/data/square_root_raised_cosine.txt\"")),
	create_parm ("PhasePolarity","if set to Invert, Q channel signal is inverted",
		PARM_INT,
		"_nRF_x5fModFIR_fPhasePolaritySet",
		UNITLESS_UNIT,
		prm("_nRF_x5fModFIR_fNormal","Normal")),
	create_parm ("GainImbalance","gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset in percent with respect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset in percent with respect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation, in degress",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("NDensity","noise spectral density at output, in dBm/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-173.975")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_ModFIR");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_ModFIR");

create_constant_form ("_nRF_x5fMod_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_nRF_x5fMod_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_nRF_x5fMod_fSquareRootSet",
	"_nRF_x5fMod_fNo",
	"_nRF_x5fMod_fYes",
	"StdForm");
create_constant_form ("_nRF_x5fMod_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");
create_constant_form ("_nRF_x5fMod_fInvert", 
	"Invert",
	0,
	"1",
	"Invert");
create_form_set("_nRF_x5fMod_fPhasePolaritySet",
	"_nRF_x5fMod_fNormal",
	"_nRF_x5fMod_fInvert",
	"StdForm");
create_item ("RF_Mod","RF modulator with I/Q input",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","10e6")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1e-3")),
	create_parm ("VRef","reference voltage for output power calibration",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")),
	create_parm ("SymbolRate","symbol rate",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","25e3")),
	create_parm ("ExcessBW","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.35")),
	create_parm ("SquareRoot","use square root raised cosine model",
		PARM_INT,
		"_nRF_x5fMod_fSquareRootSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fMod_fYes","Yes")),
	create_parm ("PhasePolarity","if set to Invert, Q channel signal is inverted",
		PARM_INT,
		"_nRF_x5fMod_fPhasePolaritySet",
		UNITLESS_UNIT,
		prm("_nRF_x5fMod_fNormal","Normal")),
	create_parm ("GainImbalance","gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset in percent with repect to output rms voltage",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation, in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("NDensity","noise spectral density at output, in dBm/Hz",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-173.975")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_Mod");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_Mod");

create_constant_form ("_nRF_x5fDemodulatorRC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fDemodulatorRC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fDemodulatorRC_fSquareRootSet",
	"_nRF_x5fDemodulatorRC_fNO",
	"_nRF_x5fDemodulatorRC_fYES",
	"StdForm");
create_constant_form ("_nRF_x5fDemodulatorRC_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fDemodulatorRC_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fDemodulatorRC_fMirrorSpectrumSet",
	"_nRF_x5fDemodulatorRC_fNO",
	"_nRF_x5fDemodulatorRC_fYES",
	"StdForm");
create_item ("RF_DemodulatorRC","RF demodulator with raised cosine filters",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_DemodulatorRC",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_DemodulatorRC",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_DemodulatorRC",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","Demodulator internal oscillator carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1900 MHz")),
	create_parm ("Phase","Demodulator reference phase",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("VRef","Reference voltage for output calibration",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0 V")),
	create_parm ("SampPerSym","Samples per symbol period",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("FilterLength","Length of raised cosine filters in number of symbols",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("ExcessBW","Excess bandwidth of raised cosine filters",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.35")),
	create_parm ("SquareRoot","Square root raised cosine pulse?",
		PARM_INT,
		"_nRF_x5fDemodulatorRC_fSquareRootSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fDemodulatorRC_fYES","YES")),
	create_parm ("MirrorSpectrum","Mirror spectrum around about carrier?",
		PARM_INT,
		"_nRF_x5fDemodulatorRC_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fDemodulatorRC_fNO","NO")),
	create_parm ("GainImbalance","Gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","Phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_DemodulatorRC");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_DemodulatorRC");

create_item ("RF_DemodFIR","RF demodulator with user defined FIR filter taps",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_DemodFIR",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_DemodFIR",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_DemodFIR",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("SampPerSym","samples per symbol period",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("FilterTaps","FIR filter taps",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"<$HPEESOF_DIR/adsptolemy/lib/data/square_root_raised_cosine.txt\"")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2e9")),
	create_parm ("Phase","reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0")),
	create_parm ("VRef","reference voltage for output calibration",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_DemodFIR");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_DemodFIR");

create_constant_form ("_nRF_x5fDemod_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_nRF_x5fDemod_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_nRF_x5fDemod_fSquareRootSet",
	"_nRF_x5fDemod_fNo",
	"_nRF_x5fDemod_fYes",
	"StdForm");
create_item ("RF_Demod","RF demodulator with I/Q output",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("SymbolRate","symbol rate",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","25e3")),
	create_parm ("ExcessBW","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.35")),
	create_parm ("SquareRoot","use square root raised cosine model",
		PARM_INT,
		"_nRF_x5fDemod_fSquareRootSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fDemod_fYes","Yes")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","10e6")),
	create_parm ("Phase","reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("VRef","reference voltage for output calibration",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1.0")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_Demod");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_Demod");

create_constant_form ("_nRF_x5fCombinerIQ_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fCombinerIQ_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fCombinerIQ_fModSquareRootSet",
	"_nRF_x5fCombinerIQ_fNO",
	"_nRF_x5fCombinerIQ_fYES",
	"StdForm");
create_constant_form ("_nRF_x5fCombinerIQ_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fCombinerIQ_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fCombinerIQ_fAutoResamplingSet",
	"_nRF_x5fCombinerIQ_fNO",
	"_nRF_x5fCombinerIQ_fYES",
	"StdForm");
create_item ("RF_CombinerIQ","RF combiner with IQ input combining desired signal with undesired CW and modulated interferers",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_CombinerIQ",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_CombinerIQ",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_CombinerIQ",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("Gain","Power gain applied to input signal (dB)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-100")),
	create_parm ("SymbolRate","Symbol rate of input and modulated interferer signals",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","25e3")),
	create_parm ("SampPerSym","Samples per symbol period",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("InputFreq","Input signal frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900e6")),
	create_parm ("CWFreq","CW interferer frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900.1e6")),
	create_parm ("CWPower","CW interferer power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1e-6")),
	create_parm ("ModFreq","Modulated interferer frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900.02e6")),
	create_parm ("ModPower","Modulated interferer power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1e-6")),
	create_parm ("ModVRef","Modulated interferer reference voltage for output power calibration",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("ModFilterLength","Modulated interferer raised cosine filter length (symbols)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("ModSquareRoot","Modulated interferer square root raised cosine?",
		PARM_INT,
		"_nRF_x5fCombinerIQ_fModSquareRootSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fCombinerIQ_fYES","YES")),
	create_parm ("ModExcessBW","Modulated interferer raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.35")),
	create_parm ("AutoResampling","Resample input signal to support bandwidth of combined signal?",
		PARM_INT,
		"_nRF_x5fCombinerIQ_fAutoResamplingSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fCombinerIQ_fYES","YES")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_CombinerIQ");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_CombinerIQ");

create_constant_form ("_nRF_x5fCombiner_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fCombiner_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fCombiner_fAutoResamplingSet",
	"_nRF_x5fCombiner_fNO",
	"_nRF_x5fCombiner_fYES",
	"StdForm");
create_item ("RF_Combiner","RF combiner, combining desired signal with undesired CW and modulated interferers",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_Combiner",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_Combiner",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_Combiner",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("Gain","power gain applied to input signal, in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-100")),
	create_parm ("SymbolRate","symbol rate of input and modulated interferer signals",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","25e3")),
	create_parm ("SampPerSym","samples per symbol period",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("InputFreq","input signal frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900e6")),
	create_parm ("CWInterfererFreq","CW interferer frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900.1e6")),
	create_parm ("CWInterfererPower","CW interferer power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1e-6")),
	create_parm ("ModInterfererFreq","modulated interferer frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","900.02e6")),
	create_parm ("ModInterfererPower","modulated interferer power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","1e-6")),
	create_parm ("ModInterfererExcessBW","excess bandwidth of modulated interferer raised cosine filters",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.35")),
	create_parm ("AutoResampling","resample input signal to support bandwidth of combined signal?",
		PARM_INT,
		"_nRF_x5fCombiner_fAutoResamplingSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fCombiner_fYES","YES")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_Combiner");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","RF_Combiner");

create_item ("QAM_ModExtOsc","Quadrature amplitude modulator with external oscillator",
	"Q",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_QAM_ModExtOsc",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"QAM_ModExtOsc",
	SPDesignAnnotFmt,
	"SYM_DSN_QAM_ModExtOsc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("VRef","reference voltage for output power calibration",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","1")),
	create_parm ("GainImbalance","gain imbalance in dB, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PhaseImbalance","phase imbalance in degrees, Q channel relative to I channel",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","QAM_ModExtOsc");
palette_group("Timed, Modem","Timed, Modem","QAM_ModExtOsc");

create_item ("QPSK_Recovery","QPSK carrier recovery",
	"Q",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_QPSK_Recovery",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"QPSK_Recovery",
	SPDesignAnnotFmt,
	"SYM_DSN_QPSK_Recovery",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("RecoveryBw","bandwidth of carrier recovery filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")));
library_group("Timed, Modem","Timed, Modem","QPSK_Recovery");
palette_group("Timed, Modem","Timed, Modem","QPSK_Recovery");

create_item ("QPSK_ModExtOsc","QPSK modulator with external oscillator",
	"Q",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_QPSK_ModExtOsc",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"QPSK_ModExtOsc",
	SPDesignAnnotFmt,
	"SYM_DSN_QPSK_ModExtOsc",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","QPSK_ModExtOsc");
palette_group("Timed, Modem","Timed, Modem","QPSK_ModExtOsc");

create_item ("QPSK_Mod","QPSK modulator with internal oscillator",
	"Q",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_QPSK_Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"QPSK_Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_QPSK_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","QPSK_Mod");
palette_group("Timed, Modem","Timed, Modem","QPSK_Mod");

create_item ("QPSK_Demod","QPSK demodulator with external reference oscillator",
	"Q",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_QPSK_Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"QPSK_Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_QPSK_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Timed, Modem","Timed, Modem","QPSK_Demod");
palette_group("Timed, Modem","Timed, Modem","QPSK_Demod");

create_item ("QPSK_Decoder","QPSK IQ data decoder",
	"Q",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_QPSK_Decoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"QPSK_Decoder",
	SPDesignAnnotFmt,
	"SYM_DSN_QPSK_Decoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")));
library_group("Timed, Data Processing","Timed, Data Processing","QPSK_Decoder");
palette_group("Timed, Data Processing","Timed, Data Processing","QPSK_Decoder");

create_item ("PAE_Value","Calculates PAE from RF and DC input values",
	"P",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_PAE_Value",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"PAE_Value",
	SPDesignAnnotFmt,
	"PAE_Value",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("NumDC","number of DC power values used",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.001")),
	create_parm ("NumStart","sample number to start integration for power in watts",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("RefR","RF signal reference resistance",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","50")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","PAE_Value");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","PAE_Value");

create_item ("MSK_Recovery","MSK carrier recovery",
	"M",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_MSK_Recovery",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"MSK_Recovery",
	SPDesignAnnotFmt,
	"SYM_DSN_MSK_Recovery",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("RecoveryBw","bandwidth of carrier recovery filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")));
library_group("Timed, Modem","Timed, Modem","MSK_Recovery");
palette_group("Timed, Modem","Timed, Modem","MSK_Recovery");

create_item ("MSK_Mod","MSK modulator with internal oscillator",
	"M",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_MSK_Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"MSK_Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_MSK_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")));
library_group("Timed, Modem","Timed, Modem","MSK_Mod");
palette_group("Timed, Modem","Timed, Modem","MSK_Mod");

create_item ("MSK_Demod","MSK demodulator with external reference oscillators",
	"M",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_MSK_Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"MSK_Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_MSK_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")));
library_group("Timed, Modem","Timed, Modem","MSK_Demod");
palette_group("Timed, Modem","Timed, Modem","MSK_Demod");

create_item ("GMSK_Recovery","GMSK carrier recovery",
	"G",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_GMSK_Recovery",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"GMSK_Recovery",
	SPDesignAnnotFmt,
	"SYM_DSN_GMSK_Recovery",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("RecoveryBw","bandwidth of carrier recovery filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")));
library_group("Timed, Modem","Timed, Modem","GMSK_Recovery");
palette_group("Timed, Modem","Timed, Modem","GMSK_Recovery");

create_item ("GMSK_Mod","GMSK modulator with internal oscillator",
	"G",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_GMSK_Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"GMSK_Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_GMSK_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("F3dB","3dB frequency of input Gaussian lowpass filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","500000")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")));
library_group("Timed, Modem","Timed, Modem","GMSK_Mod");
palette_group("Timed, Modem","Timed, Modem","GMSK_Mod");

create_item ("GMSK_Demod","GMSK demodulator with external reference oscillator",
	"G",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_GMSK_Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"GMSK_Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_GMSK_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")));
library_group("Timed, Modem","Timed, Modem","GMSK_Demod");
palette_group("Timed, Modem","Timed, Modem","GMSK_Demod");

create_item ("DQPSK_Mod","Differential QPSK modulator with internal oscillator",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DQPSK_Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DQPSK_Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_DQPSK_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Modem","Timed, Modem","DQPSK_Mod");
palette_group("Timed, Modem","Timed, Modem","DQPSK_Mod");

create_item ("DQPSK_Pi4Recovery","pi/4-DQPSK carrier recovery",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DQPSK_Pi4Recovery",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DQPSK_Pi4Recovery",
	SPDesignAnnotFmt,
	"SYM_DSN_DQPSK_Pi4Recovery",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("RecoveryBw","bandwidth of carrier recovery filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")));
library_group("Timed, Modem","Timed, Modem","DQPSK_Pi4Recovery");
palette_group("Timed, Modem","Timed, Modem","DQPSK_Pi4Recovery");

create_item ("DQPSK_Pi4Mod","pi/4-DQPSK modulator with internal oscillator",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DQPSK_Pi4Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DQPSK_Pi4Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_DQPSK_Pi4Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Modem","Timed, Modem","DQPSK_Pi4Mod");
palette_group("Timed, Modem","Timed, Modem","DQPSK_Pi4Mod");

create_item ("DQPSK_Pi4DemodSync","Synchronous pi/4-DQPSK demodulator with internal oscillator",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DQPSK_Pi4DemodSync",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DQPSK_Pi4DemodSync",
	SPDesignAnnotFmt,
	"SYM_DSN_DQPSK_Pi4DemodSync",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")),
	create_parm ("RecoveryBw","bandwidth of carrier recovery filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000")));
library_group("Timed, Modem","Timed, Modem","DQPSK_Pi4DemodSync");
palette_group("Timed, Modem","Timed, Modem","DQPSK_Pi4DemodSync");

create_item ("DQPSK_Pi4Demod","Non-coherent pi/4-DQPSK demodulator",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DQPSK_Pi4Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DQPSK_Pi4Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_DQPSK_Pi4Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Modem","Timed, Modem","DQPSK_Pi4Demod");
palette_group("Timed, Modem","Timed, Modem","DQPSK_Pi4Demod");

create_item ("DQPSK_Pi4Decoder","pi/4-DQPSK IQ data decoder",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DQPSK_Pi4Decoder",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DQPSK_Pi4Decoder",
	SPDesignAnnotFmt,
	"SYM_DSN_DQPSK_Pi4Decoder",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("SymbolTime","input data symbol time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")));
library_group("Timed, Data Processing","Timed, Data Processing","DQPSK_Pi4Decoder");
palette_group("Timed, Data Processing","Timed, Data Processing","DQPSK_Pi4Decoder");

create_item ("DQPSK_Demod","Non-coherent differential QPSK demodulator",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DQPSK_Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DQPSK_Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_DQPSK_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Modem","Timed, Modem","DQPSK_Demod");
palette_group("Timed, Modem","Timed, Modem","DQPSK_Demod");

create_item ("DBPSK_Mod","Differential BPSK modulator with internal oscillator",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DBPSK_Mod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DBPSK_Mod",
	SPDesignAnnotFmt,
	"SYM_DSN_DBPSK_Mod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("Power","modulator output power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Modem","Timed, Modem","DBPSK_Mod");
palette_group("Timed, Modem","Timed, Modem","DBPSK_Mod");

create_item ("DBPSK_Demod","Non-coherent differential BPSK demodulator",
	"D",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_DBPSK_Demod",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"DBPSK_Demod",
	SPDesignAnnotFmt,
	"SYM_DSN_DBPSK_Demod",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("RefFreq","internal reference frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("SymbolTime","input symbol time interval",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")));
library_group("Timed, Modem","Timed, Modem","DBPSK_Demod");
palette_group("Timed, Modem","Timed, Modem","DBPSK_Demod");

create_item ("CktVI_Sense","Voltage and current sense network, analog circuit",
	"C",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_CktVI_Sense",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"CktVI_Sense",
	SPDesignAnnotFmt,
	"CktVI_Sense",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX 
);
library_group("Timed, RF Subsystems","Timed, RF Subsystems","CktVI_Sense");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","CktVI_Sense");

create_item ("CktRF_PA","RF power amplifier, analog circuit",
	"C",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_CktRF_PA",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"CktRF_PA",
	SPDesignAnnotFmt,
	"CktRF_PA",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TStep","system level simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.001")),
	create_parm ("FCarrier","input signal RF carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000")),
	create_parm ("Bias1","DC bias voltage 1",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","-0.8005247")),
	create_parm ("Bias2","DC bias voltage 2",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","4.602021")),
	create_parm ("Bias3","DC bias voltage 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","-0.8008529")),
	create_parm ("Bias4","DC bias voltage 4",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","5.492358")),
	create_parm ("Bias5","DC bias voltage 5",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")),
	create_parm ("Bias6","DC bias voltage 6",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		VOLTAGE_UNIT,
		prm("StdForm","0")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","CktRF_PA");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","CktRF_PA");

create_item ("CktLoopFilter211","Second order control loop filter, 2 poles (with one integrator), one zero, analog circuit",
	"C",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_CktLoopFilter211",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"CktLoopFilter211",
	SPDesignAnnotFmt,
	"SYM_DSN_CktLoopFilter211",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("DampingFactor","loop damping factor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.707")),
	create_parm ("NormalizedZero","loop normalized zero",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("BW","closed loop -3dB frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","4.5e3")),
	create_parm ("ExternalGain","open loop gain external to this filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1000")),
	create_parm ("C2","loop filter internal capacitor value",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		CAPACITANCE_UNIT,
		prm("StdForm","200e-12")),
	create_parm ("OpAmpGain0","loop filter internal op amp gain at DC",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100000")),
	create_parm ("MaxTimeStep","circuit transient cosimulation MaxTimeStep value",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1e-6")));
library_group("Timed, Filters","Timed, Filters","CktLoopFilter211");
palette_group("Timed, Filters","Timed, Filters","CktLoopFilter211");

create_item ("CktLoopFilter110","Second order control loop filter, one pole, one zero, analog circuit",
	"C",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_CktLoopFilter110",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"CktLoopFilter110",
	SPDesignAnnotFmt,
	"SYM_DSN_CktLoopFilter110",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("DampingFactor","loop damping factor",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.707")),
	create_parm ("NormalizedZero","loop normalized zero",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("BW","closed loop -3dB frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","6.5e6")),
	create_parm ("ExternalGain","open loop gain external to this filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","7.5e6")),
	create_parm ("C","loop filter internal capacitor value",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		CAPACITANCE_UNIT,
		prm("StdForm","20e-12")),
	create_parm ("OpAmpGain0","loop filter internal op amp gain at DC",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100000")),
	create_parm ("MaxTimeStep","circuit transient cosimulation MaxTimeStep value",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.01e-6")));
library_group("Timed, Filters","Timed, Filters","CktLoopFilter110");
palette_group("Timed, Filters","Timed, Filters","CktLoopFilter110");

create_item ("CktAmpCE","Circuit behavioral nonlinear amplifier model",
	"C",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_CktAmpCE",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"CktAmpCE",
	SPDesignAnnotFmt,
	"SYM_DSN_CktAmpCE",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TStep","Circuit envelope simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1 nsec")),
	create_parm ("FCarrier","Circuit envelope simulation carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1 GHz")),
	create_parm ("Gain","Complex gain",
		PARM_COMPLEX,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("NF","dB noise figure",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","0")),
	create_parm ("dBc1out","Output power at 1dB gain compression",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")));
library_group("Testing (for development use only)","Testing (for development use only)","CktAmpCE");
palette_group("Testing (for development use only)","Testing (for development use only)","CktAmpCE");

create_constant_form ("_nCktAmp_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nCktAmp_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nCktAmp_fMirrorSignalSet",
	"_nCktAmp_fNO",
	"_nCktAmp_fYES",
	"StdForm");
create_item ("CktAmp","Circuit behavioral nonlinear amplifier model",
	"C",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_CktAmp",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"CktAmp",
	SPDesignAnnotFmt,
	"SYM_DSN_CktAmp",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("TStep","Circuit envelope simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1 nsec")),
	create_parm ("FCarrier","Circuit envelope simulation carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1 GHz")),
	create_parm ("Gain","Complex gain",
		PARM_COMPLEX,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("NF","dB noise figure",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","0")),
	create_parm ("dBc1out","Output power at 1dB gain compression",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","0.01")),
	create_parm ("Delay","Output delay",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0")),
	create_parm ("MirrorSignal","Mirror Signal?",
		PARM_INT,
		"_nCktAmp_fMirrorSignalSet",
		UNITLESS_UNIT,
		prm("_nCktAmp_fNO","NO")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","CktAmp");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","CktAmp");

create_item ("Ckt_MGA_72543_LNA","Low noise PHEMT RFIC amplifier circuit model",
	"C",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Ckt_MGA_72543_LNA",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Ckt_MGA_72543_LNA",
	SPDesignAnnotFmt,
	"SYM_DSN_CktAmp",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CE_TimeStep","Circuit envelope simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1/(3.84e6)/8")),
	create_parm ("FCarrier","Input RF signal carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1900 MHz")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","Ckt_MGA_72543_LNA");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","Ckt_MGA_72543_LNA");

create_item ("Ckt_MGA_545P8_PA","Medium power GaAs RFIC amplifier circuit model",
	"C",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_Ckt_MGA_545P8_PA",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"Ckt_MGA_545P8_PA",
	SPDesignAnnotFmt,
	"SYM_DSN_CktAmp",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("CE_TimeStep","Circuit envelope simulation time step",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","12.5 nsec")),
	create_parm ("FCarrier","Input RF signal carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","5.2 GHz")));
library_group("Timed, RF Subsystems","Timed, RF Subsystems","Ckt_MGA_545P8_PA");
palette_group("Timed, RF Subsystems","Timed, RF Subsystems","Ckt_MGA_545P8_PA");

create_constant_form ("_nBPF_x5fRaisedCosineTimed_fImpulse_x5fmodel", 
	"Impulse model",
	0,
	"0",
	"Impulse model");
create_constant_form ("_nBPF_x5fRaisedCosineTimed_fModel_x5fwith_x5fpulse_x5fequalization", 
	"Model with pulse equalization",
	0,
	"1",
	"Model with pulse equalization");
create_form_set("_nBPF_x5fRaisedCosineTimed_fTypeSet",
	"_nBPF_x5fRaisedCosineTimed_fImpulse_x5fmodel",
	"_nBPF_x5fRaisedCosineTimed_fModel_x5fwith_x5fpulse_x5fequalization",
	"StdForm");
create_constant_form ("_nBPF_x5fRaisedCosineTimed_fNo", 
	"No",
	0,
	"0",
	"No");
create_constant_form ("_nBPF_x5fRaisedCosineTimed_fYes", 
	"Yes",
	0,
	"1",
	"Yes");
create_form_set("_nBPF_x5fRaisedCosineTimed_fSquareRootSet",
	"_nBPF_x5fRaisedCosineTimed_fNo",
	"_nBPF_x5fRaisedCosineTimed_fYes",
	"StdForm");
create_constant_form ("_nBPF_x5fRaisedCosineTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nBPF_x5fRaisedCosineTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nBPF_x5fRaisedCosineTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nBPF_x5fRaisedCosineTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nBPF_x5fRaisedCosineTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nBPF_x5fRaisedCosineTimed_fWindowTypeSet",
	"_nBPF_x5fRaisedCosineTimed_fRectangular",
	"_nBPF_x5fRaisedCosineTimed_fBartlett",
	"_nBPF_x5fRaisedCosineTimed_fHanning",
	"_nBPF_x5fRaisedCosineTimed_fHamming",
	"_nBPF_x5fRaisedCosineTimed_fFlat_x5fTop",
	"StdForm");
create_item ("BPF_RaisedCosineTimed","Bandpass raised-cosine filter",
	"B",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_BPF_RaisedCosineTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"BPF_RaisedCosineTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_BPF_RaisedCosineTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("FCenter","center frequency of filter passband",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("Bandwidth","passband bandwidth of filter; recommended as 1/SymbolTime",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000.0")),
	create_parm ("ExcessBw","raised cosine filter excess bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.5")),
	create_parm ("Type","type of raised-cosine model",
		PARM_INT,
		"_nBPF_x5fRaisedCosineTimed_fTypeSet",
		UNITLESS_UNIT,
		prm("_nBPF_x5fRaisedCosineTimed_fImpulse_x5fmodel","Impulse_model")),
	create_parm ("SquareRoot","use square-root raised-cosine model",
		PARM_INT,
		"_nBPF_x5fRaisedCosineTimed_fSquareRootSet",
		UNITLESS_UNIT,
		prm("_nBPF_x5fRaisedCosineTimed_fNo","No")),
	create_parm ("Delay","filter time delay; recommended as 4*SymbolTime",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.004")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nBPF_x5fRaisedCosineTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nBPF_x5fRaisedCosineTimed_fRectangular","Rectangular")));
library_group("Timed, Filters","Timed, Filters","BPF_RaisedCosineTimed");
palette_group("Timed, Filters","Timed, Filters","BPF_RaisedCosineTimed");

create_constant_form ("_nBPF_x5fGaussianTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nBPF_x5fGaussianTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nBPF_x5fGaussianTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nBPF_x5fGaussianTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nBPF_x5fGaussianTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nBPF_x5fGaussianTimed_fWindowTypeSet",
	"_nBPF_x5fGaussianTimed_fRectangular",
	"_nBPF_x5fGaussianTimed_fBartlett",
	"_nBPF_x5fGaussianTimed_fHanning",
	"_nBPF_x5fGaussianTimed_fHamming",
	"_nBPF_x5fGaussianTimed_fFlat_x5fTop",
	"StdForm");
create_item ("BPF_GaussianTimed","Bandpass ideal Gaussian filter",
	"B",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_BPF_GaussianTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"BPF_GaussianTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_BPF_GaussianTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("FCenter","center frequency of filter passband",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("PassBandwidth","passband bandwidth of filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2000.0")),
	create_parm ("PassAtten","attenuation in dB at PassBandwidth, 0.01 <= PassAtten <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3.")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nBPF_x5fGaussianTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nBPF_x5fGaussianTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 10/(0.5*PassBandwidth)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","BPF_GaussianTimed");
palette_group("Timed, Filters","Timed, Filters","BPF_GaussianTimed");

create_constant_form ("_nBPF_x5fEllipticTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nBPF_x5fEllipticTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nBPF_x5fEllipticTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nBPF_x5fEllipticTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nBPF_x5fEllipticTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nBPF_x5fEllipticTimed_fWindowTypeSet",
	"_nBPF_x5fEllipticTimed_fRectangular",
	"_nBPF_x5fEllipticTimed_fBartlett",
	"_nBPF_x5fEllipticTimed_fHanning",
	"_nBPF_x5fEllipticTimed_fHamming",
	"_nBPF_x5fEllipticTimed_fFlat_x5fTop",
	"StdForm");
create_item ("BPF_EllipticTimed","Bandpass elliptic response filter",
	"B",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_BPF_EllipticTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"BPF_EllipticTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_BPF_EllipticTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("FCenter","center frequency of filter passband",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("PassBandwidth","passband bandwidth of filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2000.0")),
	create_parm ("PassRipple","passband ripple in dB,  0.01 <= PassRipple <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("StopBandwidth","stopband bandwidth, StopBandwidth > PassBandwidth,  not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopBandwith, StopAtten > PassRipple, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 0 <= N <= 12; if N=0, then N is set based on StopBandwidth and StopAtten",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nBPF_x5fEllipticTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nBPF_x5fEllipticTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 20/(0.5*PassBandwidth)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","BPF_EllipticTimed");
palette_group("Timed, Filters","Timed, Filters","BPF_EllipticTimed");

create_constant_form ("_nBPF_x5fChebyshevTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nBPF_x5fChebyshevTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nBPF_x5fChebyshevTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nBPF_x5fChebyshevTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nBPF_x5fChebyshevTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nBPF_x5fChebyshevTimed_fWindowTypeSet",
	"_nBPF_x5fChebyshevTimed_fRectangular",
	"_nBPF_x5fChebyshevTimed_fBartlett",
	"_nBPF_x5fChebyshevTimed_fHanning",
	"_nBPF_x5fChebyshevTimed_fHamming",
	"_nBPF_x5fChebyshevTimed_fFlat_x5fTop",
	"StdForm");
create_item ("BPF_ChebyshevTimed","Bandpass Chebyshev response filter",
	"B",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_BPF_ChebyshevTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"BPF_ChebyshevTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_BPF_ChebyshevTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("FCenter","center frequency of filter passband",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("PassBandwidth","passband bandwidth of filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2000.0")),
	create_parm ("PassRipple","passband ripple in dB,  0.01 <= PassRipple <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.0")),
	create_parm ("StopBandwidth","stopband bandwidth, StopBandwidth > PassBandwidth,  not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopBandwith, StopAtten > PassRipple, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 0 <= N <= 15; if N=0, then N is set based on StopBandwidth and StopAtten",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nBPF_x5fChebyshevTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nBPF_x5fChebyshevTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 10/(0.5*PassBandwidth)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","BPF_ChebyshevTimed");
palette_group("Timed, Filters","Timed, Filters","BPF_ChebyshevTimed");

create_constant_form ("_nBPF_x5fButterworthTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nBPF_x5fButterworthTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nBPF_x5fButterworthTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nBPF_x5fButterworthTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nBPF_x5fButterworthTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nBPF_x5fButterworthTimed_fWindowTypeSet",
	"_nBPF_x5fButterworthTimed_fRectangular",
	"_nBPF_x5fButterworthTimed_fBartlett",
	"_nBPF_x5fButterworthTimed_fHanning",
	"_nBPF_x5fButterworthTimed_fHamming",
	"_nBPF_x5fButterworthTimed_fFlat_x5fTop",
	"StdForm");
create_item ("BPF_ButterworthTimed","Bandpass Butterworth response filter",
	"B",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_BPF_ButterworthTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"BPF_ButterworthTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_BPF_ButterworthTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("FCenter","center frequency of filter passband",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("PassBandwidth","passband bandwidth of filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2000.0")),
	create_parm ("PassAtten","passband attenuation in dB,  0.01 <= PassAtten <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3.")),
	create_parm ("StopBandwidth","stopband bandwidth, StopBandwidth > PassBandwidth,  not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopBandwith, StopAtten > PassAtten, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 0 <= N <= 15; if N=0, then N is set based on StopBandwidth and StopAtten",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nBPF_x5fButterworthTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nBPF_x5fButterworthTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 10/(0.5*Bandwidth_at_3dB_down)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","BPF_ButterworthTimed");
palette_group("Timed, Filters","Timed, Filters","BPF_ButterworthTimed");

create_constant_form ("_nBPF_x5fBesselTimed_fRectangular", 
	"Rectangular",
	0,
	"0",
	"Rectangular");
create_constant_form ("_nBPF_x5fBesselTimed_fBartlett", 
	"Bartlett",
	0,
	"1",
	"Bartlett");
create_constant_form ("_nBPF_x5fBesselTimed_fHanning", 
	"Hanning",
	0,
	"2",
	"Hanning");
create_constant_form ("_nBPF_x5fBesselTimed_fHamming", 
	"Hamming",
	0,
	"3",
	"Hamming");
create_constant_form ("_nBPF_x5fBesselTimed_fFlat_x5fTop", 
	"Flat Top",
	0,
	"4",
	"Flat Top");
create_form_set("_nBPF_x5fBesselTimed_fWindowTypeSet",
	"_nBPF_x5fBesselTimed_fRectangular",
	"_nBPF_x5fBesselTimed_fBartlett",
	"_nBPF_x5fBesselTimed_fHanning",
	"_nBPF_x5fBesselTimed_fHamming",
	"_nBPF_x5fBesselTimed_fFlat_x5fTop",
	"StdForm");
create_item ("BPF_BesselTimed","Bandpass Bessel response filter",
	"B",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_BPF_BesselTimed",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"BPF_BesselTimed",
	SPDesignAnnotFmt,
	"SYM_DSN_BPF_BesselTimed",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","input resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","output resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Loss","power loss in dB referenced to matched source and load resistors",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("FCenter","center frequency of filter passband",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1000000.0")),
	create_parm ("PassBandwidth","passband bandwidth of filter",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","2000.0")),
	create_parm ("PassAtten","passband attenuation in dB,  0.01 <= PassAtten <= 3",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3.")),
	create_parm ("StopBandwidth","stopband bandwidth, StopBandwidth > PassBandwidth,  not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1200000")),
	create_parm ("StopAtten","attenuation in dB at StopBandwith, StopAtten > PassAtten, not used if N > 0",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","50.")),
	create_parm ("N","filter order, 1 <= N <= 12; the N=0 feature is not available in this product release",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("WindowType","window applied to filter impulse response",
		PARM_INT | PARM_NO_DISPLAY,
		"_nBPF_x5fBesselTimed_fWindowTypeSet",
		UNITLESS_UNIT,
		prm("_nBPF_x5fBesselTimed_fRectangular","Rectangular")),
	create_parm ("ImpTime","impulse time duration, ImpTime=0 defaults to 10/(0.5*Bandwidth_at_3dB_down)",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")));
library_group("Timed, Filters","Timed, Filters","BPF_BesselTimed");
palette_group("Timed, Filters","Timed, Filters","BPF_BesselTimed");

