set_design_type( sigproc_net );
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fMirrorSpectrumSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fNO",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fOff", 
	"Off",
	0,
	"0",
	"Off");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fRMS_x5f_x5fVideo_x5f", 
	"RMS (Video)",
	0,
	"1",
	"RMS (Video)");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fAverageTypeSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fOff",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fRMS_x5f_x5fVideo_x5f",
	"StdForm");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fPulseResLen", 
	"PulseResLen",
	0,
	"0",
	"PulseResLen");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fManualResLen", 
	"ManualResLen",
	0,
	"1",
	"ManualResLen");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fHeaderResLen", 
	"HeaderResLen",
	0,
	"2",
	"HeaderResLen");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fResultLengthSelectSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fPulseResLen",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fManualResLen",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fHeaderResLen",
	"StdForm");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fUseMcFiltSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fNO",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f1", 
	"TFC 1",
	0,
	"0",
	"TFC 1");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f2", 
	"TFC 2",
	0,
	"1",
	"TFC 2");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f3", 
	"TFC 3",
	0,
	"2",
	"TFC 3");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f4", 
	"TFC 4",
	0,
	"3",
	"TFC 4");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f5", 
	"TFC 5",
	0,
	"4",
	"TFC 5");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f6", 
	"TFC 6",
	0,
	"5",
	"TFC 6");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f7", 
	"TFC 7",
	0,
	"6",
	"TFC 7");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f8", 
	"TFC 8",
	0,
	"7",
	"TFC 8");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f9", 
	"TFC 9",
	0,
	"8",
	"TFC 9");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f10", 
	"TFC 10",
	0,
	"9",
	"TFC 10");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFCSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f1",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f2",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f3",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f4",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f5",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f6",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f7",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f8",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f9",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f10",
	"StdForm");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fStandard_x5fPreamble", 
	"Standard Preamble",
	0,
	"0",
	"Standard Preamble");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fshort_x5fPreamble", 
	"short Preamble",
	0,
	"1",
	"short Preamble");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fPreambleTypeSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fStandard_x5fPreamble",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fshort_x5fPreamble",
	"StdForm");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fHeaderDataRate", 
	"HeaderDataRate",
	0,
	"0",
	"HeaderDataRate");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fManualDataRate", 
	"ManualDataRate",
	0,
	"1",
	"ManualDataRate");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fDataRateSelectSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fHeaderDataRate",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fManualDataRate",
	"StdForm");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f53_x5f3_x5fMbps", 
	"_53.3 Mbps",
	0,
	"0",
	"_53.3 Mbps");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f80_x5fMbps", 
	"_80 Mbps",
	0,
	"1",
	"_80 Mbps");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f106_x5f7_x5fMbps", 
	"_106.7 Mbps",
	0,
	"2",
	"_106.7 Mbps");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f160_x5fMbps", 
	"_160 Mbps",
	0,
	"3",
	"_160 Mbps");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f200_x5fMbps", 
	"_200 Mbps",
	0,
	"4",
	"_200 Mbps");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f320_x5fMbps", 
	"_320 Mbps",
	0,
	"5",
	"_320 Mbps");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f400_x5fMbps", 
	"_400 Mbps",
	0,
	"6",
	"_400 Mbps");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f480_x5fMbps", 
	"_480 Mbps",
	0,
	"7",
	"_480 Mbps");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fDataRateSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f53_x5f3_x5fMbps",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f80_x5fMbps",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f106_x5f7_x5fMbps",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f160_x5fMbps",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f200_x5fMbps",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f320_x5fMbps",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f400_x5fMbps",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f480_x5fMbps",
	"StdForm");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fFreqHoppingSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fNO",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fFollowSpec", 
	"FollowSpec",
	0,
	"0",
	"FollowSpec");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fEveryFrame", 
	"EveryFrame",
	0,
	"1",
	"EveryFrame");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTrkPhaseAvgSymSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fFollowSpec",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fEveryFrame",
	"StdForm");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fUWB_x5fMBOFDM_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fUWB_x5fMBOFDM_x5fEVM_fSaveConstellationSet",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fNO",
	"_n_x5fUWB_x5fMBOFDM_x5fEVM_fYES",
	"StdForm");
create_item ("_UWB_MBOFDM_EVM","UWB MBOFDM EVM measurement for FreqHopping and Non-FreqHopping signals",
	"U",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_UWB_MBOFDM_EVM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fUWB_x5fMBOFDM_x5fEVM_lsdfuwbmeasurements",
	SPComponentAnnotFmt,
	"SYM_UWB_MBOFDM_EVM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RLoad","load resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","physical temperature, in degrees C, of load resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency ( -1 means same as input )",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","3960 MHz")),
	create_parm ("MirrorSpectrum","Mirror frequency spectrum?",
		PARM_INT,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_fNO","NO")),
	create_parm ("Start","start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("AverageType","average type",
		PARM_INT,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fAverageTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_fRMS_x5f_x5fVideo_x5f","RMS__Video_")),
	create_parm ("FramesToAverage","number of frames that will be averaged if AverageType is RMS (Video)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("SearchLength","search length, it's better to include more than 2 full frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","500 usec")),
	create_parm ("ResultLengthSelect","PulseResLen: detect from pulse length search, ManualResLen: ResultLength, HeaderResLen: detect from decoded Header bits",
		PARM_INT,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fResultLengthSelectSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_fHeaderResLen","HeaderResLen")),
	create_parm ("ResultLength","OFDM symbols (Header + PSDU) to be demodulated, valid when ResultLengthSelect is set to Manual",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","60")),
	create_parm ("MeasurementOffset","0: EVM for (Header + PSDU), 12: EVM for PSDU, (1,11): EVM for (partial Header + PSDU)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MeasurementInterval","number of OFDM symbols to be measured (starting from MeasurementOffset)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","48")),
	create_parm ("UseMcFilt","Whether or not turn on Multi-carrier out-of-band rejection filter",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fUseMcFiltSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_fYES","YES")),
	create_parm ("TFC","TFC number",
		PARM_INT,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFCSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_fTFC_x5f1","TFC_1")),
	create_parm ("PreambleType","stand preamble or short preamble",
		PARM_INT,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fPreambleTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_fStandard_x5fPreamble","Standard_Preamble")),
	create_parm ("DataRateSelect","HeaderDataRate: Auto detection from header info, ManualDataRate: set by 'DataRate'",
		PARM_INT,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fDataRateSelectSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_fHeaderDataRate","HeaderDataRate")),
	create_parm ("DataRate","information transmit rate of data part",
		PARM_INT,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fDataRateSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_f_x5f53_x5f3_x5fMbps","_53_3_Mbps")),
	create_parm ("FreqHopping","frequency hopping analysis or not, only valid for TFC 1 2 3 and 4",
		PARM_INT,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fFreqHoppingSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_fYES","YES")),
	create_parm ("TrkPhaseAvgSym","symbol numbers to average non-preamble part in phase tracking, EveryFrame means no average",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fTrkPhaseAvgSymSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_fFollowSpec","FollowSpec")),
	create_parm ("PmblPhaseAvgSym","symbol numbers to average of preamble part in phase error caculating",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("SymbolTimingAdjust","symbol time adjustment in 'Bandwidth' sample rate before the valid symbol portion",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-1")),
	create_parm ("Bandwidth","real bandwidth of input signal in each band",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","528 MHz")),
	create_parm ("SaveConstellation","if set YES, the measured vector used for EVM calculation shall be saved to Data File",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fUWB_x5fMBOFDM_x5fEVM_fSaveConstellationSet",
		UNITLESS_UNIT,
		prm("_n_x5fUWB_x5fMBOFDM_x5fEVM_fNO","NO")));
library_group("UWB, Measurement","UWB, Measurement","_UWB_MBOFDM_EVM");
palette_group("UWB, Measurement","UWB, Measurement","_UWB_MBOFDM_EVM");

create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fMirrorSpectrumSet",
	"_nUWB_x5fMBOFDM_x5fEVM_fNO",
	"_nUWB_x5fMBOFDM_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fOff", 
	"Off",
	0,
	"0",
	"Off");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fRMS_x5f_x5fVideo_x5f", 
	"RMS (Video)",
	0,
	"1",
	"RMS (Video)");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fAverageTypeSet",
	"_nUWB_x5fMBOFDM_x5fEVM_fOff",
	"_nUWB_x5fMBOFDM_x5fEVM_fRMS_x5f_x5fVideo_x5f",
	"StdForm");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fPulseResLen", 
	"PulseResLen",
	0,
	"0",
	"PulseResLen");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fManualResLen", 
	"ManualResLen",
	0,
	"1",
	"ManualResLen");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fHeaderResLen", 
	"HeaderResLen",
	0,
	"2",
	"HeaderResLen");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fResultLengthSelectSet",
	"_nUWB_x5fMBOFDM_x5fEVM_fPulseResLen",
	"_nUWB_x5fMBOFDM_x5fEVM_fManualResLen",
	"_nUWB_x5fMBOFDM_x5fEVM_fHeaderResLen",
	"StdForm");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fUseMcFiltSet",
	"_nUWB_x5fMBOFDM_x5fEVM_fNO",
	"_nUWB_x5fMBOFDM_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f1", 
	"TFC 1",
	0,
	"0",
	"TFC 1");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f2", 
	"TFC 2",
	0,
	"1",
	"TFC 2");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f3", 
	"TFC 3",
	0,
	"2",
	"TFC 3");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f4", 
	"TFC 4",
	0,
	"3",
	"TFC 4");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f5", 
	"TFC 5",
	0,
	"4",
	"TFC 5");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f6", 
	"TFC 6",
	0,
	"5",
	"TFC 6");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f7", 
	"TFC 7",
	0,
	"6",
	"TFC 7");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f8", 
	"TFC 8",
	0,
	"7",
	"TFC 8");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f9", 
	"TFC 9",
	0,
	"8",
	"TFC 9");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f10", 
	"TFC 10",
	0,
	"9",
	"TFC 10");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fTFCSet",
	"_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f1",
	"_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f2",
	"_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f3",
	"_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f4",
	"_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f5",
	"_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f6",
	"_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f7",
	"_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f8",
	"_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f9",
	"_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f10",
	"StdForm");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fStandard_x5fPreamble", 
	"Standard Preamble",
	0,
	"0",
	"Standard Preamble");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fshort_x5fPreamble", 
	"short Preamble",
	0,
	"1",
	"short Preamble");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fPreambleTypeSet",
	"_nUWB_x5fMBOFDM_x5fEVM_fStandard_x5fPreamble",
	"_nUWB_x5fMBOFDM_x5fEVM_fshort_x5fPreamble",
	"StdForm");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fHeaderDataRate", 
	"HeaderDataRate",
	0,
	"0",
	"HeaderDataRate");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fManualDataRate", 
	"ManualDataRate",
	0,
	"1",
	"ManualDataRate");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fDataRateSelectSet",
	"_nUWB_x5fMBOFDM_x5fEVM_fHeaderDataRate",
	"_nUWB_x5fMBOFDM_x5fEVM_fManualDataRate",
	"StdForm");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_f_x5f53_x5f3_x5fMbps", 
	"_53.3 Mbps",
	0,
	"0",
	"_53.3 Mbps");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_f_x5f80_x5fMbps", 
	"_80 Mbps",
	0,
	"1",
	"_80 Mbps");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_f_x5f106_x5f7_x5fMbps", 
	"_106.7 Mbps",
	0,
	"2",
	"_106.7 Mbps");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_f_x5f160_x5fMbps", 
	"_160 Mbps",
	0,
	"3",
	"_160 Mbps");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_f_x5f200_x5fMbps", 
	"_200 Mbps",
	0,
	"4",
	"_200 Mbps");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_f_x5f320_x5fMbps", 
	"_320 Mbps",
	0,
	"5",
	"_320 Mbps");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_f_x5f400_x5fMbps", 
	"_400 Mbps",
	0,
	"6",
	"_400 Mbps");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_f_x5f480_x5fMbps", 
	"_480 Mbps",
	0,
	"7",
	"_480 Mbps");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fDataRateSet",
	"_nUWB_x5fMBOFDM_x5fEVM_f_x5f53_x5f3_x5fMbps",
	"_nUWB_x5fMBOFDM_x5fEVM_f_x5f80_x5fMbps",
	"_nUWB_x5fMBOFDM_x5fEVM_f_x5f106_x5f7_x5fMbps",
	"_nUWB_x5fMBOFDM_x5fEVM_f_x5f160_x5fMbps",
	"_nUWB_x5fMBOFDM_x5fEVM_f_x5f200_x5fMbps",
	"_nUWB_x5fMBOFDM_x5fEVM_f_x5f320_x5fMbps",
	"_nUWB_x5fMBOFDM_x5fEVM_f_x5f400_x5fMbps",
	"_nUWB_x5fMBOFDM_x5fEVM_f_x5f480_x5fMbps",
	"StdForm");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fFreqHoppingSet",
	"_nUWB_x5fMBOFDM_x5fEVM_fNO",
	"_nUWB_x5fMBOFDM_x5fEVM_fYES",
	"StdForm");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fFollowSpec", 
	"FollowSpec",
	0,
	"0",
	"FollowSpec");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fEveryFrame", 
	"EveryFrame",
	0,
	"1",
	"EveryFrame");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fTrkPhaseAvgSymSet",
	"_nUWB_x5fMBOFDM_x5fEVM_fFollowSpec",
	"_nUWB_x5fMBOFDM_x5fEVM_fEveryFrame",
	"StdForm");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nUWB_x5fMBOFDM_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nUWB_x5fMBOFDM_x5fEVM_fSaveConstellationSet",
	"_nUWB_x5fMBOFDM_x5fEVM_fNO",
	"_nUWB_x5fMBOFDM_x5fEVM_fYES",
	"StdForm");
create_item ("UWB_MBOFDM_EVM","UWB MBOFDM EVM measurement for FreqHopping and Non-FreqHopping signals",
	"U",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_UWB_MBOFDM_EVM",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"UWB_MBOFDM_EVM",
	SPDesignAnnotFmt,
	"SYM_UWB_MBOFDM_EVM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RLoad","load resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","physical temperature, in degrees C, of load resistance",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("FCarrier","carrier frequency ( -1 means same as input )",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","3960 MHz")),
	create_parm ("MirrorSpectrum","Mirror frequency spectrum?",
		PARM_INT,
		"_nUWB_x5fMBOFDM_x5fEVM_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_fNO","NO")),
	create_parm ("Start","start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("AverageType","average type",
		PARM_INT,
		"_nUWB_x5fMBOFDM_x5fEVM_fAverageTypeSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_fRMS_x5f_x5fVideo_x5f","RMS__Video_")),
	create_parm ("FramesToAverage","number of frames that will be averaged if AverageType is RMS (Video)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","10")),
	create_parm ("SearchLength","search length, it's better to include more than 2 full frames",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","500 usec")),
	create_parm ("ResultLengthSelect","PulseResLen: detect from pulse length search, ManualResLen: ResultLength, HeaderResLen: detect from decoded Header bits",
		PARM_INT,
		"_nUWB_x5fMBOFDM_x5fEVM_fResultLengthSelectSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_fHeaderResLen","HeaderResLen")),
	create_parm ("ResultLength","OFDM symbols (Header + PSDU) to be demodulated, valid when ResultLengthSelect is set to Manual",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","60")),
	create_parm ("MeasurementOffset","0: EVM for (Header + PSDU), 12: EVM for PSDU, (1,11): EVM for (partial Header + PSDU)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("MeasurementInterval","number of OFDM symbols to be measured (starting from MeasurementOffset)",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","48")),
	create_parm ("UseMcFilt","Whether or not turn on Multi-carrier out-of-band rejection filter",
		PARM_INT | PARM_NO_DISPLAY,
		"_nUWB_x5fMBOFDM_x5fEVM_fUseMcFiltSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_fYES","YES")),
	create_parm ("TFC","TFC number",
		PARM_INT,
		"_nUWB_x5fMBOFDM_x5fEVM_fTFCSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_fTFC_x5f1","TFC_1")),
	create_parm ("PreambleType","stand preamble or short preamble",
		PARM_INT,
		"_nUWB_x5fMBOFDM_x5fEVM_fPreambleTypeSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_fStandard_x5fPreamble","Standard_Preamble")),
	create_parm ("DataRateSelect","HeaderDataRate: Auto detection from header info, ManualDataRate: set by 'DataRate'",
		PARM_INT,
		"_nUWB_x5fMBOFDM_x5fEVM_fDataRateSelectSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_fHeaderDataRate","HeaderDataRate")),
	create_parm ("DataRate","information transmit rate of data part",
		PARM_INT,
		"_nUWB_x5fMBOFDM_x5fEVM_fDataRateSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_f_x5f53_x5f3_x5fMbps","_53_3_Mbps")),
	create_parm ("FreqHopping","frequency hopping analysis or not, only valid for TFC 1 2 3 and 4",
		PARM_INT,
		"_nUWB_x5fMBOFDM_x5fEVM_fFreqHoppingSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_fYES","YES")),
	create_parm ("TrkPhaseAvgSym","symbol numbers to average non-preamble part in phase tracking, EveryFrame means no average",
		PARM_INT | PARM_NO_DISPLAY,
		"_nUWB_x5fMBOFDM_x5fEVM_fTrkPhaseAvgSymSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_fFollowSpec","FollowSpec")),
	create_parm ("PmblPhaseAvgSym","symbol numbers to average of preamble part in phase error caculating",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","5")),
	create_parm ("SymbolTimingAdjust","symbol time adjustment in 'Bandwidth' sample rate before the valid symbol portion",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-1")),
	create_parm ("Bandwidth","real bandwidth of input signal in each band",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","528 MHz")),
	create_parm ("SaveConstellation","if set YES, the measured vector used for EVM calculation shall be saved to Data File",
		PARM_INT | PARM_NO_DISPLAY,
		"_nUWB_x5fMBOFDM_x5fEVM_fSaveConstellationSet",
		UNITLESS_UNIT,
		prm("_nUWB_x5fMBOFDM_x5fEVM_fNO","NO")));
library_group("UWB, Measurement","UWB, Measurement","UWB_MBOFDM_EVM");
palette_group("UWB, Measurement","UWB, Measurement","UWB_MBOFDM_EVM");

