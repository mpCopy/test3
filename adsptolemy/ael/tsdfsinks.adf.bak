set_design_type( sigproc_net );
create_constant_form ("_n_x5fRF_x5fCCDF_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_n_x5fRF_x5fCCDF_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_n_x5fRF_x5fCCDF_fPlotSet",
	"_n_x5fRF_x5fCCDF_fNone",
	"_n_x5fRF_x5fCCDF_fRectangular",
	"StdForm");
create_constant_form ("_n_x5fRF_x5fCCDF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fRF_x5fCCDF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fRF_x5fCCDF_fOutputPeakMeanSet",
	"_n_x5fRF_x5fCCDF_fNO",
	"_n_x5fRF_x5fCCDF_fYES",
	"StdForm");
create_item ("_RF_CCDF","Complementary, cumulative density function (CCDF) for RF Signals",
	"R",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_RF_CCDF",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fRF_x5fCCDF_ltsdfsinks",
	SPComponentAnnotFmt,
	"SYM_RF_CCDF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_n_x5fRF_x5fCCDF_fPlotSet",
		UNITLESS_UNIT,
		prm("_n_x5fRF_x5fCCDF_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")),
	create_parm ("NumBins","Number of points in the CCDF curve",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("OutputPeakMean","Output signal peak and mean values",
		PARM_INT,
		"_n_x5fRF_x5fCCDF_fOutputPeakMeanSet",
		UNITLESS_UNIT,
		prm("_n_x5fRF_x5fCCDF_fNO","NO")));
library_group("Sinks","Sinks","_RF_CCDF");
palette_group("Sinks","Sinks","_RF_CCDF");

create_constant_form ("_nRF_x5fCCDF_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nRF_x5fCCDF_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_nRF_x5fCCDF_fPlotSet",
	"_nRF_x5fCCDF_fNone",
	"_nRF_x5fCCDF_fRectangular",
	"StdForm");
create_constant_form ("_nRF_x5fCCDF_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nRF_x5fCCDF_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nRF_x5fCCDF_fOutputPeakMeanSet",
	"_nRF_x5fCCDF_fNO",
	"_nRF_x5fCCDF_fYES",
	"StdForm");
create_item ("RF_CCDF","Complementary, cumulative density function (CCDF) for RF Signals",
	"R",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_RF_CCDF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"RF_CCDF",
	SPDesignAnnotFmt,
	"SYM_DSN_RF_CCDF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_nRF_x5fCCDF_fPlotSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fCCDF_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")),
	create_parm ("NumBins","Number of points in the CCDF curve",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("OutputPeakMean","Output signal peak and mean values",
		PARM_INT,
		"_nRF_x5fCCDF_fOutputPeakMeanSet",
		UNITLESS_UNIT,
		prm("_nRF_x5fCCDF_fNO","NO")));
library_group("Sinks","Sinks","RF_CCDF");
palette_group("Sinks","Sinks","RF_CCDF");

create_constant_form ("_n_x5fspectrum_x5fanalyzer_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_n_x5fspectrum_x5fanalyzer_fHamming_x5f0_x5f54", 
	"Hamming 0.54",
	0,
	"1",
	"Hamming 0.54");
create_constant_form ("_n_x5fspectrum_x5fanalyzer_fHanning_x5f0_x5f50", 
	"Hanning 0.50",
	0,
	"2",
	"Hanning 0.50");
create_constant_form ("_n_x5fspectrum_x5fanalyzer_fGaussian_x5f0_x5f75", 
	"Gaussian 0.75",
	0,
	"3",
	"Gaussian 0.75");
create_constant_form ("_n_x5fspectrum_x5fanalyzer_fKaiser_x5f7_x5f865", 
	"Kaiser 7.865",
	0,
	"4",
	"Kaiser 7.865");
create_constant_form ("_n_x5fspectrum_x5fanalyzer_f_x5f8510_x5f6_x5f0", 
	"_8510 6.0",
	0,
	"5",
	"8510 6.0");
create_constant_form ("_n_x5fspectrum_x5fanalyzer_fBlackman", 
	"Blackman",
	0,
	"6",
	"Blackman");
create_constant_form ("_n_x5fspectrum_x5fanalyzer_fBlackman_x5fHarris", 
	"Blackman-Harris",
	0,
	"7",
	"Blackman-Harris");
create_form_set("_n_x5fspectrum_x5fanalyzer_fWindowSet",
	"_n_x5fspectrum_x5fanalyzer_fnone",
	"_n_x5fspectrum_x5fanalyzer_fHamming_x5f0_x5f54",
	"_n_x5fspectrum_x5fanalyzer_fHanning_x5f0_x5f50",
	"_n_x5fspectrum_x5fanalyzer_fGaussian_x5f0_x5f75",
	"_n_x5fspectrum_x5fanalyzer_fKaiser_x5f7_x5f865",
	"_n_x5fspectrum_x5fanalyzer_f_x5f8510_x5f6_x5f0",
	"_n_x5fspectrum_x5fanalyzer_fBlackman",
	"_n_x5fspectrum_x5fanalyzer_fBlackman_x5fHarris",
	"StdForm");
create_constant_form ("_n_x5fspectrum_x5fanalyzer_fBaseband", 
	"Baseband",
	0,
	"0",
	"Baseband");
create_constant_form ("_n_x5fspectrum_x5fanalyzer_fRF", 
	"RF",
	0,
	"1",
	"RF");
create_form_set("_n_x5fspectrum_x5fanalyzer_fSignalTypeSet",
	"_n_x5fspectrum_x5fanalyzer_fBaseband",
	"_n_x5fspectrum_x5fanalyzer_fRF",
	"StdForm");
create_item ("_spectrum_analyzer","Spectrum analyzer",
	"s",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_spectrum_analyzer",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fspectrum_x5fanalyzer_ltsdfsinks",
	SPComponentAnnotFmt,
	"SYM_spectrum_analyzer",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FCarrier","Carrier Frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0 Hz")),
	create_parm ("Start","Start Time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Stop","Stop Time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 msec")),
	create_parm ("Window","Window",
		PARM_INT,
		"_n_x5fspectrum_x5fanalyzer_fWindowSet",
		UNITLESS_UNIT,
		prm("_n_x5fspectrum_x5fanalyzer_fnone","none")),
	create_parm ("ResBW","Resolution Bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SignalType","input signal type",
		PARM_INT | PARM_NO_DISPLAY | PARM_NOT_EDITED,
		"_n_x5fspectrum_x5fanalyzer_fSignalTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fspectrum_x5fanalyzer_fRF","RF")));
library_group("Testing (for development use only)","Testing (for development use only)","_spectrum_analyzer");
palette_group("Testing (for development use only)","Testing (for development use only)","_spectrum_analyzer");

create_constant_form ("_nspectrum_x5fanalyzer_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_nspectrum_x5fanalyzer_fHamming_x5f0_x5f54", 
	"Hamming 0.54",
	0,
	"1",
	"Hamming 0.54");
create_constant_form ("_nspectrum_x5fanalyzer_fHanning_x5f0_x5f50", 
	"Hanning 0.50",
	0,
	"2",
	"Hanning 0.50");
create_constant_form ("_nspectrum_x5fanalyzer_fGaussian_x5f0_x5f75", 
	"Gaussian 0.75",
	0,
	"3",
	"Gaussian 0.75");
create_constant_form ("_nspectrum_x5fanalyzer_fKaiser_x5f7_x5f865", 
	"Kaiser 7.865",
	0,
	"4",
	"Kaiser 7.865");
create_constant_form ("_nspectrum_x5fanalyzer_f_x5f8510_x5f6_x5f0", 
	"_8510 6.0",
	0,
	"5",
	"8510 6.0");
create_constant_form ("_nspectrum_x5fanalyzer_fBlackman", 
	"Blackman",
	0,
	"6",
	"Blackman");
create_constant_form ("_nspectrum_x5fanalyzer_fBlackman_x5fHarris", 
	"Blackman-Harris",
	0,
	"7",
	"Blackman-Harris");
create_form_set("_nspectrum_x5fanalyzer_fWindowSet",
	"_nspectrum_x5fanalyzer_fnone",
	"_nspectrum_x5fanalyzer_fHamming_x5f0_x5f54",
	"_nspectrum_x5fanalyzer_fHanning_x5f0_x5f50",
	"_nspectrum_x5fanalyzer_fGaussian_x5f0_x5f75",
	"_nspectrum_x5fanalyzer_fKaiser_x5f7_x5f865",
	"_nspectrum_x5fanalyzer_f_x5f8510_x5f6_x5f0",
	"_nspectrum_x5fanalyzer_fBlackman",
	"_nspectrum_x5fanalyzer_fBlackman_x5fHarris",
	"StdForm");
create_constant_form ("_nspectrum_x5fanalyzer_fBaseband", 
	"Baseband",
	0,
	"0",
	"Baseband");
create_constant_form ("_nspectrum_x5fanalyzer_fRF", 
	"RF",
	0,
	"1",
	"RF");
create_form_set("_nspectrum_x5fanalyzer_fSignalTypeSet",
	"_nspectrum_x5fanalyzer_fBaseband",
	"_nspectrum_x5fanalyzer_fRF",
	"StdForm");
create_item ("spectrum_analyzer","Spectrum analyzer",
	"s",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_spectrum_analyzer",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"spectrum_analyzer",
	SPDesignAnnotFmt,
	"SYM_spectrum_analyzer",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("FCarrier","Carrier Frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0 Hz")),
	create_parm ("Start","Start Time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Stop","Stop Time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 msec")),
	create_parm ("Window","Window",
		PARM_INT,
		"_nspectrum_x5fanalyzer_fWindowSet",
		UNITLESS_UNIT,
		prm("_nspectrum_x5fanalyzer_fnone","none")),
	create_parm ("ResBW","Resolution Bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SignalType","input signal type",
		PARM_INT | PARM_NO_DISPLAY | PARM_NOT_EDITED,
		"_nspectrum_x5fanalyzer_fSignalTypeSet",
		UNITLESS_UNIT,
		prm("_nspectrum_x5fanalyzer_fRF","RF")));
library_group("Testing (for development use only)","Testing (for development use only)","spectrum_analyzer");
palette_group("Testing (for development use only)","Testing (for development use only)","spectrum_analyzer");

create_constant_form ("_n_x5fSpectrumAnalyzerResBW_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_n_x5fSpectrumAnalyzerResBW_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_n_x5fSpectrumAnalyzerResBW_fPlotSet",
	"_n_x5fSpectrumAnalyzerResBW_fNone",
	"_n_x5fSpectrumAnalyzerResBW_fRectangular",
	"StdForm");
create_constant_form ("_n_x5fSpectrumAnalyzerResBW_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_n_x5fSpectrumAnalyzerResBW_fHamming_x5f0_x5f54", 
	"Hamming 0.54",
	0,
	"1",
	"Hamming 0.54");
create_constant_form ("_n_x5fSpectrumAnalyzerResBW_fHanning_x5f0_x5f50", 
	"Hanning 0.50",
	0,
	"2",
	"Hanning 0.50");
create_constant_form ("_n_x5fSpectrumAnalyzerResBW_fGaussian_x5f0_x5f75", 
	"Gaussian 0.75",
	0,
	"3",
	"Gaussian 0.75");
create_constant_form ("_n_x5fSpectrumAnalyzerResBW_fKaiser_x5f7_x5f865", 
	"Kaiser 7.865",
	0,
	"4",
	"Kaiser 7.865");
create_constant_form ("_n_x5fSpectrumAnalyzerResBW_f_x5f8510_x5f6_x5f0", 
	"_8510 6.0",
	0,
	"5",
	"8510 6.0");
create_constant_form ("_n_x5fSpectrumAnalyzerResBW_fBlackman", 
	"Blackman",
	0,
	"6",
	"Blackman");
create_constant_form ("_n_x5fSpectrumAnalyzerResBW_fBlackman_x5fHarris", 
	"Blackman-Harris",
	0,
	"7",
	"Blackman-Harris");
create_form_set("_n_x5fSpectrumAnalyzerResBW_fWindowSet",
	"_n_x5fSpectrumAnalyzerResBW_fnone",
	"_n_x5fSpectrumAnalyzerResBW_fHamming_x5f0_x5f54",
	"_n_x5fSpectrumAnalyzerResBW_fHanning_x5f0_x5f50",
	"_n_x5fSpectrumAnalyzerResBW_fGaussian_x5f0_x5f75",
	"_n_x5fSpectrumAnalyzerResBW_fKaiser_x5f7_x5f865",
	"_n_x5fSpectrumAnalyzerResBW_f_x5f8510_x5f6_x5f0",
	"_n_x5fSpectrumAnalyzerResBW_fBlackman",
	"_n_x5fSpectrumAnalyzerResBW_fBlackman_x5fHarris",
	"StdForm");
create_item ("_SpectrumAnalyzerResBW","Spectrum analyzer with resolution bandwidth setting",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SpectrumAnalyzerResBW",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSpectrumAnalyzerResBW_ltsdfsinks",
	SPComponentAnnotFmt,
	"SYM_SpectrumAnalyzerResBW",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_n_x5fSpectrumAnalyzerResBW_fPlotSet",
		UNITLESS_UNIT,
		prm("_n_x5fSpectrumAnalyzerResBW_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")),
	create_parm ("Window","Window with default constant applied to collected data (default constant is used when WindowConstant is 0.0)",
		PARM_INT,
		"_n_x5fSpectrumAnalyzerResBW_fWindowSet",
		UNITLESS_UNIT,
		prm("_n_x5fSpectrumAnalyzerResBW_fnone","none")),
	create_parm ("ResBW","Resolution bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","30 kHz")),
	create_parm ("NumSegments","Number of segments",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SegmentTime","Segment time",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 msec")));
library_group("Sinks","Sinks","_SpectrumAnalyzerResBW");
palette_group("Sinks","Sinks","_SpectrumAnalyzerResBW");

create_constant_form ("_nSpectrumAnalyzerResBW_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nSpectrumAnalyzerResBW_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_nSpectrumAnalyzerResBW_fPlotSet",
	"_nSpectrumAnalyzerResBW_fNone",
	"_nSpectrumAnalyzerResBW_fRectangular",
	"StdForm");
create_constant_form ("_nSpectrumAnalyzerResBW_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_nSpectrumAnalyzerResBW_fHamming_x5f0_x5f54", 
	"Hamming 0.54",
	0,
	"1",
	"Hamming 0.54");
create_constant_form ("_nSpectrumAnalyzerResBW_fHanning_x5f0_x5f50", 
	"Hanning 0.50",
	0,
	"2",
	"Hanning 0.50");
create_constant_form ("_nSpectrumAnalyzerResBW_fGaussian_x5f0_x5f75", 
	"Gaussian 0.75",
	0,
	"3",
	"Gaussian 0.75");
create_constant_form ("_nSpectrumAnalyzerResBW_fKaiser_x5f7_x5f865", 
	"Kaiser 7.865",
	0,
	"4",
	"Kaiser 7.865");
create_constant_form ("_nSpectrumAnalyzerResBW_f_x5f8510_x5f6_x5f0", 
	"_8510 6.0",
	0,
	"5",
	"8510 6.0");
create_constant_form ("_nSpectrumAnalyzerResBW_fBlackman", 
	"Blackman",
	0,
	"6",
	"Blackman");
create_constant_form ("_nSpectrumAnalyzerResBW_fBlackman_x5fHarris", 
	"Blackman-Harris",
	0,
	"7",
	"Blackman-Harris");
create_form_set("_nSpectrumAnalyzerResBW_fWindowSet",
	"_nSpectrumAnalyzerResBW_fnone",
	"_nSpectrumAnalyzerResBW_fHamming_x5f0_x5f54",
	"_nSpectrumAnalyzerResBW_fHanning_x5f0_x5f50",
	"_nSpectrumAnalyzerResBW_fGaussian_x5f0_x5f75",
	"_nSpectrumAnalyzerResBW_fKaiser_x5f7_x5f865",
	"_nSpectrumAnalyzerResBW_f_x5f8510_x5f6_x5f0",
	"_nSpectrumAnalyzerResBW_fBlackman",
	"_nSpectrumAnalyzerResBW_fBlackman_x5fHarris",
	"StdForm");
create_item ("SpectrumAnalyzerResBW","Spectrum analyzer with resolution bandwidth setting",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SpectrumAnalyzerResBW",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SpectrumAnalyzerResBW",
	SPDesignAnnotFmt,
	"SYM_SpectrumAnalyzerResBW",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_nSpectrumAnalyzerResBW_fPlotSet",
		UNITLESS_UNIT,
		prm("_nSpectrumAnalyzerResBW_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")),
	create_parm ("Window","Window with default constant applied to collected data (default constant is used when WindowConstant is 0.0)",
		PARM_INT,
		"_nSpectrumAnalyzerResBW_fWindowSet",
		UNITLESS_UNIT,
		prm("_nSpectrumAnalyzerResBW_fnone","none")),
	create_parm ("ResBW","Resolution bandwidth",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","30 kHz")),
	create_parm ("NumSegments","Number of segments",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SegmentTime","Segment time",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1.0 msec")));
library_group("Sinks","Sinks","SpectrumAnalyzerResBW");
palette_group("Sinks","Sinks","SpectrumAnalyzerResBW");

create_constant_form ("_n_x5fSpectrumAnalyzer_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_n_x5fSpectrumAnalyzer_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_n_x5fSpectrumAnalyzer_fPlotSet",
	"_n_x5fSpectrumAnalyzer_fNone",
	"_n_x5fSpectrumAnalyzer_fRectangular",
	"StdForm");
create_constant_form ("_n_x5fSpectrumAnalyzer_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_n_x5fSpectrumAnalyzer_fHamming_x5f0_x5f54", 
	"Hamming 0.54",
	0,
	"1",
	"Hamming 0.54");
create_constant_form ("_n_x5fSpectrumAnalyzer_fHanning_x5f0_x5f50", 
	"Hanning 0.50",
	0,
	"2",
	"Hanning 0.50");
create_constant_form ("_n_x5fSpectrumAnalyzer_fGaussian_x5f0_x5f75", 
	"Gaussian 0.75",
	0,
	"3",
	"Gaussian 0.75");
create_constant_form ("_n_x5fSpectrumAnalyzer_fKaiser_x5f7_x5f865", 
	"Kaiser 7.865",
	0,
	"4",
	"Kaiser 7.865");
create_constant_form ("_n_x5fSpectrumAnalyzer_f_x5f8510_x5f6_x5f0", 
	"_8510 6.0",
	0,
	"5",
	"8510 6.0");
create_constant_form ("_n_x5fSpectrumAnalyzer_fBlackman", 
	"Blackman",
	0,
	"6",
	"Blackman");
create_constant_form ("_n_x5fSpectrumAnalyzer_fBlackman_x5fHarris", 
	"Blackman-Harris",
	0,
	"7",
	"Blackman-Harris");
create_form_set("_n_x5fSpectrumAnalyzer_fWindowSet",
	"_n_x5fSpectrumAnalyzer_fnone",
	"_n_x5fSpectrumAnalyzer_fHamming_x5f0_x5f54",
	"_n_x5fSpectrumAnalyzer_fHanning_x5f0_x5f50",
	"_n_x5fSpectrumAnalyzer_fGaussian_x5f0_x5f75",
	"_n_x5fSpectrumAnalyzer_fKaiser_x5f7_x5f865",
	"_n_x5fSpectrumAnalyzer_f_x5f8510_x5f6_x5f0",
	"_n_x5fSpectrumAnalyzer_fBlackman",
	"_n_x5fSpectrumAnalyzer_fBlackman_x5fHarris",
	"StdForm");
create_constant_form ("_n_x5fSpectrumAnalyzer_fno_x5fbias", 
	"no bias",
	0,
	"0",
	"no bias");
create_constant_form ("_n_x5fSpectrumAnalyzer_fpower", 
	"power",
	0,
	"1",
	"power");
create_form_set("_n_x5fSpectrumAnalyzer_fBiasSet",
	"_n_x5fSpectrumAnalyzer_fno_x5fbias",
	"_n_x5fSpectrumAnalyzer_fpower",
	"StdForm");
create_item ("_SpectrumAnalyzer","Spectrum analyzer",
	"S",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_SpectrumAnalyzer",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fSpectrumAnalyzer_ltsdfsinks",
	SPComponentAnnotFmt,
	"SYM_SpectrumAnalyzer",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_n_x5fSpectrumAnalyzer_fPlotSet",
		UNITLESS_UNIT,
		prm("_n_x5fSpectrumAnalyzer_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")),
	create_parm ("Window","Window with default constant applied to collected data (default constant is used when WindowConstant is 0.0)",
		PARM_INT,
		"_n_x5fSpectrumAnalyzer_fWindowSet",
		UNITLESS_UNIT,
		prm("_n_x5fSpectrumAnalyzer_fnone","none")),
	create_parm ("WindowConstant","Window constant used for windows of type Hamming, Hanning, Gaussian, Kaiser, 8510",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Bias","Spectrum normalization bias type to correct for effects of windowing and/or averaging",
		PARM_INT | PARM_NO_DISPLAY,
		"_n_x5fSpectrumAnalyzer_fBiasSet",
		UNITLESS_UNIT,
		prm("_n_x5fSpectrumAnalyzer_fpower","power")),
	create_parm ("FStart","Start frequency for spectrum calculation",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("FStop","Stop frequency for spectrum calculation",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100e9")),
	create_parm ("NumFreqs","Number of frequencies uniformly spaced from FStart to FSTop; NumFreqs=0 results in default frequency resolution",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NPoints","Number of points to be used in a segment; NPoints=0 results in one segment of (Stop-Start)/TStep+1 points and Overlap is ignored",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Overlap","Number of overlapping points between two adjacent segments",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Sinks","Sinks","_SpectrumAnalyzer");
palette_group("Sinks","Sinks","_SpectrumAnalyzer");

create_constant_form ("_nSpectrumAnalyzer_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nSpectrumAnalyzer_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_nSpectrumAnalyzer_fPlotSet",
	"_nSpectrumAnalyzer_fNone",
	"_nSpectrumAnalyzer_fRectangular",
	"StdForm");
create_constant_form ("_nSpectrumAnalyzer_fnone", 
	"none",
	0,
	"0",
	"none");
create_constant_form ("_nSpectrumAnalyzer_fHamming_x5f0_x5f54", 
	"Hamming 0.54",
	0,
	"1",
	"Hamming 0.54");
create_constant_form ("_nSpectrumAnalyzer_fHanning_x5f0_x5f50", 
	"Hanning 0.50",
	0,
	"2",
	"Hanning 0.50");
create_constant_form ("_nSpectrumAnalyzer_fGaussian_x5f0_x5f75", 
	"Gaussian 0.75",
	0,
	"3",
	"Gaussian 0.75");
create_constant_form ("_nSpectrumAnalyzer_fKaiser_x5f7_x5f865", 
	"Kaiser 7.865",
	0,
	"4",
	"Kaiser 7.865");
create_constant_form ("_nSpectrumAnalyzer_f_x5f8510_x5f6_x5f0", 
	"_8510 6.0",
	0,
	"5",
	"8510 6.0");
create_constant_form ("_nSpectrumAnalyzer_fBlackman", 
	"Blackman",
	0,
	"6",
	"Blackman");
create_constant_form ("_nSpectrumAnalyzer_fBlackman_x5fHarris", 
	"Blackman-Harris",
	0,
	"7",
	"Blackman-Harris");
create_form_set("_nSpectrumAnalyzer_fWindowSet",
	"_nSpectrumAnalyzer_fnone",
	"_nSpectrumAnalyzer_fHamming_x5f0_x5f54",
	"_nSpectrumAnalyzer_fHanning_x5f0_x5f50",
	"_nSpectrumAnalyzer_fGaussian_x5f0_x5f75",
	"_nSpectrumAnalyzer_fKaiser_x5f7_x5f865",
	"_nSpectrumAnalyzer_f_x5f8510_x5f6_x5f0",
	"_nSpectrumAnalyzer_fBlackman",
	"_nSpectrumAnalyzer_fBlackman_x5fHarris",
	"StdForm");
create_constant_form ("_nSpectrumAnalyzer_fno_x5fbias", 
	"no bias",
	0,
	"0",
	"no bias");
create_constant_form ("_nSpectrumAnalyzer_fpower", 
	"power",
	0,
	"1",
	"power");
create_form_set("_nSpectrumAnalyzer_fBiasSet",
	"_nSpectrumAnalyzer_fno_x5fbias",
	"_nSpectrumAnalyzer_fpower",
	"StdForm");
create_item ("SpectrumAnalyzer","Spectrum analyzer",
	"S",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_SpectrumAnalyzer",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"SpectrumAnalyzer",
	SPDesignAnnotFmt,
	"SYM_SpectrumAnalyzer",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_nSpectrumAnalyzer_fPlotSet",
		UNITLESS_UNIT,
		prm("_nSpectrumAnalyzer_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")),
	create_parm ("Window","Window with default constant applied to collected data (default constant is used when WindowConstant is 0.0)",
		PARM_INT,
		"_nSpectrumAnalyzer_fWindowSet",
		UNITLESS_UNIT,
		prm("_nSpectrumAnalyzer_fnone","none")),
	create_parm ("WindowConstant","Window constant used for windows of type Hamming, Hanning, Gaussian, Kaiser, 8510",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Bias","Spectrum normalization bias type to correct for effects of windowing and/or averaging",
		PARM_INT | PARM_NO_DISPLAY,
		"_nSpectrumAnalyzer_fBiasSet",
		UNITLESS_UNIT,
		prm("_nSpectrumAnalyzer_fpower","power")),
	create_parm ("FStart","Start frequency for spectrum calculation",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","0.0")),
	create_parm ("FStop","Stop frequency for spectrum calculation",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","100e9")),
	create_parm ("NumFreqs","Number of frequencies uniformly spaced from FStart to FSTop; NumFreqs=0 results in default frequency resolution",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("NPoints","Number of points to be used in a segment; NPoints=0 results in one segment of (Stop-Start)/TStep+1 points and Overlap is ignored",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Overlap","Number of overlapping points between two adjacent segments",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")));
library_group("Sinks","Sinks","SpectrumAnalyzer");
palette_group("Sinks","Sinks","SpectrumAnalyzer");

create_constant_form ("_n_x5fEVM_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_n_x5fEVM_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_n_x5fEVM_fPlotSet",
	"_n_x5fEVM_fNone",
	"_n_x5fEVM_fRectangular",
	"StdForm");
create_constant_form ("_n_x5fEVM_fEVM_x5fRMS", 
	"EVM RMS",
	0,
	"0",
	"EVM RMS");
create_constant_form ("_n_x5fEVM_fEVM_x5fPeak", 
	"EVM Peak",
	0,
	"1",
	"EVM Peak");
create_constant_form ("_n_x5fEVM_fC0", 
	"C0",
	0,
	"2",
	"C0");
create_constant_form ("_n_x5fEVM_fFrequency_x5ferror", 
	"Frequency error",
	0,
	"3",
	"Frequency error");
create_constant_form ("_n_x5fEVM_fDroop", 
	"Droop",
	0,
	"4",
	"Droop");
create_constant_form ("_n_x5fEVM_fError_x5fsequence", 
	"Error sequence",
	0,
	"5",
	"Error sequence");
create_constant_form ("_n_x5fEVM_fMagnitude_x5ferror_x5fsequence", 
	"Magnitude error sequence",
	0,
	"6",
	"Magnitude error sequence");
create_constant_form ("_n_x5fEVM_fPhase_x5ferror_x5fsequence", 
	"Phase error sequence",
	0,
	"7",
	"Phase error sequence");
create_constant_form ("_n_x5fEVM_fSampled_x5fdata", 
	"Sampled data",
	0,
	"8",
	"Sampled data");
create_form_set("_n_x5fEVM_fMeasTypeSet",
	"_n_x5fEVM_fEVM_x5fRMS",
	"_n_x5fEVM_fEVM_x5fPeak",
	"_n_x5fEVM_fC0",
	"_n_x5fEVM_fFrequency_x5ferror",
	"_n_x5fEVM_fDroop",
	"_n_x5fEVM_fError_x5fsequence",
	"_n_x5fEVM_fMagnitude_x5ferror_x5fsequence",
	"_n_x5fEVM_fPhase_x5ferror_x5fsequence",
	"_n_x5fEVM_fSampled_x5fdata",
	"StdForm");
create_constant_form ("_n_x5fEVM_fBPSK", 
	"BPSK",
	0,
	"0",
	"BPSK");
create_constant_form ("_n_x5fEVM_fQPSK", 
	"QPSK",
	0,
	"1",
	"QPSK");
create_constant_form ("_n_x5fEVM_fHPSK", 
	"HPSK",
	0,
	"2",
	"HPSK");
create_constant_form ("_n_x5fEVM_fPI_x5f4_x5fDQPSK", 
	"PI/4 DQPSK",
	0,
	"3",
	"PI/4-DQPSK");
create_constant_form ("_n_x5fEVM_fPSK8", 
	"PSK8",
	0,
	"4",
	"8-PSK");
create_constant_form ("_n_x5fEVM_fPSK16", 
	"PSK16",
	0,
	"5",
	"16-PSK");
create_constant_form ("_n_x5fEVM_fQAM4", 
	"QAM4",
	0,
	"6",
	"4-QAM");
create_constant_form ("_n_x5fEVM_fQAM16", 
	"QAM16",
	0,
	"7",
	"16-QAM");
create_constant_form ("_n_x5fEVM_fQAM32", 
	"QAM32",
	0,
	"8",
	"32-QAM");
create_constant_form ("_n_x5fEVM_fQAM64", 
	"QAM64",
	0,
	"9",
	"64-QAM");
create_constant_form ("_n_x5fEVM_fQAM128", 
	"QAM128",
	0,
	"10",
	"128-QAM");
create_constant_form ("_n_x5fEVM_fQAM256", 
	"QAM256",
	0,
	"11",
	"256-QAM");
create_constant_form ("_n_x5fEVM_fPAM4", 
	"PAM4",
	0,
	"12",
	"4-PAM");
create_constant_form ("_n_x5fEVM_fPAM8", 
	"PAM8",
	0,
	"13",
	"8-PAM");
create_constant_form ("_n_x5fEVM_fUser_x5fdefined", 
	"User defined",
	0,
	"14",
	"User defined");
create_form_set("_n_x5fEVM_fModTypeSet",
	"_n_x5fEVM_fBPSK",
	"_n_x5fEVM_fQPSK",
	"_n_x5fEVM_fHPSK",
	"_n_x5fEVM_fPI_x5f4_x5fDQPSK",
	"_n_x5fEVM_fPSK8",
	"_n_x5fEVM_fPSK16",
	"_n_x5fEVM_fQAM4",
	"_n_x5fEVM_fQAM16",
	"_n_x5fEVM_fQAM32",
	"_n_x5fEVM_fQAM64",
	"_n_x5fEVM_fQAM128",
	"_n_x5fEVM_fQAM256",
	"_n_x5fEVM_fPAM4",
	"_n_x5fEVM_fPAM8",
	"_n_x5fEVM_fUser_x5fdefined",
	"StdForm");
create_constant_form ("_n_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fEVM_fOptimizeSamplingInstantSet",
	"_n_x5fEVM_fNO",
	"_n_x5fEVM_fYES",
	"StdForm");
create_item ("_EVM","Error Vector Magnitude Measurement",
	"E",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_EVM",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fEVM_ltsdfsinks",
	SPComponentAnnotFmt,
	"SYM_EVM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_n_x5fEVM_fPlotSet",
		UNITLESS_UNIT,
		prm("_n_x5fEVM_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("SymTime","symbol duration time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1e-3")),
	create_parm ("SymBurstLen","burst length in number of symbols",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("MeasType","options for measurement type",
		PARM_INT,
		"_n_x5fEVM_fMeasTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fEVM_fEVM_x5fRMS","EVM_RMS")),
	create_parm ("ModType","options for modulation type of input signal",
		PARM_INT,
		"_n_x5fEVM_fModTypeSet",
		UNITLESS_UNIT,
		prm("_n_x5fEVM_fQPSK","QPSK")),
	create_parm ("Constellation","used if ModType='User defined' to define constellation as an array of complex values (re, im)",
		PARM_COMPLEXARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"(1,1) (1,-1) (-1,-1) (-1,1)\"")),
	create_parm ("OptimizeSamplingInstant","if YES, optimal sampling instant will be automatically found",
		PARM_INT,
		"_n_x5fEVM_fOptimizeSamplingInstantSet",
		UNITLESS_UNIT,
		prm("_n_x5fEVM_fYES","YES")));
library_group("Sinks","Sinks","_EVM");
palette_group("Sinks","Sinks","_EVM");

create_constant_form ("_nEVM_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nEVM_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_nEVM_fPlotSet",
	"_nEVM_fNone",
	"_nEVM_fRectangular",
	"StdForm");
create_constant_form ("_nEVM_fEVM_x5fRMS", 
	"EVM RMS",
	0,
	"0",
	"EVM RMS");
create_constant_form ("_nEVM_fEVM_x5fPeak", 
	"EVM Peak",
	0,
	"1",
	"EVM Peak");
create_constant_form ("_nEVM_fC0", 
	"C0",
	0,
	"2",
	"C0");
create_constant_form ("_nEVM_fFrequency_x5ferror", 
	"Frequency error",
	0,
	"3",
	"Frequency error");
create_constant_form ("_nEVM_fDroop", 
	"Droop",
	0,
	"4",
	"Droop");
create_constant_form ("_nEVM_fError_x5fsequence", 
	"Error sequence",
	0,
	"5",
	"Error sequence");
create_constant_form ("_nEVM_fMagnitude_x5ferror_x5fsequence", 
	"Magnitude error sequence",
	0,
	"6",
	"Magnitude error sequence");
create_constant_form ("_nEVM_fPhase_x5ferror_x5fsequence", 
	"Phase error sequence",
	0,
	"7",
	"Phase error sequence");
create_constant_form ("_nEVM_fSampled_x5fdata", 
	"Sampled data",
	0,
	"8",
	"Sampled data");
create_form_set("_nEVM_fMeasTypeSet",
	"_nEVM_fEVM_x5fRMS",
	"_nEVM_fEVM_x5fPeak",
	"_nEVM_fC0",
	"_nEVM_fFrequency_x5ferror",
	"_nEVM_fDroop",
	"_nEVM_fError_x5fsequence",
	"_nEVM_fMagnitude_x5ferror_x5fsequence",
	"_nEVM_fPhase_x5ferror_x5fsequence",
	"_nEVM_fSampled_x5fdata",
	"StdForm");
create_constant_form ("_nEVM_fBPSK", 
	"BPSK",
	0,
	"0",
	"BPSK");
create_constant_form ("_nEVM_fQPSK", 
	"QPSK",
	0,
	"1",
	"QPSK");
create_constant_form ("_nEVM_fHPSK", 
	"HPSK",
	0,
	"2",
	"HPSK");
create_constant_form ("_nEVM_fPI_x5f4_x5fDQPSK", 
	"PI/4 DQPSK",
	0,
	"3",
	"PI/4-DQPSK");
create_constant_form ("_nEVM_fPSK8", 
	"PSK8",
	0,
	"4",
	"8-PSK");
create_constant_form ("_nEVM_fPSK16", 
	"PSK16",
	0,
	"5",
	"16-PSK");
create_constant_form ("_nEVM_fQAM4", 
	"QAM4",
	0,
	"6",
	"4-QAM");
create_constant_form ("_nEVM_fQAM16", 
	"QAM16",
	0,
	"7",
	"16-QAM");
create_constant_form ("_nEVM_fQAM32", 
	"QAM32",
	0,
	"8",
	"32-QAM");
create_constant_form ("_nEVM_fQAM64", 
	"QAM64",
	0,
	"9",
	"64-QAM");
create_constant_form ("_nEVM_fQAM128", 
	"QAM128",
	0,
	"10",
	"128-QAM");
create_constant_form ("_nEVM_fQAM256", 
	"QAM256",
	0,
	"11",
	"256-QAM");
create_constant_form ("_nEVM_fPAM4", 
	"PAM4",
	0,
	"12",
	"4-PAM");
create_constant_form ("_nEVM_fPAM8", 
	"PAM8",
	0,
	"13",
	"8-PAM");
create_constant_form ("_nEVM_fUser_x5fdefined", 
	"User defined",
	0,
	"14",
	"User defined");
create_form_set("_nEVM_fModTypeSet",
	"_nEVM_fBPSK",
	"_nEVM_fQPSK",
	"_nEVM_fHPSK",
	"_nEVM_fPI_x5f4_x5fDQPSK",
	"_nEVM_fPSK8",
	"_nEVM_fPSK16",
	"_nEVM_fQAM4",
	"_nEVM_fQAM16",
	"_nEVM_fQAM32",
	"_nEVM_fQAM64",
	"_nEVM_fQAM128",
	"_nEVM_fQAM256",
	"_nEVM_fPAM4",
	"_nEVM_fPAM8",
	"_nEVM_fUser_x5fdefined",
	"StdForm");
create_constant_form ("_nEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nEVM_fOptimizeSamplingInstantSet",
	"_nEVM_fNO",
	"_nEVM_fYES",
	"StdForm");
create_item ("EVM","Error Vector Magnitude Measurement",
	"E",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_EVM",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"EVM",
	SPDesignAnnotFmt,
	"SYM_EVM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_nEVM_fPlotSet",
		UNITLESS_UNIT,
		prm("_nEVM_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("SymTime","symbol duration time",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","1e-3")),
	create_parm ("SymBurstLen","burst length in number of symbols",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("MeasType","options for measurement type",
		PARM_INT,
		"_nEVM_fMeasTypeSet",
		UNITLESS_UNIT,
		prm("_nEVM_fEVM_x5fRMS","EVM_RMS")),
	create_parm ("ModType","options for modulation type of input signal",
		PARM_INT,
		"_nEVM_fModTypeSet",
		UNITLESS_UNIT,
		prm("_nEVM_fQPSK","QPSK")),
	create_parm ("Constellation","used if ModType='User defined' to define constellation as an array of complex values (re, im)",
		PARM_COMPLEXARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"(1,1) (1,-1) (-1,-1) (-1,1)\"")),
	create_parm ("OptimizeSamplingInstant","if YES, optimal sampling instant will be automatically found",
		PARM_INT,
		"_nEVM_fOptimizeSamplingInstantSet",
		UNITLESS_UNIT,
		prm("_nEVM_fYES","YES")));
library_group("Sinks","Sinks","EVM");
palette_group("Sinks","Sinks","EVM");

create_constant_form ("_n_x5fTimedSink_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_n_x5fTimedSink_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_n_x5fTimedSink_fPlotSet",
	"_n_x5fTimedSink_fNone",
	"_n_x5fTimedSink_fRectangular",
	"StdForm");
create_constant_form ("_n_x5fTimedSink_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_n_x5fTimedSink_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_n_x5fTimedSink_fControlSimulationSet",
	"_n_x5fTimedSink_fNO",
	"_n_x5fTimedSink_fYES",
	"StdForm");
create_item ("_TimedSink","Timed Data Collector",
	"T",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_TimedSink",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dTSDF_n_x5fTimedSink_ltsdfsinks",
	SPComponentAnnotFmt,
	"SYM_TimedSink",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_n_x5fTimedSink_fPlotSet",
		UNITLESS_UNIT,
		prm("_n_x5fTimedSink_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")),
	create_parm ("ControlSimulation","if set to YES, 'Stop' time determines how long the simulation will run",
		PARM_INT,
		"_n_x5fTimedSink_fControlSimulationSet",
		UNITLESS_UNIT,
		prm("_n_x5fTimedSink_fYES","YES")));
library_group("Sinks","Sinks","_TimedSink");
palette_group("Sinks","Sinks","_TimedSink");

create_constant_form ("_nTimedSink_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nTimedSink_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_nTimedSink_fPlotSet",
	"_nTimedSink_fNone",
	"_nTimedSink_fRectangular",
	"StdForm");
create_constant_form ("_nTimedSink_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nTimedSink_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nTimedSink_fControlSimulationSet",
	"_nTimedSink_fNO",
	"_nTimedSink_fYES",
	"StdForm");
create_item ("TimedSink","Timed Data Collector",
	"T",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_TimedSink",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"TimedSink",
	SPDesignAnnotFmt,
	"SYM_TimedSink",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_nTimedSink_fPlotSet",
		UNITLESS_UNIT,
		prm("_nTimedSink_fNone","None")),
	create_parm ("RLoad","Load resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("RTemp","Resistor physical temperature, in degrees C",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("Start","Start time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStart")),
	create_parm ("Stop","Stop time for data recording",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","DefaultTimeStop")),
	create_parm ("ControlSimulation","if set to YES, 'Stop' time determines how long the simulation will run",
		PARM_INT,
		"_nTimedSink_fControlSimulationSet",
		UNITLESS_UNIT,
		prm("_nTimedSink_fYES","YES")));
library_group("Sinks","Sinks","TimedSink");
palette_group("Sinks","Sinks","TimedSink");

create_constant_form ("_nBER_x5fFER_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nBER_x5fFER_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_nBER_x5fFER_fPlotSet",
	"_nBER_x5fFER_fNone",
	"_nBER_x5fFER_fRectangular",
	"StdForm");
create_constant_form ("_nBER_x5fFER_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nBER_x5fFER_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nBER_x5fFER_fControlSimulationSet",
	"_nBER_x5fFER_fNO",
	"_nBER_x5fFER_fYES",
	"StdForm");
create_constant_form ("_nBER_x5fFER_fBER_x5fvs_x5findex", 
	"BER vs index",
	0,
	"0",
	"BER vs index");
create_constant_form ("_nBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f10_x5fbits", 
	"BER vs index every 10 bits",
	0,
	"1",
	"BER vs index every 10 bits");
create_constant_form ("_nBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f100_x5fbits", 
	"BER vs index every 100 bits",
	0,
	"2",
	"BER vs index every 100 bits");
create_constant_form ("_nBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f1000_x5fbits", 
	"BER vs index every 1000 bits",
	0,
	"3",
	"BER vs index every 1000 bits");
create_constant_form ("_nBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5fBitsPerFrame_x5fbits", 
	"BER vs index every BitsPerFrame bits",
	0,
	"4",
	"BER vs index every BitsPerFrame bits");
create_constant_form ("_nBER_x5fFER_fFinal_x5fBER", 
	"Final BER",
	0,
	"5",
	"Final BER");
create_form_set("_nBER_x5fFER_fOutputBERSet",
	"_nBER_x5fFER_fBER_x5fvs_x5findex",
	"_nBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f10_x5fbits",
	"_nBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f100_x5fbits",
	"_nBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5f1000_x5fbits",
	"_nBER_x5fFER_fBER_x5fvs_x5findex_x5fevery_x5fBitsPerFrame_x5fbits",
	"_nBER_x5fFER_fFinal_x5fBER",
	"StdForm");
create_constant_form ("_nBER_x5fFER_fFER_x5fvs_x5fframe", 
	"FER vs frame",
	0,
	"0",
	"FER vs frame");
create_constant_form ("_nBER_x5fFER_fFER_x5fvs_x5fframe_x5fevery_x5f10_x5fframes", 
	"FER vs frame every 10 frames",
	0,
	"1",
	"FER vs frame every 10 frames");
create_constant_form ("_nBER_x5fFER_fFinal_x5fFER", 
	"Final FER",
	0,
	"2",
	"Final FER");
create_constant_form ("_nBER_x5fFER_fNo_x5fFER", 
	"No FER",
	0,
	"3",
	"No FER");
create_form_set("_nBER_x5fFER_fOutputFERSet",
	"_nBER_x5fFER_fFER_x5fvs_x5fframe",
	"_nBER_x5fFER_fFER_x5fvs_x5fframe_x5fevery_x5f10_x5fframes",
	"_nBER_x5fFER_fFinal_x5fFER",
	"_nBER_x5fFER_fNo_x5fFER",
	"StdForm");
create_item ("BER_FER","Bit Error Rate and Frame Error Rate estimation",
	"B",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_BER_FER",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nBER_x5fFER_ltsdfsinks",
	SPComponentAnnotFmt,
	"SYM_BER_FER",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","Plot data when set to 'Rectangular' and Simulation Setup set to 'Open Data Display when simulation completes'",
		PARM_INT,
		"_nBER_x5fFER_fPlotSet",
		UNITLESS_UNIT,
		prm("_nBER_x5fFER_fNone","None")),
	create_parm ("Start","Data collection start index",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","DefaultNumericStart")),
	create_parm ("Stop","Data collection stop index when EstRelVariance is not met",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","DefaultNumericStop")),
	create_parm ("ControlSimulation","Let sink control how long the simulation will run?",
		PARM_INT,
		"_nBER_x5fFER_fControlSimulationSet",
		UNITLESS_UNIT,
		prm("_nBER_x5fFER_fYES","YES")),
	create_parm ("BitsPerFrame","Bits per frame",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("EstRelVariance","BER estimation relative variance",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.01")),
	create_parm ("OutputBER","BER output",
		PARM_INT,
		"_nBER_x5fFER_fOutputBERSet",
		UNITLESS_UNIT,
		prm("_nBER_x5fFER_fFinal_x5fBER","Final_BER")),
	create_parm ("OutputFER","FER output",
		PARM_INT,
		"_nBER_x5fFER_fOutputFERSet",
		UNITLESS_UNIT,
		prm("_nBER_x5fFER_fFinal_x5fFER","Final_FER")),
	create_parm ("StatusUpdatePeriod","Status update period in number of bits",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1000")));
library_group("Sinks","Sinks","BER_FER");
palette_group("Sinks","Sinks","BER_FER");

create_constant_form ("_nNumericSink_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nNumericSink_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_nNumericSink_fPlotSet",
	"_nNumericSink_fNone",
	"_nNumericSink_fRectangular",
	"StdForm");
create_constant_form ("_nNumericSink_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nNumericSink_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nNumericSink_fControlSimulationSet",
	"_nNumericSink_fNO",
	"_nNumericSink_fYES",
	"StdForm");
create_item ("NumericSink","Numeric Data Sink",
	"N",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_NumericSink",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nNumericSink_ltsdfsinks",
	SPComponentAnnotFmt,
	"SYM_NumericSink",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_nNumericSink_fPlotSet",
		UNITLESS_UNIT,
		prm("_nNumericSink_fNone","None")),
	create_parm ("Start","Sample number to start collecting data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","DefaultNumericStart")),
	create_parm ("Stop","Sample number to stop collecting data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","DefaultNumericStop")),
	create_parm ("ControlSimulation","If set to YES, 'Stop' sample number determines how long the simulation will run",
		PARM_INT,
		"_nNumericSink_fControlSimulationSet",
		UNITLESS_UNIT,
		prm("_nNumericSink_fYES","YES")));
library_group("Sinks","Sinks","NumericSink");
palette_group("Sinks","Sinks","NumericSink");

create_constant_form ("_nNumericSinkGated_fNone", 
	"None",
	0,
	"0",
	"None");
create_constant_form ("_nNumericSinkGated_fRectangular", 
	"Rectangular",
	0,
	"1",
	"Rectangular");
create_form_set("_nNumericSinkGated_fPlotSet",
	"_nNumericSinkGated_fNone",
	"_nNumericSinkGated_fRectangular",
	"StdForm");
create_constant_form ("_nNumericSinkGated_fNO", 
	"NO",
	0,
	"0",
	"NO");
create_constant_form ("_nNumericSinkGated_fYES", 
	"YES",
	0,
	"1",
	"YES");
create_form_set("_nNumericSinkGated_fControlSimulationSet",
	"_nNumericSinkGated_fNO",
	"_nNumericSinkGated_fYES",
	"StdForm");
create_item ("NumericSinkGated","Numeric Data Sink with Control Input",
	"N",
	ITEM_NOT_ALL_PARM,
	-1,
	"BMP_NumericSinkGated",
	standard_dialog,
	NULL,
	SPComponentNetlistFmt,
	"_vKeysightEEsof_dSDF_nNumericSinkGated_ltsdfsinks",
	SPComponentAnnotFmt,
	"SYM_NumericSinkGated",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("Plot","If simulation is setup to open data display after simulation and if Plot is not set to 'None', then plot the data for this sink",
		PARM_INT,
		"_nNumericSinkGated_fPlotSet",
		UNITLESS_UNIT,
		prm("_nNumericSinkGated_fNone","None")),
	create_parm ("Start","Sample number to start collecting data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","DefaultNumericStart")),
	create_parm ("Stop","Sample number to stop collecting data",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","DefaultNumericStop")),
	create_parm ("ControlSimulation","If set to YES, 'Stop' sample number determines how long the simulation will run",
		PARM_INT,
		"_nNumericSinkGated_fControlSimulationSet",
		UNITLESS_UNIT,
		prm("_nNumericSinkGated_fYES","YES")));
library_group("Sinks","Sinks","NumericSinkGated");
palette_group("Sinks","Sinks","NumericSinkGated");

library_group("Common Components","Common Components","NumericSink");
