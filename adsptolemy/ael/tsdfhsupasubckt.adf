set_design_type( sigproc_net );

create_constant_form ("_nHSPA_x5fChannel_fBand_x5fI_x5fII_x5fIII_x5fIV", 
	"Band I II III IV",
	0,
	"0",
	"Band I II III IV");

create_constant_form ("_nHSPA_x5fChannel_fBand_x5fV_x5fVI", 
	"Band V VI",
	0,
	"1",
	"Band V VI");

create_form_set("_nHSPA_x5fChannel_fFreqBandSet",
	"_nHSPA_x5fChannel_fBand_x5fI_x5fII_x5fIII_x5fIV",
	"_nHSPA_x5fChannel_fBand_x5fV_x5fVI",
	"StdForm");

create_constant_form ("_nHSPA_x5fChannel_fPA3", 
	"PA3",
	0,
	"0",
	"PA3");

create_constant_form ("_nHSPA_x5fChannel_fPB3", 
	"PB3",
	0,
	"1",
	"PB3");

create_constant_form ("_nHSPA_x5fChannel_fVA30", 
	"VA30",
	0,
	"2",
	"VA30");

create_constant_form ("_nHSPA_x5fChannel_fVA120", 
	"VA120",
	0,
	"3",
	"VA120");

create_constant_form ("_nHSPA_x5fChannel_fCase_x5f8_x5ffor_x5fHSDPA_x5fCQI_x5fTest", 
	"Case 8 for HSDPA CQI Test",
	0,
	"4",
	"Case 8 for HSDPA CQI Test");

create_form_set("_nHSPA_x5fChannel_fChProfileSet",
	"_nHSPA_x5fChannel_fPA3",
	"_nHSPA_x5fChannel_fPB3",
	"_nHSPA_x5fChannel_fVA30",
	"_nHSPA_x5fChannel_fVA120",
	"_nHSPA_x5fChannel_fCase_x5f8_x5ffor_x5fHSDPA_x5fCQI_x5fTest",
	"StdForm");

create_constant_form ("_nHSPA_x5fChannel_fFollow_x5fChProfile", 
	"Follow ChProfile",
	0,
	"0",
	"Follow ChProfile");

create_constant_form ("_nHSPA_x5fChannel_fUser_x5fdefined", 
	"User defined",
	0,
	"1",
	"User defined");

create_form_set("_nHSPA_x5fChannel_fVelocitySettingSet",
	"_nHSPA_x5fChannel_fFollow_x5fChProfile",
	"_nHSPA_x5fChannel_fUser_x5fdefined",
	"StdForm");

create_constant_form ("_nHSPA_x5fChannel_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSPA_x5fChannel_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSPA_x5fChannel_fPathLossSet",
	"_nHSPA_x5fChannel_fNO",
	"_nHSPA_x5fChannel_fYES",
	"StdForm");

create_item ("HSPA_Channel","HSPA fading channel model",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSPA_Channel",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSPA_Channel",
	SPDesignAnnotFmt,
	"SYM_DSN_HSPA_Channel",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RIn","Input resistance",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRIn")),
	create_parm ("ROut","Output resistance",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("FreqBand","Frequency band",
		PARM_INT,
		"_nHSPA_x5fChannel_fFreqBandSet",
		UNITLESS_UNIT,
		prm("_nHSPA_x5fChannel_fBand_x5fI_x5fII_x5fIII_x5fIV","Band_I_II_III_IV")),
	create_parm ("ChProfile","Channel profile",
		PARM_INT,
		"_nHSPA_x5fChannel_fChProfileSet",
		UNITLESS_UNIT,
		prm("_nHSPA_x5fChannel_fVA30","VA30")),
	create_parm ("VelocitySetting","Velocity setting",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSPA_x5fChannel_fVelocitySettingSet",
		UNITLESS_UNIT,
		prm("_nHSPA_x5fChannel_fFollow_x5fChProfile","Follow_ChProfile")),
	create_parm ("Velocity","Mobile velocity in km/hour",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","30")),
	create_parm ("PathLoss","Option for inclusion of large-scale pathloss",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSPA_x5fChannel_fPathLossSet",
		UNITLESS_UNIT,
		prm("_nHSPA_x5fChannel_fNO","NO")),
	create_parm ("PropDistance","Propagation distance",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DISTANCE_UNIT,
		prm("StdForm","2000")));


create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fDownlink", 
	"Downlink",
	0,
	"0",
	"DL");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fUplink", 
	"Uplink",
	0,
	"1",
	"UL");

create_form_set("_nHSUPA_x5fRF_x5fEVM_fLinkDirSet",
	"_nHSUPA_x5fRF_x5fEVM_fDownlink",
	"_nHSUPA_x5fRF_x5fEVM_fUplink",
	"StdForm");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fLONG", 
	"LONG",
	0,
	"0",
	"Long");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fSHORT", 
	"SHORT",
	0,
	"1",
	"Short");

create_form_set("_nHSUPA_x5fRF_x5fEVM_fULScrambleTypeSet",
	"_nHSUPA_x5fRF_x5fEVM_fLONG",
	"_nHSUPA_x5fRF_x5fEVM_fSHORT",
	"StdForm");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fNormal", 
	"Normal",
	0,
	"0",
	"Normal");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fRightAlternate", 
	"RightAlternate",
	0,
	"1",
	"Right Alternate");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fLeftAlternate", 
	"LeftAlternate",
	0,
	"2",
	"Left Alternate");

create_form_set("_nHSUPA_x5fRF_x5fEVM_fDLScrambleTypeSet",
	"_nHSUPA_x5fRF_x5fEVM_fNormal",
	"_nHSUPA_x5fRF_x5fEVM_fRightAlternate",
	"_nHSUPA_x5fRF_x5fEVM_fLeftAlternate",
	"StdForm");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fON", 
	"ON",
	0,
	"1",
	"ON");

create_form_set("_nHSUPA_x5fRF_x5fEVM_fSCHSet",
	"_nHSUPA_x5fRF_x5fEVM_fOFF",
	"_nHSUPA_x5fRF_x5fEVM_fON",
	"StdForm");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fON", 
	"ON",
	0,
	"1",
	"ON");

create_form_set("_nHSUPA_x5fRF_x5fEVM_fCPICHSet",
	"_nHSUPA_x5fRF_x5fEVM_fOFF",
	"_nHSUPA_x5fRF_x5fEVM_fON",
	"StdForm");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fEVM_x5fRatio", 
	"EVM_Ratio",
	0,
	"0",
	"EVM as ratio");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fEVM_x5fPercent", 
	"EVM_Percent",
	0,
	"1",
	"EVM as percent");

create_form_set("_nHSUPA_x5fRF_x5fEVM_fEVMValueSet",
	"_nHSUPA_x5fRF_x5fEVM_fEVM_x5fRatio",
	"_nHSUPA_x5fRF_x5fEVM_fEVM_x5fPercent",
	"StdForm");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fRF_x5fEVM_fCorrect_x5fIQ_x5fOffsetSet",
	"_nHSUPA_x5fRF_x5fEVM_fNO",
	"_nHSUPA_x5fRF_x5fEVM_fYES",
	"StdForm");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fRF_x5fEVM_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fRF_x5fEVM_fExcludeTransitionSet",
	"_nHSUPA_x5fRF_x5fEVM_fNO",
	"_nHSUPA_x5fRF_x5fEVM_fYES",
	"StdForm");

create_item ("HSUPA_RF_EVM","EVM and Phase Discontinuity Measurements",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_RF_EVM",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_RF_EVM",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_RF_EVM",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RLoad","input resistance",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","temperature of resistor, in celsius",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("ExcessBW","excess bandwidth of raised cosine filters",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.22")),
	create_parm ("FilterLength","length of raised cosine filters in number of symbols",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("SamplesPerChip","samples per chip",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("LinkDir","link direction",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fRF_x5fEVM_fLinkDirSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRF_x5fEVM_fUplink","Uplink")),
	create_parm ("ScrambleCode","index of scramble code",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ULScrambleType","uplink scramble code type",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fRF_x5fEVM_fULScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRF_x5fEVM_fLONG","LONG")),
	create_parm ("ScrambleOffset","scramble offset in downlink channels",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("DLScrambleType","downlink scramble code type",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fRF_x5fEVM_fDLScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRF_x5fEVM_fNormal","Normal")),
	create_parm ("SpreadCode","index of spread code",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SlotFormat","slot format",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("StartSlot","number of slot to be ignored",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SlotNum","number of slots measured",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("SCH","switch for SCH",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fRF_x5fEVM_fSCHSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRF_x5fEVM_fON","ON")),
	create_parm ("CPICH","switch for CPICH",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fRF_x5fEVM_fCPICHSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRF_x5fEVM_fOFF","OFF")),
	create_parm ("DUT_DelayBound","Search length",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm","0.00001 sec")),
	create_parm ("EVMValue","EVM value expression options",
		PARM_INT,
		"_nHSUPA_x5fRF_x5fEVM_fEVMValueSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRF_x5fEVM_fEVM_x5fPercent","EVM_Percent")),
	create_parm ("Correct_IQ_Offset","switch for IQ offset correction",
		PARM_INT,
		"_nHSUPA_x5fRF_x5fEVM_fCorrect_x5fIQ_x5fOffsetSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRF_x5fEVM_fYES","YES")),
	create_parm ("ExcludeTransition","select YES for predictable power changes",
		PARM_INT,
		"_nHSUPA_x5fRF_x5fEVM_fExcludeTransitionSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRF_x5fEVM_fYES","YES")));


create_constant_form ("_nHSUPA_x5fRF_x5fOutputPower_fLONG", 
	"LONG",
	0,
	"0",
	"Long");

create_constant_form ("_nHSUPA_x5fRF_x5fOutputPower_fSHORT", 
	"SHORT",
	0,
	"1",
	"Short");

create_form_set("_nHSUPA_x5fRF_x5fOutputPower_fScrambleSet",
	"_nHSUPA_x5fRF_x5fOutputPower_fLONG",
	"_nHSUPA_x5fRF_x5fOutputPower_fSHORT",
	"StdForm");

create_item ("HSUPA_RF_OutputPower","HSUPA output power measurements",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_RF_OutputPower",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_RF_OutputPower",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_RF_OutputPower",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RLoad","Input resistance",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1950MHz")),
	create_parm ("SamplesPerChip","Samples per chip",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Scramble","scramble code type",
		PARM_INT,
		"_nHSUPA_x5fRF_x5fOutputPower_fScrambleSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fRF_x5fOutputPower_fLONG","LONG")),
	create_parm ("SlotFormat","Slot format",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("CM_k","Slope factor for calculating cubic metric",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1.56")),
	create_parm ("SearchLength","Search length",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		TIME_UNIT,
		prm("StdForm",".00001 sec")),
	create_parm ("StartSlot","number of slot to be ignored",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SlotNum","number of slots measured",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")));


create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fIor", 
	"Ior",
	0,
	"0",
	"Ior");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDPCH_x5f_x5fEc", 
	"DPCH__Ec",
	0,
	"1",
	"DPCH_Ec");

create_form_set("_nHSUPA_x5fDL_x5fSourceRF_fPowerReferenceSet",
	"_nHSUPA_x5fDL_x5fSourceRF_fIor",
	"_nHSUPA_x5fDL_x5fSourceRF_fDPCH_x5f_x5fEc",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fDL_x5fSourceRF_fMirrorSpectrumSet",
	"_nHSUPA_x5fDL_x5fSourceRF_fNO",
	"_nHSUPA_x5fDL_x5fSourceRF_fYES",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fnormal", 
	"normal",
	0,
	"0",
	"Normal");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fright", 
	"right",
	0,
	"1",
	"Right Alternate");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fleft", 
	"left",
	0,
	"2",
	"Left Alternate");

create_form_set("_nHSUPA_x5fDL_x5fSourceRF_fScrambleTypeSet",
	"_nHSUPA_x5fDL_x5fSourceRF_fnormal",
	"_nHSUPA_x5fDL_x5fSourceRF_fright",
	"_nHSUPA_x5fDL_x5fSourceRF_fleft",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");

create_form_set("_nHSUPA_x5fDL_x5fSourceRF_fTTISet",
	"_nHSUPA_x5fDL_x5fSourceRF_fTTI_x5f2ms",
	"_nHSUPA_x5fDL_x5fSourceRF_fTTI_x5f10ms",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDL_x5fREF_x5f12_x5f2", 
	"DL_REF_12_2",
	0,
	"0",
	"12_2 kbps");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDL_x5fREF_x5f64", 
	"DL_REF_64",
	0,
	"1",
	"64 kbps");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDL_x5fREF_x5f144", 
	"DL_REF_144",
	0,
	"2",
	"144 kbps");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDL_x5fREF_x5f384", 
	"DL_REF_384",
	0,
	"3",
	"384 kbps");

create_form_set("_nHSUPA_x5fDL_x5fSourceRF_fRefChSet",
	"_nHSUPA_x5fDL_x5fSourceRF_fDL_x5fREF_x5f12_x5f2",
	"_nHSUPA_x5fDL_x5fSourceRF_fDL_x5fREF_x5f64",
	"_nHSUPA_x5fDL_x5fSourceRF_fDL_x5fREF_x5f144",
	"_nHSUPA_x5fDL_x5fSourceRF_fDL_x5fREF_x5f384",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5frandom", 
	"DTCH_random",
	0,
	"0",
	"Random");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5fPN9", 
	"DTCH_PN9",
	0,
	"1",
	"PN9");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5fPN15", 
	"DTCH_PN15",
	0,
	"2",
	"PN15");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5fbits_x5frepeat", 
	"DTCH_bits_repeat",
	0,
	"3",
	"Repeat Bits");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5fuser_x5ffile", 
	"DTCH_user_file",
	0,
	"4",
	"UserFile");

create_form_set("_nHSUPA_x5fDL_x5fSourceRF_fDTCHDataPatternSet",
	"_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5frandom",
	"_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5fPN9",
	"_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5fPN15",
	"_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5fbits_x5frepeat",
	"_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5fuser_x5ffile",
	"StdForm");

create_text_form ("_nHSUPA_x5fDL_x5fSourceRF_ftxt_x5ffile", 
	"File with txt extension",
	"ReadFileForm", 0, "%v", "%v", get_file_name_list_with_ext, NULL,
	list("DATA_FILES", "txt"), prefix_path_to_data_file);

create_form_set ( "_nHSUPA_x5fDL_x5fSourceRF_fDTCHUserFileName_x5fFileSet",
	"_nHSUPA_x5fDL_x5fSourceRF_ftxt_x5ffile");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5frandom", 
	"DCCH_random",
	0,
	"0",
	"Random");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5fPN9", 
	"DCCH_PN9",
	0,
	"1",
	"PN9");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5fPN15", 
	"DCCH_PN15",
	0,
	"2",
	"PN15");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5fbits_x5frepeat", 
	"DCCH_bits_repeat",
	0,
	"3",
	"Repeat Bits");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5fuser_x5ffile", 
	"DCCH_user_file",
	0,
	"4",
	"UserFile");

create_form_set("_nHSUPA_x5fDL_x5fSourceRF_fDCCHDataPatternSet",
	"_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5frandom",
	"_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5fPN9",
	"_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5fPN15",
	"_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5fbits_x5frepeat",
	"_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5fuser_x5ffile",
	"StdForm");

create_text_form ("_nHSUPA_x5fDL_x5fSourceRF_ftxt_x5ffile", 
	"File with txt extension",
	"ReadFileForm", 0, "%v", "%v", get_file_name_list_with_ext, NULL,
	list("DATA_FILES", "txt"), prefix_path_to_data_file);

create_form_set ( "_nHSUPA_x5fDL_x5fSourceRF_fDCCHUserFileName_x5fFileSet",
	"_nHSUPA_x5fDL_x5fSourceRF_ftxt_x5ffile");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5frandom", 
	"TPC_random",
	0,
	"0",
	"Random");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5fPN9", 
	"TPC_PN9",
	0,
	"1",
	"PN9");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5fPN15", 
	"TPC_PN15",
	0,
	"2",
	"PN15");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5fbits_x5frepeat", 
	"TPC_bits_repeat",
	0,
	"3",
	"Repeat Bits");

create_constant_form ("_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5fuser_x5ffile", 
	"TPC_user_file",
	0,
	"4",
	"UserFile");

create_form_set("_nHSUPA_x5fDL_x5fSourceRF_fTPCDataPatternSet",
	"_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5frandom",
	"_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5fPN9",
	"_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5fPN15",
	"_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5fbits_x5frepeat",
	"_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5fuser_x5ffile",
	"StdForm");

create_text_form ("_nHSUPA_x5fDL_x5fSourceRF_ftxt_x5ffile", 
	"File with txt extension",
	"ReadFileForm", 0, "%v", "%v", get_file_name_list_with_ext, NULL,
	list("DATA_FILES", "txt"), prefix_path_to_data_file);

create_form_set ( "_nHSUPA_x5fDL_x5fSourceRF_fTPCUserFileName_x5fFileSet",
	"_nHSUPA_x5fDL_x5fSourceRF_ftxt_x5ffile");

create_item ("HSUPA_DL_SourceRF","HSUPA RF downlink signal source",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_DL_SourceRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_DL_SourceRF",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_DL_SourceRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","Source resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","Temperature",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","Expression showing how TStep is related to the other source parameters",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"1/3.84 MHz/SamplesPerChip\"")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1950MHz")),
	create_parm ("Power","Power, valid only if PowerReference setting is Ior",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","dbmtow(43.0)")),
	create_parm ("PowerReference","Reference for all channels with relative power level",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fSourceRF_fPowerReferenceSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_fIor","Ior")),
	create_parm ("DPCH_Ec","Ec of DPCH in dBm/3.84 MHz",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-100")),
	create_parm ("MirrorSpectrum","Mirror spectrum about carrier?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSourceRF_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_fNO","NO")),
	create_parm ("GainImbalance","Gain imbalance, Q vs I",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","Phase imbalance, Q vs I",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset (percent)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset (percent)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SamplesPerChip","Samples per chip",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("RRC_FilterLength","RRC filter length (chips)",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("ExcessBW","Excess bandwidth of raised cosine filters",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.22")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleOffset","Scramble code offset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleType","Scramble code type",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fSourceRF_fScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_fnormal","normal")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fSourceRF_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("EHICH_SgnlPttrn","E-HICH signal pattern",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"1.0\"")),
	create_parm ("ERGCH_SgnlPttrn","E-RGCH signal pattern",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"1.0\"")),
	create_parm ("EHICH_SqnIdx","Signature sequence index of EHICH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ERGCH_SqnIdx","Signature sequence index of ERGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("EHI_ERG_SpreadCode","Spreading code for E-HICH and E-RGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("EAGCH_SpreadCode","Spreading code for E-AGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("ERNTI","E-DCH radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("EHICH_GainFactor","EHICH power gain in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-28.3")),
	create_parm ("ERGCH_GainFactor","ERGCH power gain in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-24.4")),
	create_parm ("EAGCH_GainFactor","EAGCH power gain in dB",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-23.2")),
	create_parm ("RefCh","Reference measurement channel",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSourceRF_fRefChSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_fDL_x5fREF_x5f12_x5f2","DL_REF_12_2")),
	create_parm ("DPCH_SpreadCode","Spread code index of DPCH",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","127")),
	create_parm ("CPICH_SpreadCode","Spread code index of CPICH",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("PICH_SpreadCode","Spread code index of PICH",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("SCCPCH_SlotFormat","SCCPCH slot format",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("SCCPCH_SpreadCode","Spread code index of SCCPCH",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("DPCH_GainFactor","DPCH Ec over Ior in dB, valid only if PowerReference is Ior",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-15")),
	create_parm ("P_CPICH_GainFactor","Primary CPICH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-10.0")),
	create_parm ("S_CPICH_GainFactor","Secondary CPICH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-300.0")),
	create_parm ("PCCPCH_GainFactor","PCCPCH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-12")),
	create_parm ("SCCPCH_GainFactor","SCCPCH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-300")),
	create_parm ("P_SCH_GainFactor","Primary SCH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-15")),
	create_parm ("S_SCH_GainFactor","Secondary SCH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-15")),
	create_parm ("PICH_GainFactor","PICH power gain in dB",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-15")),
	create_parm ("OCNS_GainFactor","OCNS gain in dB, valid only if PowerReference is DPCH_Ec",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-300")),
	create_parm ("OCNS_ChannelNum","OCNS channel number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("OCNS_PowerArray","OCNS channel power array in dB",
		PARM_REALARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"-1 -3 -3 -5 -2 -4 -8 -7 -4 -6 -5 -9 -10 -8 -6 0\"")),
	create_parm ("OCNS_SpreadFactorArray","OCNS spread factor array",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128\"")),
	create_parm ("OCNS_SpreadCodeArray","OCNS spread code array",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"2 11 17 23 31 38 47 55 62 69 78 85 94 125 113 119\"")),
	create_parm ("OCNS_DataPatternArray","OCNS data pattern array: 0-random, 1-PN9, 2-PN15, 3-Repeat Bits",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"")),
	create_parm ("OCNS_RepBitValueArray","OCNS repeat bit value array",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"")),
	create_parm ("OCNS_tOffsetArray","OCNS time offset in terms of 256 chips",
		PARM_INTARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"")),
	create_parm ("DTCHDataPattern","DTCH source data pattern",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSourceRF_fDTCHDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_fDTCH_x5frandom","DTCH_random")),
	create_parm ("DTCHRepBitValue","DTCH repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0xff")),
	create_parm ("DTCHUserFileName","DTCH user-defined data file name",
		PARM_STRING | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSourceRF_fDTCHUserFileName_x5fFileSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_ftxt_x5ffile","\"datafile.txt\"")),
	create_parm ("DCCHDataPattern","DCCH source data pattern",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSourceRF_fDCCHDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_fDCCH_x5frandom","DCCH_random")),
	create_parm ("DCCHRepBitValue","DCCH repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0xff")),
	create_parm ("DCCHUserFileName","DCCH user-defined data file name",
		PARM_STRING | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSourceRF_fDCCHUserFileName_x5fFileSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_ftxt_x5ffile","\"datafile.txt\"")),
	create_parm ("TPCDataPattern","Source data pattern",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSourceRF_fTPCDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_fTPC_x5frandom","TPC_random")),
	create_parm ("TPCRepBitValue","TPC repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0xff")),
	create_parm ("TPCUserFileName","TPC user-defined data file name",
		PARM_STRING | PARM_NO_DISPLAY,
		"_nHSUPA_x5fDL_x5fSourceRF_fTPCUserFileName_x5fFileSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fSourceRF_ftxt_x5ffile","\"datafile.txt\"")));


create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fnormal", 
	"normal",
	0,
	"0",
	"Normal");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fright", 
	"right",
	0,
	"1",
	"Right Alternate");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fleft", 
	"left",
	0,
	"2",
	"Left Alternate");

create_form_set("_nHSUPA_x5fDL_x5fReceiverRF_fScrambleTypeSet",
	"_nHSUPA_x5fDL_x5fReceiverRF_fnormal",
	"_nHSUPA_x5fDL_x5fReceiverRF_fright",
	"_nHSUPA_x5fDL_x5fReceiverRF_fleft",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");

create_form_set("_nHSUPA_x5fDL_x5fReceiverRF_fTTISet",
	"_nHSUPA_x5fDL_x5fReceiverRF_fTTI_x5f2ms",
	"_nHSUPA_x5fDL_x5fReceiverRF_fTTI_x5f10ms",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fCH_x5fGAUSSIAN", 
	"CH_GAUSSIAN",
	0,
	"0",
	"Gaussian");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fCH_x5fFADING", 
	"CH_FADING",
	0,
	"1",
	"Fading");

create_form_set("_nHSUPA_x5fDL_x5fReceiverRF_fChannelTypeSet",
	"_nHSUPA_x5fDL_x5fReceiverRF_fCH_x5fGAUSSIAN",
	"_nHSUPA_x5fDL_x5fReceiverRF_fCH_x5fFADING",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fKnown", 
	"Known",
	0,
	"0",
	"Known");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fEstimated", 
	"Estimated",
	0,
	"1",
	"Estimated");

create_form_set("_nHSUPA_x5fDL_x5fReceiverRF_fChannelInfoSet",
	"_nHSUPA_x5fDL_x5fReceiverRF_fKnown",
	"_nHSUPA_x5fDL_x5fReceiverRF_fEstimated",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fEverySlot", 
	"EverySlot",
	0,
	"0",
	"EverySlot");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fOnce", 
	"Once",
	0,
	"1",
	"Once");

create_form_set("_nHSUPA_x5fDL_x5fReceiverRF_fPathSearchSet",
	"_nHSUPA_x5fDL_x5fReceiverRF_fEverySlot",
	"_nHSUPA_x5fDL_x5fReceiverRF_fOnce",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fCoherent", 
	"Coherent",
	0,
	"0",
	"Coherent");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fNonCoherent", 
	"NonCoherent",
	0,
	"1",
	"NonCoherent");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fCombined", 
	"Combined",
	0,
	"2",
	"Combined");

create_form_set("_nHSUPA_x5fDL_x5fReceiverRF_fSearchMethodSet",
	"_nHSUPA_x5fDL_x5fReceiverRF_fCoherent",
	"_nHSUPA_x5fDL_x5fReceiverRF_fNonCoherent",
	"_nHSUPA_x5fDL_x5fReceiverRF_fCombined",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fON", 
	"ON",
	0,
	"1",
	"ON");

create_form_set("_nHSUPA_x5fDL_x5fReceiverRF_fRxEHICH_x5fERGCHSet",
	"_nHSUPA_x5fDL_x5fReceiverRF_fOFF",
	"_nHSUPA_x5fDL_x5fReceiverRF_fON",
	"StdForm");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fOFF", 
	"OFF",
	0,
	"0",
	"OFF");

create_constant_form ("_nHSUPA_x5fDL_x5fReceiverRF_fON", 
	"ON",
	0,
	"1",
	"ON");

create_form_set("_nHSUPA_x5fDL_x5fReceiverRF_fRxEAGCHSet",
	"_nHSUPA_x5fDL_x5fReceiverRF_fOFF",
	"_nHSUPA_x5fDL_x5fReceiverRF_fON",
	"StdForm");

create_item ("HSUPA_DL_ReceiverRF","HSUPA downlink receiver",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_DL_ReceiverRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_DL_ReceiverRF",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_DL_ReceiverRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RLoad","Input resistance",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1950MHz")),
	create_parm ("Phase","Reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SamplesPerChip","Samples per chip",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("RRC_FilterLength","RRC filter length (chips)",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("ExcessBW","Excess bandwidth of raised cosine filters",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.22")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleOffset","Scramble code offset",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ScrambleType","Scramble code type",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiverRF_fScrambleTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiverRF_fnormal","normal")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiverRF_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiverRF_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("EHICH_SqnIdx","Signature sequence index of EHICH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ERGCH_SqnIdx","Signature sequence index of ERGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("EHI_ERG_SpreadCode","Spreading code for E-HICH and E-RGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("EAGCH_SpreadCode","Spreading code for E-AGCH",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","100")),
	create_parm ("ERNTI","E-DCH radio network temporary identifier",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","19")),
	create_parm ("MaxDelaySample","Maximum delay boundary, in terms of samples",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChannelType","Select the channel type to be processed",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiverRF_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiverRF_fCH_x5fGAUSSIAN","CH_GAUSSIAN")),
	create_parm ("ChannelInfo","Fading channel information source",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiverRF_fChannelInfoSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiverRF_fKnown","Known")),
	create_parm ("ChannelInfoOffset","Offset between spread code and channel information in terms of sample",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("PathSearch","Path search frequency",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiverRF_fPathSearchSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiverRF_fOnce","Once")),
	create_parm ("SearchMethod","Path search method",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiverRF_fSearchMethodSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiverRF_fCoherent","Coherent")),
	create_parm ("SearchSlotsNum","Number of slots for path search",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PathNum","Number of Rake fingers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PathDelaySample","Delay for each finger, in terms of samples",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0\"")),
	create_parm ("RxEHICH_ERGCH","Switch of EHICH and/or ERGCH demodulation",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiverRF_fRxEHICH_x5fERGCHSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiverRF_fON","ON")),
	create_parm ("RxEAGCH","Switch of EAGCH demodulation",
		PARM_INT,
		"_nHSUPA_x5fDL_x5fReceiverRF_fRxEAGCHSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fDL_x5fReceiverRF_fON","ON")),
	create_parm ("Threshold_EHICH","Threshold for decoding E-HICH",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-32")),
	create_parm ("Threshold_ERGCH","Threshold for decoding E-RGCH",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-20")));


create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fLONG", 
	"LONG",
	0,
	"0",
	"Long");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fSHORT", 
	"SHORT",
	0,
	"1",
	"Short");

create_form_set("_nHSUPA_x5fFRC_x5fReceiverRF_fScrambleSet",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fLONG",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fSHORT",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fFRC1", 
	"FRC1",
	0,
	"0",
	"FRC1");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fFRC2", 
	"FRC2",
	0,
	"1",
	"FRC2");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fFRC3", 
	"FRC3",
	0,
	"2",
	"FRC3");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fFRC4", 
	"FRC4",
	0,
	"3",
	"FRC4");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fFRC5", 
	"FRC5",
	0,
	"4",
	"FRC5");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fFRC6", 
	"FRC6",
	0,
	"5",
	"FRC6");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fFRC7", 
	"FRC7",
	0,
	"6",
	"FRC7");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fFRC8", 
	"FRC8",
	0,
	"7",
	"FRC8");

create_form_set("_nHSUPA_x5fFRC_x5fReceiverRF_fFRCSet",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fFRC1",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fFRC2",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fFRC3",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fFRC4",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fFRC5",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fFRC6",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fFRC7",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fFRC8",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fFRC_x5fReceiverRF_fDPDCH_x5fConfiguredSet",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fNO",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fYES",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fFRC_x5fReceiverRF_fHSDPCCH_x5fConfiguredSet",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fNO",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fYES",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fCH_x5fGAUSSIAN", 
	"CH_GAUSSIAN",
	0,
	"0",
	"Gaussian");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fCH_x5fFADING", 
	"CH_FADING",
	0,
	"1",
	"Fading");

create_form_set("_nHSUPA_x5fFRC_x5fReceiverRF_fChannelTypeSet",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fCH_x5fGAUSSIAN",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fCH_x5fFADING",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fKnown", 
	"Known",
	0,
	"0",
	"Known");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fEstimated", 
	"Estimated",
	0,
	"1",
	"Estimated");

create_form_set("_nHSUPA_x5fFRC_x5fReceiverRF_fChannelInfoSet",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fKnown",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fEstimated",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fFRC_x5fReceiverRF_fUseMovingEstWindowSet",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fNO",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fYES",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fEverySlot", 
	"EverySlot",
	0,
	"0",
	"EverySlot");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fOnce", 
	"Once",
	0,
	"1",
	"Once");

create_form_set("_nHSUPA_x5fFRC_x5fReceiverRF_fPathSearchSet",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fEverySlot",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fOnce",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fCoherent", 
	"Coherent",
	0,
	"0",
	"Coherent");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fNonCoherent", 
	"NonCoherent",
	0,
	"1",
	"NonCoherent");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fCombined", 
	"Combined",
	0,
	"2",
	"Combined");

create_form_set("_nHSUPA_x5fFRC_x5fReceiverRF_fSearchMethodSet",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fCoherent",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fNonCoherent",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fCombined",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fFRC_x5fReceiverRF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fFRC_x5fReceiverRF_fUsePastSearchSet",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fNO",
	"_nHSUPA_x5fFRC_x5fReceiverRF_fYES",
	"StdForm");

create_item ("HSUPA_FRC_ReceiverRF","HSUPA receiver for fixed reference channel",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_FRC_ReceiverRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_FRC_ReceiverRF",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_FRC_ReceiverRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("RLoad","Input resistance",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultRLoad")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1950MHz")),
	create_parm ("Phase","Reference phase in degrees",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SamplesPerChip","Samples per chip",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("RRC_FilterLength","RRC filter length (chips)",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Scramble","scramble code type",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiverRF_fScrambleSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiverRF_fLONG","LONG")),
	create_parm ("FRC","Fixed reference channel",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiverRF_fFRCSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiverRF_fFRC1","FRC1")),
	create_parm ("DPDCH_Configured","Setting to YES if DPDCH is configured, otherwise NO",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_x5fReceiverRF_fDPDCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiverRF_fNO","NO")),
	create_parm ("HSDPCCH_Configured","Setting to YES if HS-DPCCH is configured, otherwise NO",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_x5fReceiverRF_fHSDPCCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiverRF_fNO","NO")),
	create_parm ("MaxDelaySample","Maximum delay boundary, in terms of samples",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("ChannelType","Select the channel type to be processed",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiverRF_fChannelTypeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiverRF_fCH_x5fGAUSSIAN","CH_GAUSSIAN")),
	create_parm ("ChannelInfo","Fading channel information source",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiverRF_fChannelInfoSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiverRF_fKnown","Known")),
	create_parm ("ChannelInfoOffset","Offset between spread code and channel information in terms of sample",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("EstSlotsNum","Number of slots for channel estimation",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("UseMovingEstWindow","If use moving window in channel estimation",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_x5fReceiverRF_fUseMovingEstWindowSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiverRF_fNO","NO")),
	create_parm ("PathSearch","Path search frequency",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiverRF_fPathSearchSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiverRF_fOnce","Once")),
	create_parm ("SearchMethod","Path search method",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fReceiverRF_fSearchMethodSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiverRF_fCoherent","Coherent")),
	create_parm ("SearchSlotsNum","Number of slots for path search",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("PathNum","Number of Rake fingers",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","1")),
	create_parm ("UsePastSearch","If use past samples for path search",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_x5fReceiverRF_fUsePastSearchSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fReceiverRF_fNO","NO")),
	create_parm ("PathDelaySample","Delay for each finger, in terms of samples",
		PARM_INTARRAY,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"0\"")),
	create_parm ("TC_Iteration","Turbo code decoder iteration number",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("TC_Alfa","Alfa of lowpass filter",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.4")),
	create_parm ("Threshold_EDPCCH","Threshold for decoding E-DPCCH",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","-23.6")));


create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fUL_x5fSourceRF_fMirrorSpectrumSet",
	"_nHSUPA_x5fUL_x5fSourceRF_fNO",
	"_nHSUPA_x5fUL_x5fSourceRF_fYES",
	"StdForm");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fCalculated_x5fusing_x5fRSN", 
	"Calculated using RSN",
	0,
	"0",
	"Calculated using RSN");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fOnly_x5findex_x5f0", 
	"Only index 0",
	0,
	"1",
	"Only index 0");

create_form_set("_nHSUPA_x5fUL_x5fSourceRF_fRV_x5fModeSet",
	"_nHSUPA_x5fUL_x5fSourceRF_fCalculated_x5fusing_x5fRSN",
	"_nHSUPA_x5fUL_x5fSourceRF_fOnly_x5findex_x5f0",
	"StdForm");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fDepending_x5fon_x5fTTI", 
	"Depending on TTI",
	0,
	"0",
	"Depending on TTI");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fUser_x5fdefined", 
	"User defined",
	0,
	"1",
	"User defined");

create_form_set("_nHSUPA_x5fUL_x5fSourceRF_fHARQ_x5fPrcssModeSet",
	"_nHSUPA_x5fUL_x5fSourceRF_fDepending_x5fon_x5fTTI",
	"_nHSUPA_x5fUL_x5fSourceRF_fUser_x5fdefined",
	"StdForm");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fLONG", 
	"LONG",
	0,
	"0",
	"Long");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fSHORT", 
	"SHORT",
	0,
	"1",
	"Short");

create_form_set("_nHSUPA_x5fUL_x5fSourceRF_fScrambleSet",
	"_nHSUPA_x5fUL_x5fSourceRF_fLONG",
	"_nHSUPA_x5fUL_x5fSourceRF_fSHORT",
	"StdForm");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fRandom", 
	"Random",
	0,
	"0",
	"Random");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fPN9", 
	"PN9",
	0,
	"1",
	"PN9");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fPN15", 
	"PN15",
	0,
	"2",
	"PN15");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fRepeat_x5fBits", 
	"Repeat Bits",
	0,
	"3",
	"Repeat Bits");

create_form_set("_nHSUPA_x5fUL_x5fSourceRF_fDataPatternSet",
	"_nHSUPA_x5fUL_x5fSourceRF_fRandom",
	"_nHSUPA_x5fUL_x5fSourceRF_fPN9",
	"_nHSUPA_x5fUL_x5fSourceRF_fPN15",
	"_nHSUPA_x5fUL_x5fSourceRF_fRepeat_x5fBits",
	"StdForm");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f1", 
	"Category 1",
	0,
	"0",
	"Category 1");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f2", 
	"Category 2",
	0,
	"1",
	"Category 2");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f3", 
	"Category 3",
	0,
	"2",
	"Category 3");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f4", 
	"Category 4",
	0,
	"3",
	"Category 4");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f5", 
	"Category 5",
	0,
	"4",
	"Category 5");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f6", 
	"Category 6",
	0,
	"5",
	"Category 6");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f7", 
	"Category 7",
	0,
	"6",
	"Category 7");

create_form_set("_nHSUPA_x5fUL_x5fSourceRF_fEDCH_x5fCategorySet",
	"_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f1",
	"_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f2",
	"_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f3",
	"_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f4",
	"_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f5",
	"_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f6",
	"_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f7",
	"StdForm");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fTTI_x5f2ms", 
	"TTI 2ms",
	0,
	"0",
	"2 ms");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fTTI_x5f10ms", 
	"TTI 10ms",
	0,
	"1",
	"10 ms");

create_form_set("_nHSUPA_x5fUL_x5fSourceRF_fTTISet",
	"_nHSUPA_x5fUL_x5fSourceRF_fTTI_x5f2ms",
	"_nHSUPA_x5fUL_x5fSourceRF_fTTI_x5f10ms",
	"StdForm");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fUL_x5fSourceRF_fDPDCH_x5fConfiguredSet",
	"_nHSUPA_x5fUL_x5fSourceRF_fNO",
	"_nHSUPA_x5fUL_x5fSourceRF_fYES",
	"StdForm");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fUL_x5fSourceRF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fUL_x5fSourceRF_fHSDPCCH_x5fConfiguredSet",
	"_nHSUPA_x5fUL_x5fSourceRF_fNO",
	"_nHSUPA_x5fUL_x5fSourceRF_fYES",
	"StdForm");

create_item ("HSUPA_UL_SourceRF","HSUPA RF uplink signal source",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_UL_SourceRF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_UL_SourceRF",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_UL_SourceRF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","Source resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","Temperature",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","Expression showing how TStep is related to the other source parameters",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"1/3.84 MHz/SamplesPerChip\"")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1950MHz")),
	create_parm ("Power","Power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","dbmtow(24.0)")),
	create_parm ("MirrorSpectrum","Mirror spectrum about carrier?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUL_x5fSourceRF_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSourceRF_fNO","NO")),
	create_parm ("GainImbalance","Gain imbalance, Q vs I",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","Phase imbalance, Q vs I",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset (percent)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset (percent)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SamplesPerChip","Samples per chip",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("RRC_FilterLength","RRC filter length (chips)",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("ExcessBW","Excess bandwidth of raised cosine filters",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.22")),
	create_parm ("RV_Mode","Redundancy version mode",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSourceRF_fRV_x5fModeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSourceRF_fCalculated_x5fusing_x5fRSN","Calculated_using_RSN")),
	create_parm ("MaxRSN","Maximum retransmission sequence number",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","3")),
	create_parm ("HARQ_PrcssMode","Way to setting number of HARQ",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSourceRF_fHARQ_x5fPrcssModeSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSourceRF_fDepending_x5fon_x5fTTI","Depending_on_TTI")),
	create_parm ("NumHARQ","Number of HARQ processes",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","4")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Scramble","scramble code type",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSourceRF_fScrambleSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSourceRF_fLONG","LONG")),
	create_parm ("DataPattern","Source data pattern",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSourceRF_fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSourceRF_fRandom","Random")),
	create_parm ("RepeatBitValue","Repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0x0001")),
	create_parm ("RepeatBitPeriod","Repeating data period",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("EDCH_Category","FDD E-DCH physical layer categories",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSourceRF_fEDCH_x5fCategorySet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSourceRF_fCategory_x5f6","Category_6")),
	create_parm ("TransBlockSize","Transport block size",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2706")),
	create_parm ("TTI","Transmission time interval",
		PARM_INT,
		"_nHSUPA_x5fUL_x5fSourceRF_fTTISet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSourceRF_fTTI_x5f2ms","TTI_2ms")),
	create_parm ("PuncLimit","Puncturing limit for uplink",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.468")),
	create_parm ("DPDCH_Configured","Setting to YES if DPDCH is configured, otherwise NO",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUL_x5fSourceRF_fDPDCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSourceRF_fNO","NO")),
	create_parm ("HSDPCCH_Configured","Setting to YES if HS-DPCCH is configured, otherwise NO",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fUL_x5fSourceRF_fHSDPCCH_x5fConfiguredSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fUL_x5fSourceRF_fNO","NO")),
	create_parm ("GainD","channel gain of DPDCH over DPCCH",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","-300")),
	create_parm ("GainED","channel gain of E-DPDCH over DPCCH",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		DB_GAIN_UNIT,
		prm("StringAndReference","\"12.04\"")),
	create_parm ("GainEC","channel gain of E-DPCCH over DPCCH",
		PARM_REALARRAY,
		"StringAndReferenceSet",
		DB_GAIN_UNIT,
		prm("StringAndReference","\"6.02\"")),
	create_parm ("GainHS","channel gain of HS-DPCCH over DPCCH",
		PARM_REALARRAY | PARM_NO_DISPLAY,
		"StringAndReferenceSet",
		DB_GAIN_UNIT,
		prm("StringAndReference","\"-300\"")),
	create_parm ("SlotF_DPDCH","slot format index of DPDCH",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")));


create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fFRC_x5fRF_fMirrorSpectrumSet",
	"_nHSUPA_x5fFRC_x5fRF_fNO",
	"_nHSUPA_x5fFRC_x5fRF_fYES",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fLONG", 
	"LONG",
	0,
	"0",
	"Long");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fSHORT", 
	"SHORT",
	0,
	"1",
	"Short");

create_form_set("_nHSUPA_x5fFRC_x5fRF_fScrambleSet",
	"_nHSUPA_x5fFRC_x5fRF_fLONG",
	"_nHSUPA_x5fFRC_x5fRF_fSHORT",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fFRC1", 
	"FRC1",
	0,
	"0",
	"FRC1");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fFRC2", 
	"FRC2",
	0,
	"1",
	"FRC2");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fFRC3", 
	"FRC3",
	0,
	"2",
	"FRC3");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fFRC4", 
	"FRC4",
	0,
	"3",
	"FRC4");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fFRC5", 
	"FRC5",
	0,
	"4",
	"FRC5");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fFRC6", 
	"FRC6",
	0,
	"5",
	"FRC6");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fFRC7", 
	"FRC7",
	0,
	"6",
	"FRC7");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fFRC8", 
	"FRC8",
	0,
	"7",
	"FRC8");

create_form_set("_nHSUPA_x5fFRC_x5fRF_fFRCSet",
	"_nHSUPA_x5fFRC_x5fRF_fFRC1",
	"_nHSUPA_x5fFRC_x5fRF_fFRC2",
	"_nHSUPA_x5fFRC_x5fRF_fFRC3",
	"_nHSUPA_x5fFRC_x5fRF_fFRC4",
	"_nHSUPA_x5fFRC_x5fRF_fFRC5",
	"_nHSUPA_x5fFRC_x5fRF_fFRC6",
	"_nHSUPA_x5fFRC_x5fRF_fFRC7",
	"_nHSUPA_x5fFRC_x5fRF_fFRC8",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fE_x5fDPDCH_x5ftesting", 
	"E-DPDCH testing",
	0,
	"0",
	"E-DPDCH testing");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fE_x5fDPCCH_x5fmissed_x5fdetection_x5ftesting", 
	"E-DPCCH missed detection testing",
	0,
	"1",
	"E-DPCCH missed detection testing");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fE_x5fDPCCH_x5ffalse_x5falarm_x5ftesting", 
	"E-DPCCH false alarm testing",
	0,
	"2",
	"E-DPCCH false alarm testing");

create_form_set("_nHSUPA_x5fFRC_x5fRF_fTestCaseSet",
	"_nHSUPA_x5fFRC_x5fRF_fE_x5fDPDCH_x5ftesting",
	"_nHSUPA_x5fFRC_x5fRF_fE_x5fDPCCH_x5fmissed_x5fdetection_x5ftesting",
	"_nHSUPA_x5fFRC_x5fRF_fE_x5fDPCCH_x5ffalse_x5falarm_x5ftesting",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fRandom", 
	"Random",
	0,
	"0",
	"Random");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fPN9", 
	"PN9",
	0,
	"1",
	"PN9");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fPN15", 
	"PN15",
	0,
	"2",
	"PN15");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fRepeat_x5fBits", 
	"Repeat Bits",
	0,
	"3",
	"Repeat Bits");

create_form_set("_nHSUPA_x5fFRC_x5fRF_fDataPatternSet",
	"_nHSUPA_x5fFRC_x5fRF_fRandom",
	"_nHSUPA_x5fFRC_x5fRF_fPN9",
	"_nHSUPA_x5fFRC_x5fRF_fPN15",
	"_nHSUPA_x5fFRC_x5fRF_fRepeat_x5fBits",
	"StdForm");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fNO", 
	"NO",
	0,
	"0",
	"NO");

create_constant_form ("_nHSUPA_x5fFRC_x5fRF_fYES", 
	"YES",
	0,
	"1",
	"YES");

create_form_set("_nHSUPA_x5fFRC_x5fRF_fEDPCCH_x5fBoostingSet",
	"_nHSUPA_x5fFRC_x5fRF_fNO",
	"_nHSUPA_x5fFRC_x5fRF_fYES",
	"StdForm");

create_item ("HSUPA_FRC_RF","HSUPA fixed reference channel",
	"H",
	ITEM_NOT_ALL_PARM | ITEM_DESIGN_INST,
	-1,
	"BMP_HSUPA_FRC_RF",
	"Component Parameters",
	NULL,
	SPDesignNetlistFmt,
	"HSUPA_FRC_RF",
	SPDesignAnnotFmt,
	"SYM_DSN_HSUPA_FRC_RF",
	no_artwork,
	NULL,
	ITEM_PRIMITIVE_EX,
	create_parm ("ROut","Source resistance",
		PARM_REAL,
		"StdFormSet",
		RESISTANCE_UNIT,
		prm("StdForm","DefaultROut")),
	create_parm ("RTemp","Temperature",
		PARM_REAL | PARM_NO_DISPLAY,
		"StdFormSet",
		TEMPERATURE_UNIT,
		prm("StdForm","DefaultRTemp")),
	create_parm ("TStep","Expression showing how TStep is related to the other source parameters",
		PARM_STRING | PARM_NO_DISPLAY | PARM_NOT_EDITED | PARM_NOT_NETLISTED,
		"StringAndReferenceSet",
		UNITLESS_UNIT,
		prm("StringAndReference","\"1/3.84 MHz/SamplesPerChip\"")),
	create_parm ("FCarrier","Carrier frequency",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		FREQUENCY_UNIT,
		prm("StdForm","1950MHz")),
	create_parm ("Power","Power",
		PARM_REAL | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		POWER_UNIT,
		prm("StdForm","dbmtow(24.0)")),
	create_parm ("MirrorSpectrum","Mirror spectrum about carrier?",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_x5fRF_fMirrorSpectrumSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fRF_fNO","NO")),
	create_parm ("GainImbalance","Gain imbalance, Q vs I",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		DB_GAIN_UNIT,
		prm("StdForm","0.0")),
	create_parm ("PhaseImbalance","Phase imbalance, Q vs I",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("I_OriginOffset","I origin offset (percent)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("Q_OriginOffset","Q origin offset (percent)",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0.0")),
	create_parm ("IQ_Rotation","IQ rotation",
		PARM_REAL | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		ANGLE_UNIT,
		prm("StdForm","0.0")),
	create_parm ("SamplesPerChip","Samples per chip",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","8")),
	create_parm ("RRC_FilterLength","RRC filter length (chips)",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","16")),
	create_parm ("ScrambleCode","Index of scramble code",
		PARM_INT | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0")),
	create_parm ("Scramble","scramble code type",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fRF_fScrambleSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fRF_fLONG","LONG")),
	create_parm ("FRC","Fixed reference channel",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fRF_fFRCSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fRF_fFRC1","FRC1")),
	create_parm ("TestCase","Test case",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fRF_fTestCaseSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fRF_fE_x5fDPDCH_x5ftesting","E_DPDCH_testing")),
	create_parm ("DataPattern","Source data pattern",
		PARM_INT,
		"_nHSUPA_x5fFRC_x5fRF_fDataPatternSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fRF_fRandom","Random")),
	create_parm ("RepeatBitValue","Repeating data value",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","0x0001")),
	create_parm ("RepeatBitPeriod","Repeating data period",
		PARM_INT | PARM_NO_DISPLAY | PARM_OPTIMIZABLE | PARM_STATISTICAL,
		"StdFormSet",
		UNITLESS_UNIT,
		prm("StdForm","2")),
	create_parm ("EDPCCH_Boosting","Setting to YES if E-DPCCH_Boosting is configured, otherwise NO",
		PARM_INT | PARM_NO_DISPLAY,
		"_nHSUPA_x5fFRC_x5fRF_fEDPCCH_x5fBoostingSet",
		UNITLESS_UNIT,
		prm("_nHSUPA_x5fFRC_x5fRF_fNO","NO")));
