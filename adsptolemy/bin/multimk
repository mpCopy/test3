#! /usr/bin/perl
###############################################################################
#
# File:         multimk
# RCS:          $Header: /cvs/wlv/src/cedamk/bin/multimk,v 1.32 2007/07/27 23:04:48 build Exp $
# Description:  Kruddy perl script to transfrobnicate make-defs and produce
#		a mini-cedamk makefile that contains make targets for the
#		new "TARGETS" make-defs variable.
# Author:       Darryl Okahata
# Created:      Fri Jul 13 10:03:09 2001
# Modified:     Thu Oct 18 14:03:48 2001 (Darryl Okahata) darrylo@soco.keysight.com
# Language:     CPerl
# Package:      N/A
# Status:       Experimental (Do Not Distribute)
#
# (C) Copyright 2001, Keysight Technologies, all rights reserved.
#
###############################################################################


$out = *STDOUT;

$line = join(" ", @ARGV);
$line =~ s/\s+/ /g;

#print "Targets = '$line'\n";

$headers_output = '';

for $target (split(/\s+/, $line)) {
    if (!$headers_output) {
	print $out <<EOF;
###############################################################################
# This file is automatically generated from make-defs.  DO NOT EDIT!
###############################################################################

EOF
	$headers_output = 1;
    }
    ($target =~ /^(.+)\.a$/) && do {
	# Archive libraries
	$basename = $1;
	print $out <<EOF;
ALL_SRCS += \$(${basename}_SRCS)
ALL_OBJECTS += \$(OBJPATH)/\${LIBPREFIX}${basename}\$(ARSUFFIX)
INSTALL_OBJECTS += \$(INSTALL_LIBDIR)/\${LIBPREFIX}${basename}\$(ARSUFFIX)

ifdef ${basename}_TARGET_TYPE
\$(${basename}_TARGET_TYPE)-INCLUDES = 1
endif

ifndef NEWARBUILDRULE

${basename}_OBJS += \$(patsubst %.c, %\$(OBJSUFFIX), \$(filter %.c, \$(${basename}_SRCS)))
${basename}_OBJS += \$(patsubst %.cc, %\$(OBJSUFFIX), \$(filter %.cc, \$(${basename}_SRCS)))
${basename}_OBJS += \$(patsubst %.cpp, %\$(OBJSUFFIX), \$(filter %.cpp, \$(${basename}_SRCS)))
${basename}_OBJS += \$(patsubst %.cxx, %\$(OBJSUFFIX), \$(filter %.cxx, \$(${basename}_SRCS)))
${basename}_OBJS += \$(filter %\$(OBJSUFFIX), \$(${basename}_SRCS))

\$(OBJPATH)/\${LIBPREFIX}${basename}\$(ARSUFFIX): \$(${basename}_OBJS)
	\$(if \$(${basename}_SRCS),,\$(error ${basename}_SRCS is not defined for ${basename}!))
	\$(call UPDATE_LIBRARY_COMMAND,\$@,\$^)

else  # NEWARBUILDRULE

MULTIMK_LIBNAMES += ${basename}

\$(OBJPATH)/\${LIBPREFIX}${basename}\$(ARSUFFIX) :: \$(${basename}_SRCS)
	\$(if \$(${basename}_SRCS),,\$(error ${basename}_SRCS is not defined for ${basename}!))

${basename}_LIBCOBJS  = \${addprefix \${LIBPREFIX}${basename}\$(ARSUFFIX)(, \${addsuffix ), \$(patsubst   %.c, %\$(OBJSUFFIX),\$(filter %.c, \$(${basename}_SRCS)))}}
ifneq (,\$(${basename}_LIBCOBJS))
(%\$(OBJSUFFIX)): %.c ;
\$(OBJPATH)/\${LIBPREFIX}${basename}\$(ARSUFFIX) :: \$(${basename}_LIBCOBJS)
	\${call COMPILE.c, \${addprefix \$(SRCPATH)/, \$(?:\$(OBJSUFFIX)=.c)}}
	\$(call UPDATE_LIBRARY_COMMAND,\$@,\${notdir \$(?:.c=\$(OBJSUFFIX))});
	\$(RM) \${notdir \$(?:.c=\$(OBJSUFFIX))}
endif

${basename}_LIBCCOBJS = \${addprefix \${LIBPREFIX}${basename}\$(ARSUFFIX)(, \${addsuffix ), \$(patsubst  %.cc, %\$(OBJSUFFIX),\$(filter %.cc, \$(${basename}_SRCS)))}}
ifneq (,\$(${basename}_LIBCCOBJS))
(%\$(OBJSUFFIX)): %.cc ;
\$(OBJPATH)/\${LIBPREFIX}${basename}\$(ARSUFFIX) :: \$(${basename}_LIBCCOBJS)
	\$(call COMPILE.cxx, \$(addprefix \$(SRCPATH)/, \${?:\$(OBJSUFFIX)=.cc}))
	\$(call UPDATE_LIBRARY_COMMAND,\$@,\${notdir \$(?:.cc=\$(OBJSUFFIX))});
	\$(RM) \${notdir \$(?:.cc=\$(OBJSUFFIX))}
endif

${basename}_LIBCPPOBJS = \${addprefix \${LIBPREFIX}${basename}\$(ARSUFFIX)(, \${addsuffix ), \$(patsubst %.cpp, %\$(OBJSUFFIX),\$(filter %.cpp, \$(${basename}_SRCS)))}}
ifneq (,\$(${basename}_LIBCPPOBJS))
(%\$(OBJSUFFIX)): %.cpp ;
\$(OBJPATH)/\${LIBPREFIX}${basename}\$(ARSUFFIX) :: \$(${basename}_LIBCPPOBJS)
	\$(call COMPILE.cxx, \$(addprefix \$(SRCPATH)/, \${?:\$(OBJSUFFIX)=.cpp}))
	\$(call UPDATE_LIBRARY_COMMAND,\$@,\${notdir \$(?:.cpp=\$(OBJSUFFIX))});
	\$(RM) \${notdir \$(?:.cpp=\$(OBJSUFFIX))}
endif

${basename}_LIBCXXOBJS = \${addprefix \${LIBPREFIX}${basename}\$(ARSUFFIX)(, \${addsuffix ), \$(patsubst %.cxx, %\$(OBJSUFFIX),\$(filter %.cxx, \$(${basename}_SRCS)))}}
ifneq (,\$(${basename}_LIBCXXOBJS))
(%\$(OBJSUFFIX)): %.cxx ;
\$(OBJPATH)/\${LIBPREFIX}${basename}\$(ARSUFFIX) :: \$(${basename}_LIBCXXOBJS)
	\$(call COMPILE.cxx, \$(addprefix \$(SRCPATH)/, \${?:\$(OBJSUFFIX)=.cxx}))
	\$(call UPDATE_LIBRARY_COMMAND,\$@,\${notdir \$(?:.cxx=\$(OBJSUFFIX))});
	\$(RM) \${notdir \$(?:.cxx=\$(OBJSUFFIX))}
endif
.SPECIAL: \$(${basename}_LIBCOBJS) \$(${basename}_LIBCCOBJS) \$(${basename}_LIBCPPOBJS) \$(${basename}_LIBCXXOBJS)

endif # NEWARBUILDRULE
###############################################################################

EOF
	next;
    };
    ($target =~ /^(.+)\.sl$/) && do {
	# Shared libraries
	$basename = $1;
	print $out <<EOF;
ifdef NEWARBUILDRULE
MULTIMK_NONLIBNAMES += ${basename}
endif

ifdef ${basename}_TARGET_TYPE
ifeq (\$(${basename}_TARGET_TYPE),xrt)
\$(OBJPATH)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(SLSUFFIX) \$(OBJPATH)/\$(LIBPREFIX)${basename}\$(SLLIBVER).exp: XRT_AUTH=1
endif
\$(${basename}_TARGET_TYPE)-INCLUDES = 1
${basename}_CPPFLAGS += \$(\$(${basename}_TARGET_TYPE)-CPPFLAGS)
${basename}_CXXFLAGS += \$(\$(${basename}_TARGET_TYPE)-CXXFLAGS)
${basename}_LIBSPATH += \$(\$(${basename}_TARGET_TYPE)-LIBSPATH)
${basename}_LIBS += \$(\$(${basename}_TARGET_TYPE)-LIBS)
\$(OBJPATH)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(SLSUFFIX) \$(OBJPATH)/\$(LIBPREFIX)${basename}\$(SLLIBVER).exp:  CXX_LDFLAGS_POST = \$(\$(${basename}_TARGET_TYPE)-CXX_LDFLAGS_POST)
\$(OBJPATH)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(SLSUFFIX) \$(OBJPATH)/\$(LIBPREFIX)${basename}\$(SLLIBVER).exp:  C_LDFLAGS_POST = \$(\$(${basename}_TARGET_TYPE)-C_LDFLAGS_POST)
endif

ifdef ${basename}_SECURITY_TYPE
${basename}_LIBS += \$(\$(${basename}_SECURITY_TYPE)-LIBS)
endif

ALL_SRCS += \$(${basename}_SRCS)
ALL_OBJECTS += \$(OBJPATH)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(SLSUFFIX)
INSTALL_OBJECTS += \$(INSTALL_LIBDIR)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(SLSUFFIX)


ifeq (win,\$(findstring win,\$(ARCH)))
INSTALL_OBJECTS += \$(INSTALL_LIBDIR)/\${LIBPREFIX}${basename}.lib
endif

ifeq (\$(ARCH),aix4)
\$(OBJPATH)/\${LIBPREFIX}${basename}.a::
	ar r \$(OBJPATH)/\${LIBPREFIX}${basename}.a \$(OBJPATH)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(SLSUFFIX)
ALL_OBJECTS += \$(OBJPATH)/\${LIBPREFIX}${basename}.a
INSTALL_OBJECTS += \$(INSTALL_LIBDIR)/\${LIBPREFIX}${basename}.a
endif

${basename}_OBJS += \$(patsubst %.c, %\$(OBJSUFFIX), \$(filter %.c, \$(${basename}_SRCS)))
${basename}_OBJS += \$(patsubst %.cc, %\$(OBJSUFFIX), \$(filter %.cc, \$(${basename}_SRCS)))
${basename}_OBJS += \$(patsubst %.cpp, %\$(OBJSUFFIX), \$(filter %.cpp, \$(${basename}_SRCS)))
${basename}_OBJS += \$(patsubst %.cxx, %\$(OBJSUFFIX), \$(filter %.cxx, \$(${basename}_SRCS)))
${basename}_OBJS += \$(filter %\$(OBJSUFFIX), \$(${basename}_SRCS))

${basename}_DLLH = ${basename}Dll.h

MULTIMK_LIBSPATH += \$(addprefix \$(OBJPATH)/, \$(${basename}_LIBSPATH))

ifeq (win32, \$(if \$(${basename}_MUTUAL_LIBS),\$(ARCH),))
\${LIBPREFIX}${basename}\$(SLLIBVER)\$(ARSUFFIX) \${LIBPREFIX}${basename}\$(ARSUFFIX) : \$(${basename}_OBJS)
	\$(if \$(${basename}_SRCS),,\$(error ${basename}_SRCS is not defined for ${basename}!))
	\$(call SL_MAKE_EXP,${basename}\$(SLSUFFIX),\$^,\$(LIBPREFIX)${basename}.exp)
	\$(call SL_MAKE_OBJFILES,\$(${basename}_OBJS) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%))
	\$(call SL_LINKLIB_CXX,\$(OBJPATH)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(ARSUFFIX),\$(${basename}_OBJS) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%),\$(${basename}_LIBS),${basename})


\$(OBJPATH)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(SLSUFFIX) \$(OBJPATH)/\$(LIBPREFIX)${basename}\$(SLLIBVER).exp: \$(${basename}_OBJS) \$(addsuffix .lib, \$(${basename}_MUTUAL_LIBS)) \$(${basename}_LIBS:%=-l%) \$(LOCAL_LIBS:%=-l%) \$(LIBS:%=-l%)
	\$(if \$(${basename}_SRCS),,\$(error ${basename}_SRCS is not defined for ${basename}!))
	\$(call SL_MAKE_EXP,${basename}\$(SLSUFFIX),\$^,\$(LIBPREFIX)${basename}.exp)
	\$(call SL_MAKE_OBJFILES,\$(${basename}_OBJS) \$(addsuffix .lib, \$(${basename}_MUTUAL_LIBS)) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%))
	\$(call SL_LINKDLL_CXX,\$(OBJPATH)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(SLSUFFIX),\$(${basename}_OBJS) \$(addsuffix .lib, \$(${basename}_MUTUAL_LIBS)) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%),\$(${basename}_LIBS),${basename})

else

\$(OBJPATH)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(SLSUFFIX) \$(OBJPATH)/\$(LIBPREFIX)${basename}\$(SLLIBVER).exp: \$(${basename}_OBJS) \$(${basename}_LIBS:%=-l%) \$(LOCAL_LIBS:%=-l%) \$(LIBS:%=-l%)
	\$(if \$(${basename}_SRCS),,\$(error ${basename}_SRCS is not defined for ${basename}!))
	\$(call SL_MAKE_EXP,${basename}\$(SLSUFFIX),\$^,\$(LIBPREFIX)${basename}.exp)
	\$(call SL_MAKE_OBJFILES,\$(${basename}_OBJS) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%))
	\$(call SL_LINK_CXX,\$(OBJPATH)/\${LIBPREFIX}${basename}\$(SLLIBVER)\$(SLSUFFIX),\$(${basename}_OBJS) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%),\$(${basename}_LIBS),${basename})

endif


\$(${basename}_DLLH): \$(ceda_mk_dir)/lib/DllImport.h
	\$(call MAKE_TARGET_DLL_H,$target,\$^,\$@)

ifdef ${basename}_TARGET_TYPE
\$(${basename}_OBJS): CPPFLAGS += \$(${basename}_CPPFLAGS)
\$(${basename}_OBJS): CXXFLAGS += \$(${basename}_CXXFLAGS)
endif


###############################################################################

EOF
	next;
    };
    do {
	# Assume executable
	$basename = $target;
	print $out <<EOF;

ifdef NEWARBUILDRULE
MULTIMK_NONLIBNAMES += ${basename}
endif

ifdef ${basename}_TARGET_TYPE
ifeq (\$(${basename}_TARGET_TYPE),xrt)
\$(EXEPREFIX)${basename}\$(EXESUFFIX): XRT_AUTH=1
endif
\$(${basename}_TARGET_TYPE)-INCLUDES = 1
${basename}_CPPFLAGS += \$(\$(${basename}_TARGET_TYPE)-CPPFLAGS)
${basename}_CXXFLAGS += \$(\$(${basename}_TARGET_TYPE)-CXXFLAGS)
${basename}_LIBSPATH += \$(\$(${basename}_TARGET_TYPE)-LIBSPATH)
${basename}_LIBS += \$(\$(${basename}_TARGET_TYPE)-LIBS)
\$(EXEPREFIX)${basename}\$(EXESUFFIX): CXX_LDFLAGS_POST = \$(\$(${basename}_TARGET_TYPE)-CXX_LDFLAGS_POST)
\$(EXEPREFIX)${basename}\$(EXESUFFIX): C_LDFLAGS_POST = \$(\$(${basename}_TARGET_TYPE)-C_LDFLAGS_POST)
\$(${basename}_OBJS): CPPFLAGS += \$(${basename}_CPPFLAGS)
\$(${basename}_OBJS): CXXFLAGS += \$(${basename}_CXXFLAGS)
endif

ifdef ${basename}_SECURITY_TYPE
${basename}_LIBS += \$(\$(${basename}_SECURITY_TYPE)-LIBS)
endif

ALL_SRCS += \$(${basename}_SRCS)
ALL_OBJECTS += \$(EXEPREFIX)${basename}\$(EXESUFFIX)
INSTALL_OBJECTS += \$(INSTALL_BINDIR)/\$(EXEPREFIX)${basename}\$(EXESUFFIX)

${basename}_OBJS += \$(patsubst %.c, %\$(OBJSUFFIX), \$(filter %.c, \$(${basename}_SRCS)))
${basename}_OBJS += \$(patsubst %.cc, %\$(OBJSUFFIX), \$(filter %.cc, \$(${basename}_SRCS)))
${basename}_OBJS += \$(patsubst %.cpp, %\$(OBJSUFFIX), \$(filter %.cpp, \$(${basename}_SRCS)))
${basename}_OBJS += \$(patsubst %.cxx, %\$(OBJSUFFIX), \$(filter %.cxx, \$(${basename}_SRCS)))
${basename}_OBJS += \$(filter %\$(OBJSUFFIX), \$(${basename}_SRCS))

MULTIMK_LIBSPATH += \$(addprefix \$(OBJPATH)/, \$(${basename}_LIBSPATH))

ifndef NOAUTODEPEND
\$(EXEPREFIX)${basename}\$(EXESUFFIX): \$(${basename}_OBJS) \$(${basename}_LIBS:%=-l%) \$(LOCAL_LIBS:%=-l%) \$(LIBS:%=-l%)
else
\$(EXEPREFIX)${basename}\$(EXESUFFIX): \$(${basename}_OBJS) 
endif
	\$(if \$(${basename}_SRCS),,\$(error ${basename}_SRCS is not defined for ${basename}!))
ifdef FORCE_CXX_LINK
	\$(call CXXLINKEXE,\$@,\$(${basename}_OBJS) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%),\$(${basename}_LIBS))
else
ifneq (,\$(filter %.cc,\$(${basename}_SRCS)))
	\$(call CXXLINKEXE,\$@,\$(${basename}_OBJS) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%),\$(${basename}_LIBS))
else
ifneq (,\$(filter %.cxx,\$(${basename}_SRCS)))
	\$(call CXXLINKEXE,\$@,\$(${basename}_OBJS) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%),\$(${basename}_LIBS))
else
ifneq (,\$(filter %.cpp,\$(${basename}_SRCS)))
	\$(call CXXLINKEXE,\$@,\$(${basename}_OBJS) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%),\$(${basename}_LIBS))
else
	\$(call CCLINKEXE,\$@,\$(${basename}_OBJS) \$(${basename}_LIBSPATH:%=\$(INCLUDELIBDIROPTION)%),\$(${basename}_LIBS))
endif
endif
endif
endif

###############################################################################

EOF
	next;
    };
}

